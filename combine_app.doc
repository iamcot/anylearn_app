name: anylearn
description: anyLEARN - Unlimited learning

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.7.1+29

environment:
  sdk: ">=2.1.0 <3.0.0"

dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  carousel_slider: ^3.0.0 
  flutter_launcher_icons: ^0.9.0
  table_calendar: ^2.2.3
  material_design_icons_flutter: ^4.0.5245
  intl: ^0.16.1
  flutter_html: ^2.1.5
  expandable: ^4.1.4
  url_launcher: ^6.0.3
  qr_flutter: ^3.2.0
  # barcode_scan: ^3.0.1
  share: ^0.6.4+2
  validators: ^2.0.0+1
  image_picker: ^0.7.4
  http: ^0.13.1
  bloc: ^7.2.1
  flutter_bloc: ^7.3.3
  equatable: ^1.1.1
  meta: ^1.1.8
  flutter_secure_storage: ^3.3.3
  flutter_masked_text: ^0.8.0
  mime: ^0.9.6+3
  # html_editor: ^1.0.1
  # flutter_html_editor: ^1.0.0
  # flutter_summernote: ^0.2.2
  path_provider: ^2.0.1
  #flutter_local_notifications: ^5.0.0+1
  firebase_messaging: ^10.0.7
  overlay_support: ^1.2.1
  cached_network_image: ^3.0.0
  photo_view: ^0.13.0
  flutter_svg: ^0.23.0+1
  youtube_player_flutter: ^8.0.0
  shared_preferences: ^2.0.5
  flutter_facebook_auth: ^3.3.3+1
  sign_in_with_apple: ^3.0.0
  # device_info: ^2.0.0
  intro_slider: ^3.0.2
  after_layout: ^1.1.0
  webview_flutter: ^2.3.0
  badges: ^2.0.1


dev_dependencies:
  flutter_test:
    sdk: flutter

flutter_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/images/logo_app.jpg"


# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #  - images/a_dot_burr.jpeg
  #  - images/a_dot_ham.jpeg

  assets:
    - assets/images/
    - assets/banners/
    - assets/icons/
    - assets/icons/bg/
    - assets/config/
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware.

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages

import 'dart:convert';

import 'package:flutter/services.dart';

class AppConfig {
  final String apiUrl;
  final String webUrl;
  final String tokenParam;

  AppConfig({
    this.apiUrl,
    this.tokenParam,
    this.webUrl,
  });

  static Future<AppConfig> forEnv(String env) async {
    env = env ?? 'dev';
    final content = await rootBundle.loadString('assets/config/$env.json');
    final json = jsonDecode(content);
    return AppConfig(
      apiUrl: json['apiUrl'],
      tokenParam: json['tokenParam'],
      webUrl: json['webUrl'],
    );
  }
}


import 'package:anylearn/dto/friends_dto.dart';
import 'package:bloc/bloc.dart';

import '../../models/user_repo.dart';
import 'account_blocs.dart';
import 'account_state.dart';

class AccountBloc extends Bloc<AccountEvent, AccountState> {
  final UserRepository userRepository;
  AccountBloc({this.userRepository}) : super(null);

  @override
  AccountState get initialState => AccountInitState();

  @override
  Stream<AccountState> mapEventToState(AccountEvent event) async* {
    try {
      if (event is AccInitPageEvent) {
        yield AccInitPageSuccess(user: event.user);
      } else if (event is AccChangeAvatarEvent) {
        yield UploadAvatarInprogressState();

        String url = await userRepository.uploadAvatar(event.file, event.token);
        if (url != null && url.isNotEmpty) {
          yield UploadAvatarSuccessState(url: url);
        } else {
          yield AccountFailState(error: "Up ảnh không thành công. Có thể file ảnh không phù hợp. Vui lòng thử lại");
        }
      } else if (event is AccChangeBannerEvent) {
        yield UploadBannerInprogressState();
        String url = await userRepository.uploadBanner(event.file, event.token);
        if (url != null && url.isNotEmpty) {
          yield UploadBannerSuccessState(url: url);
        } else {
          yield AccountFailState(error: "Up banner không thành công. Có thể file ảnh không phù hợp. Vui lòng thử lại");
        }
      } else if (event is AccEditSubmitEvent) {
        yield AccEditSavingState();
        bool result = await userRepository.editUser(event.user, event.token);
        if (!result) {
          yield AccountFailState(error: "Cập nhật thông tin thất bại, vui lòng thử lại");
        } else {
          yield AccEditSaveSuccessState(result: result);
        }
      } else if (event is AccLoadFriendsEvent) {
        yield AccFriendsLoadingState();
        FriendsDTO friendsDTO = await userRepository.friends(event.userId, event.token);
        yield AccFriendsLoadSuccessState(friends: friendsDTO);
      } else if (event is AccLoadMyCalendarEvent) {
        yield AccMyCalendarLoadingState();
        final calendar = await userRepository.myCalendar(event.token);
        yield AccMyCalendarSuccessState(calendar: calendar);
      } else if (event is AccJoinCourseEvent) {
        await userRepository.joinCourse(event.token, event.scheduleId, event.childId);
        yield AccJoinSuccessState(itemId: event.itemId);
        this..add(AccLoadMyCalendarEvent(token: event.token));
      } else if (event is AccProfileEvent) {
        yield AccProfileLoadingState();
        final user = await userRepository.getProfile(event.userId);
        yield AccProfileSuccessState(user: user);
      } else if (event is AccLoadDocsEvent) {
        final userDocs = await userRepository.getDocs(event.token);
        yield AccLoadDocsSuccessState(userDocs: userDocs);
      } else if (event is AccAddDocEvent) {
        yield AccAddDocLoadingState();
        final userDocs = await userRepository.addDoc(event.token, event.file);
        yield AccAddDocSuccessState(userDocs: userDocs);
      } else if (event is AccRemoveDocEvent) {
        final userDocs = await userRepository.removeDoc(event.token, event.fileId);
        yield AccRemoveDocSuccessState(userDocs: userDocs);
      }
    } catch (error) {
      yield AccountFailState(error: error.toString());
    }

    try {
      if (event is AccSaveChildrenEvent) {
        yield AccSaveChildrenLoadingState();
        await userRepository.saveChildren(event.token, event.id, event.name);
        yield AccSaveChildrenSuccessState();
      } else if (event is AccLoadChildrenEvent) {
        yield AccChildrenLoadingState();
        final children = await userRepository.getChildren(event.token);
        yield AccChildrenSuccessState(children: children);
      }
    } catch (error) {
      yield AccChildrenFailState(error: error.toString());
    }

    try {
      if (event is AccChangePassEvent) {
        yield AccChangePassInProgressState();
        final result = await userRepository.changePass(event.token, event.newPass, event.oldPass);
        yield AccChangePassSuccessState();
      }
    } catch (error) {
      yield AccChangePassFailState(error: error.toString());
    }
  }
}


export 'account_state.dart';
export 'account_event.dart';
export 'account_bloc.dart';

import 'dart:io';

import 'package:equatable/equatable.dart';

import '../../dto/user_dto.dart';

abstract class AccountEvent extends Equatable {
  const AccountEvent();
}

class AccInitPageEvent extends AccountEvent {
  final UserDTO user;

  AccInitPageEvent({this.user});

  @override
  List<Object> get props => [user];
  @override
  String toString() => 'AccInitPageEvent $user';
}

class AccChangeAvatarEvent extends AccountEvent {
  final File file;
  final String token;

  AccChangeAvatarEvent({this.token, this.file});
  @override
  List<Object> get props => [token, file];
  @override
  String toString() => 'AccChangeAvatarEvent';
}

class AccChangeBannerEvent extends AccountEvent {
  final File file;
  final String token;

  AccChangeBannerEvent({this.token, this.file});
  @override
  List<Object> get props => [token, file];
  @override
  String toString() => 'AccChangeBannerEvent';
}

class AccEditSubmitEvent extends AccountEvent {
  final UserDTO user;
  final String token;

  AccEditSubmitEvent({this.user, this.token});
  @override
  List<Object> get props => [user, token];
  @override
  String toString() => 'AccEditSubmitEvent $user';
}

class AccLoadFriendsEvent extends AccountEvent {
  final int userId;
  final String token;

  AccLoadFriendsEvent({this.userId, this.token});
  @override
  List<Object> get props => [userId, token];
  @override
  String toString() => 'AccLoadFriendsEvent $userId';
}

class AccLoadMyCalendarEvent extends AccountEvent {
  final String token;

  AccLoadMyCalendarEvent({this.token});
  @override
  List<Object> get props => [token];
  @override
  String toString() => 'AccLoadMyCalendarEvent';
}

class AccJoinCourseEvent extends AccountEvent {
  final String token;
  final int scheduleId;
  final int itemId;
  final int childId;

  AccJoinCourseEvent({this.token, this.itemId, this.scheduleId, this.childId});
  @override
  List<Object> get props => [token, itemId, scheduleId, childId];
  @override
  String toString() => 'AccJoinCourseEvent $itemId $childId';
}

class AccProfileEvent extends AccountEvent {
  final int userId;

  AccProfileEvent({this.userId});
  @override
  List<Object> get props => [userId];
  @override
  String toString() => 'AccProfileEvent $userId';
}

class AccLoadDocsEvent extends AccountEvent {
  final String token;

  AccLoadDocsEvent({this.token});
  @override
  List<Object> get props => [token];
  @override
  String toString() => 'AccLoadDocsEvent';
}

class AccAddDocEvent extends AccountEvent {
  final String token;
  final File file;

  AccAddDocEvent({this.token, this.file});
  @override
  List<Object> get props => [token, file];
  @override
  String toString() => 'AccAddDocEvent';
}

class AccRemoveDocEvent extends AccountEvent {
  final String token;
  final int fileId;

  AccRemoveDocEvent({this.token, this.fileId});
  @override
  List<Object> get props => [token, fileId];
  @override
  String toString() => 'AccRemoveDocEvent $fileId';
}

class AccSaveChildrenEvent extends AccountEvent {
  final String token;
  final String name;
  final int id;

  AccSaveChildrenEvent({this.token, this.id, this.name});
  @override
  List<Object> get props => [token, id, name];
  @override
  String toString() => 'AccSaveChildrenEvent $id, $name';
}

class AccLoadChildrenEvent extends AccountEvent {
  final String token;

  AccLoadChildrenEvent({this.token});
  @override
  List<Object> get props => [token];
  @override
  String toString() => 'AccLoadChildrenEvent';
}

class AccChangePassEvent extends AccountEvent {
  final String newPass;
  final String oldPass;
  final String token;

  AccChangePassEvent({this.newPass, this.oldPass, this.token});
  @override
  List<Object> get props => [token, newPass, oldPass];
  @override
  String toString() => 'AccChangePassEvent';
}


import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/account_calendar_dto.dart';
import '../../dto/friends_dto.dart';
import '../../dto/user_doc_dto.dart';
import '../../dto/user_dto.dart';

abstract class AccountState extends Equatable {
  const AccountState();
  @override
  List<Object> get props => [];
}

class AccountInitState extends AccountState {}

class AccInitPageSuccess extends AccountState {
  final UserDTO user;

  AccInitPageSuccess({this.user});
  @override
  List<Object> get props => [user];

  @override
  String toString() => '{user: $user}';
}

class UploadAvatarInprogressState extends AccountState {}

class UploadAvatarSuccessState extends AccountState {
  final String url;

  UploadAvatarSuccessState({this.url});

  @override
  List<Object> get props => [url];

  @override
  String toString() => 'Avatar {url: $url}';
}

class UploadBannerInprogressState extends AccountState {}

class UploadBannerSuccessState extends AccountState {
  final String url;

  UploadBannerSuccessState({this.url});

  @override
  List<Object> get props => [url];

  @override
  String toString() => 'Banner {url: $url}';
}

class AccEditSavingState extends AccountState {}

class AccEditSaveSuccessState extends AccountState {
  final bool result;

  AccEditSaveSuccessState({this.result});

  @override
  List<Object> get props => [result];

  @override
  String toString() => 'AccEditSaveSuccessState {result: $result}';
}

class AccFriendsLoadingState extends AccountState {}

class AccFriendsLoadSuccessState extends AccountState {
  final FriendsDTO friends;
  AccFriendsLoadSuccessState({this.friends});

  @override
  List<Object> get props => [friends];

  @override
  String toString() => 'AccFriendsLoadSuccessState {friends: $friends}';
}

class AccMyCalendarLoadingState extends AccountState {}

class AccMyCalendarSuccessState extends AccountState {
  final AccountCalendarDTO calendar;

  AccMyCalendarSuccessState({this.calendar});

  @override
  List<Object> get props => [calendar];

  @override
  String toString() => 'AccMyCalendarSuccessState {}';
}

class AccJoinSuccessState extends AccountState {
  final int itemId;

  AccJoinSuccessState({this.itemId});

  @override
  List<Object> get props => [itemId];

  @override
  String toString() => 'AccJoinSuccessState $itemId';
}

class AccProfileLoadingState extends AccountState {}

class AccProfileSuccessState extends AccountState {
  final UserDTO user;

  AccProfileSuccessState({this.user});

  @override
  List<Object> get props => [user];

  @override
  String toString() => 'AccProfileSuccessState $user';
}

class AccountFailState extends AccountState {
  final String error;
  const AccountFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class AccLoadDocsSuccessState extends AccountState {
  final List<UserDocDTO> userDocs;

  AccLoadDocsSuccessState({this.userDocs});

  @override
  List<Object> get props => [userDocs];

  @override
  String toString() => 'AccLoadDocsSuccessState';
}

class AccAddDocLoadingState extends AccountState {}

class AccAddDocSuccessState extends AccountState {
  final List<UserDocDTO> userDocs;

  AccAddDocSuccessState({this.userDocs});

  @override
  List<Object> get props => [userDocs];

  @override
  String toString() => 'AccAddDocSuccessState';
}

class AccRemoveDocSuccessState extends AccountState {
  final List<UserDocDTO> userDocs;

  AccRemoveDocSuccessState({this.userDocs});

  @override
  List<Object> get props => [userDocs];

  @override
  String toString() => 'AccRemoveDocSuccessState';
}

class AccSaveChildrenLoadingState extends AccountState {
  @override
  String toString() => 'AccSaveChildrenLoading';
}

class AccSaveChildrenSuccessState extends AccountState {
  @override
  String toString() => 'AccSaveChildrenSuccessState';
}

class AccChildrenLoadingState extends AccountState {
  @override
  String toString() => 'AccChildrenLoadingState';
}

class AccChildrenSuccessState extends AccountState {
  final List<UserDTO> children;

  AccChildrenSuccessState({this.children});
  @override
  String toString() => 'AccChildrenSuccessState';
}

class AccChildrenFailState extends AccountState {
  final String error;
  const AccChildrenFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class AccChangePassInProgressState extends AccountState {
  final String newPass;
  final String oldPass;
  final String token;

  AccChangePassInProgressState({this.token, this.newPass, this.oldPass});
  @override
  String toString() => 'AccChangePassInProgressState';
}

class AccChangePassSuccessState extends AccountState {
  @override
  String toString() => 'AccChangePassSuccessState';
}

class AccChangePassFailState extends AccountState {
  final String error;
  const AccChangePassFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:anylearn/dto/ask_paging_dto.dart';
import 'package:anylearn/dto/ask_thread_dto.dart';
import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import 'article_blocs.dart';

class ArticleBloc extends Bloc<ArticleEvent, ArticleState> {
  final PageRepository pageRepository;
  ArticleBloc({this.pageRepository}) : super(null);

  @override
  ArticleState get initialState => ArticleInitState();

  @override
  Stream<ArticleState> mapEventToState(ArticleEvent event) async* {
    try {
      if (event is ArticleIndexEvent) {
        yield ArticleIndexLoadingState();
        final result = await pageRepository.articleIndexPage();
        yield ArticleIndexSuccessState(result: result);
      }
      if (event is ArticleTypeEvent) {
        yield ArticleTypeLoadingState();
        final result = await pageRepository.articleTypePage(event.type, event.page);
        yield ArticleTypeSuccessState(result: result);
      }
      if (event is ArticlePageEvent) {
        yield ArticlePageLoadingState();
        final result = await pageRepository.article(event.id);
        yield ArticlePageSuccessState(result: result);
      }
    } catch (error, trace) {
      yield ArticleFailState(error: error.toString());
      print(trace);
    }
    try {
      if (event is AskIndexEvent) {
        yield AskIndexLoadingState();
        final AskPagingDTO result = await pageRepository.getAskList();
        yield AskIndexSuccessState(data: result);
      }

      if (event is AskThreadEvent) {
        yield AskThreadLoadingState();
        final AskThreadDTO result = await pageRepository.getAskThread(event.askId, event.token);
        yield AskThreadSuccessState(data: result);
      }

      if (event is AskSelectEvent) {
        yield AskSelectLoadingState();
        final result = await pageRepository.askSelectAnswer(event.askId, event.token);
        yield AskSelectSuccessState();
      }

      if (event is AskVoteEvent) {
        yield AskVoteLoadingState();
        final result = await pageRepository.askVote(event.askId, event.type, event.token);
        yield AskVoteSuccessState();
      }
    } catch (error, trace) {
      yield AskFailState(error: error.toString());
      print(trace);
    }
    if (event is AskCreateEvent) {
      try {
        yield AskCreateLoadingState();
        final result = await pageRepository.createAsk(event.askId, event.title, event.content, event.user, event.type);
        yield AskCreateSuccessState();
      } catch (error) {
        yield AskCreateFailState(error: error.toString());
      }
    }
  }
}


export 'article_state.dart';
export 'article_event.dart';
export 'article_bloc.dart';

import 'package:anylearn/dto/user_dto.dart';
import 'package:equatable/equatable.dart';

abstract class ArticleEvent extends Equatable {
  const ArticleEvent();
}

class ArticleIndexEvent extends ArticleEvent {
  @override
  List<Object> get props => [];

  @override
  String toString() => 'ArticleIndexEvent';
}

class ArticleTypeEvent extends ArticleEvent {
  final type;
  final page;

  ArticleTypeEvent({this.type, this.page});
  @override
  List<Object> get props => [type, page];

  @override
  String toString() => 'ArticleTypeEvent {type: $type, page: $page}';
}

class ArticlePageEvent extends ArticleEvent {
  final id;

  ArticlePageEvent({this.id});
  @override
  List<Object> get props => [id];

  @override
  String toString() => 'ArticlePageEvent {id: $id}';
}

class AskIndexEvent extends ArticleEvent {
  @override
  List<Object> get props => [];

  @override
  String toString() => 'AskIndexEvent';
}

class AskThreadEvent extends ArticleEvent {
  final askId;
  final token;

  AskThreadEvent({this.askId, this.token});

  @override
  List<Object> get props => [askId, token];

  @override
  String toString() => 'AskThreadEvent';
}

class AskCreateEvent extends ArticleEvent {
  final askId;
  final String content;
  final String title;
  final String type;
  final UserDTO user;

  AskCreateEvent({this.content, this.title, this.type, this.user, this.askId});

  @override
  List<Object> get props => [askId, content, title, type, user];

  @override
  String toString() => 'AskCreateEvent {type: $type}';
}

class AskSelectEvent extends ArticleEvent {
  final askId;
  final String token;

  AskSelectEvent({this.askId, this.token});

  @override
  List<Object> get props => [askId, token];

  @override
  String toString() => 'AskSelectEvent {askId: $askId}';
}

class AskVoteEvent extends ArticleEvent {
  final askId;
  final String type;
  final String token;

  AskVoteEvent({this.askId, this.type, this.token});

  @override
  List<Object> get props => [askId, token, type];

  @override
  String toString() => 'AskVoteEvent {askId: $askId, type: $type}';
}


import 'package:anylearn/dto/ask_paging_dto.dart';
import 'package:anylearn/dto/ask_thread_dto.dart';
import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

import '../../dto/article_dto.dart';

abstract class ArticleState extends Equatable {
  const ArticleState();
  @override
  List<Object> get props => [];
}

class ArticleInitState extends ArticleState {}

class ArticleIndexLoadingState extends ArticleState {}

class ArticleIndexSuccessState extends ArticleState {
  final ArticleHomeDTO result;
  ArticleIndexSuccessState({@required this.result}) : assert(result != null);
  @override
  List<Object> get props => [result];
}

class ArticleTypeLoadingState extends ArticleState {}

class ArticleTypeSuccessState extends ArticleState {
  final ArticlePagingDTO result;
  ArticleTypeSuccessState({@required this.result}) : assert(result != null);
  @override
  List<Object> get props => [result];
}

class ArticlePageLoadingState extends ArticleState {}

class ArticlePageSuccessState extends ArticleState {
  final ArticleDTO result;
  ArticlePageSuccessState({@required this.result}) : assert(result != null);
  @override
  List<Object> get props => [result];
}

class ArticleFailState extends ArticleState {
  final String error;
  const ArticleFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class AskIndexLoadingState extends ArticleState {}

class AskIndexSuccessState extends ArticleState {
  final AskPagingDTO data;
  const AskIndexSuccessState({@required this.data});
  @override
  List<Object> get props => [data];
  @override
  String toString() => '{AskIndexSuccessState}';
}

class AskFailState extends ArticleState {
  final String error;
  const AskFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class AskThreadLoadingState extends ArticleState {}

class AskThreadSuccessState extends ArticleState {
  final AskThreadDTO data;
  const AskThreadSuccessState({@required this.data});
  @override
  List<Object> get props => [data];
  @override
  String toString() => '{AskThreadSuccessState}';
}

class AskCreateLoadingState extends ArticleState {}

class AskCreateSuccessState extends ArticleState {}

class AskCreateFailState extends ArticleState {
  final String error;
  const AskCreateFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class AskSelectLoadingState extends ArticleState {}

class AskSelectSuccessState extends ArticleState {}

class AskVoteLoadingState extends ArticleState {}

class AskVoteSuccessState extends ArticleState {}


import 'package:bloc/bloc.dart';
import 'package:flutter/material.dart';

import '../../dto/user_dto.dart';
import '../../models/user_repo.dart';
import 'auth_event.dart';
import 'auth_state.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final UserRepository userRepository;

  AuthBloc({@required this.userRepository}) : assert(userRepository != null), super(null);

  @override
  AuthState get initialState => AuthInitState();

  @override
  Stream<AuthState> mapEventToState(AuthEvent event) async* {
    try {
      if (event is AuthCheckEvent) {
        yield AuthInProgressState();
        final String token = await userRepository.getToken();
        if (token == null) {
          yield AuthFailState();
        } else {
          bool isFull = event.isFull ?? false;
          UserDTO userDTO = await userRepository.getUser(token, isFull);
          if (userDTO == null) {
            await userRepository.deleteToken();
            yield AuthTokenFailState();
            yield AuthFailState();
          } else {
            yield AuthSuccessState(user: userDTO);
          }
        }
      } else if (event is AuthLoggedInEvent) {
        yield AuthInProgressState();
        await userRepository.storeToken(event.user.token);
        yield AuthSuccessState(user: event.user);
      } else if (event is AuthLoggedOutEvent) {
        yield AuthInProgressState();
        await userRepository.deleteToken();
        await userRepository.logout(event.token);
        yield AuthFailState();
      }
    } catch (error) {
      yield AuthFailState(error: error.toString());
    }
    try {
      if (event is AuthContractSaveEvent) {
        final result = await userRepository.saveContract(event.token, event.contract);
        if (result) {
          yield AuthContractSuccessState();
        }
      }
    } catch (error) {
      yield AuthContractFailState(error: error.toString());
    }
    try {
      if (event is AuthContractLoadEvent) {
        yield AuthContractInProgressState();
        final contract = await userRepository.loadContract(event.token, event.contractId);
        yield AuthContractLoadSuccessState(contract: contract);
      }
    } catch (error) {
      yield AuthContractLoadFailState(error: error.toString());
    }
     try {
      if (event is AuthContractLoadForSignEvent) {
        yield AuthContractInProgressState();
        final contract = await userRepository.loadContract(event.token, event.contractId);
        yield AuthContractLoadForSignSuccessState(contract: contract);
      }
    } catch (error) {
      yield AuthContractLoadFailState(error: error.toString());
    }
    try {
      if (event is AuthContractSignEvent) {
        yield AuthContractSigningState();
        await userRepository.signContract(event.token, event.contractId);
        yield AuthContractSignedSuccessState();
      }
    } catch (error) {
      yield AuthContractSignedFailState(error: error.toString());
    }
  }
}


export 'auth_state.dart';
export 'auth_event.dart';
export 'auth_bloc.dart';

import 'dart:io';

import 'package:anylearn/dto/contract.dart';
import 'package:anylearn/dto/user_dto.dart';
import 'package:meta/meta.dart';
import 'package:equatable/equatable.dart';

abstract class AuthEvent extends Equatable {
  const AuthEvent();

  @override
  List<Object> get props => [];
}

class AuthCheckEvent extends AuthEvent {
  bool isFull = false;
  AuthCheckEvent({this.isFull});

  @override
  List<Object> get props => [isFull];

  @override
  String toString() => 'AuthCheckEvent { isFull: $isFull }';
}

class AuthSubpageCheckEvent extends AuthEvent {}

class AuthLoggedInEvent extends AuthEvent {
  final UserDTO user;
  const AuthLoggedInEvent({@required this.user});

  @override
  List<Object> get props => [user];

  @override
  String toString() => 'LoggedIn {token: ${user.token}, name: ${user.name} }';
}

class AuthLoggedOutEvent extends AuthEvent {
  final String token;
  const AuthLoggedOutEvent({@required this.token});

  @override
  List<Object> get props => [token];

  @override
  String toString() => 'AuthLoggedOutEvent';
}

class AuthContractSaveEvent extends AuthEvent {
  final String token;
  final ContractDTO contract;
  const AuthContractSaveEvent({@required this.token, this.contract});

  @override
  List<Object> get props => [token, contract];

  @override
  String toString() => 'AuthContractSaveEvent {contract: $contract}';
}

class AuthContractLoadEvent extends AuthEvent {
  final String token;
  final int contractId;
  const AuthContractLoadEvent({@required this.token, this.contractId});

  @override
  List<Object> get props => [token];

  @override
  String toString() => 'AuthContractLoadEvent';
}

class AuthContractLoadForSignEvent extends AuthEvent {
  final String token;
  final int contractId;
  const AuthContractLoadForSignEvent({@required this.token, this.contractId});

  @override
  List<Object> get props => [token];

  @override
  String toString() => 'AuthContractLoadEvent';
}

class AuthContractSignEvent extends AuthEvent {
  final String token;
  final int contractId;

  const AuthContractSignEvent({@required this.token, this.contractId});

  @override
  List<Object> get props => [token, contractId];

  @override
  String toString() => 'AuthContractSignEvent';
}


import 'package:anylearn/dto/contract.dart';
import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

import '../../dto/user_dto.dart';

abstract class AuthState extends Equatable {
  @override
  List<Object> get props => [];
}

class AuthInitState extends AuthState {}

class AuthSuccessState extends AuthState {
  final UserDTO user;

  AuthSuccessState({@required this.user}) : assert(user != null);

  @override
  List<Object> get props => [user];
}

class AuthSubpageSuccessState extends AuthState {
  final UserDTO user;

  AuthSubpageSuccessState({@required this.user}) : assert(user != null);

  @override
  List<Object> get props => [user];
}

class AuthFailState extends AuthState {
  final String error;

  AuthFailState({this.error});

  @override
  List<Object> get props => [error];
}

class AuthTokenFailState extends AuthState {}

class AuthInProgressState extends AuthState {}
class AuthContractInProgressState extends AuthState {}

// class AuthContractSavingState extends AuthState {}
class AuthContractSuccessState extends AuthState {}

class AuthContractFailState extends AuthState {
  final String error;

  AuthContractFailState({this.error});

  @override
  List<Object> get props => [error];
}

class AuthContractLoadSuccessState extends AuthState {
  final ContractDTO contract;

  AuthContractLoadSuccessState({this.contract});

  @override
  List<Object> get props => [contract];
}

class AuthContractLoadForSignSuccessState extends AuthState {
  final ContractDTO contract;

  AuthContractLoadForSignSuccessState({this.contract});

  @override
  List<Object> get props => [contract];
}

class AuthContractLoadFailState extends AuthState {
  final String error;

  AuthContractLoadFailState({this.error});

  @override
  List<Object> get props => [error];
}

class AuthContractSigningState extends AuthState {}

class AuthContractSignedSuccessState extends AuthState {
  final String image;

  AuthContractSignedSuccessState({this.image});

  @override
  List<Object> get props => [image];
}

class AuthContractSignedFailState extends AuthState {
  final String error;

  AuthContractSignedFailState({this.error});

  @override
  List<Object> get props => [error];
}


import 'package:bloc/bloc.dart';

import '../../models/item_repo.dart';
import '../../models/user_repo.dart';
import 'course_event.dart';
import 'course_state.dart';

class CourseBloc extends Bloc<CourseEvent, CourseState> {
  final ItemRepository itemRepository;
  final UserRepository userRepository;
  CourseBloc({this.userRepository, this.itemRepository}) : super(null);

  @override
  CourseState get initialState => CourseInitState();

  @override
  Stream<CourseState> mapEventToState(CourseEvent event) async* {
    try {
      if (event is LoadCourseEvent) {
        yield CourseLoadingState();
        final item = await itemRepository.loadItemEdit(event.id, event.token);
        if (item != null) {
          yield CourseLoadSuccess(item: item);
        } else {
          yield CourseFailState(error: "Không lấy được không tin");
        }
      }
      if (event is SaveCourseEvent) {
        yield CourseSavingState();
        final result = await itemRepository.saveItem(event.item, event.token);
        if (result) {
          yield CourseSaveSuccessState();
        } else {
          yield CourseFailState(error: "Lưu khóa học thất bại, vui lòng thử lại.");
        }
      }

      if (event is ListCourseEvent) {
        yield CourseListLoadingState();
        final result = await itemRepository.coursesOfUser(event.token);
        yield CourseListSuccessState(data: result);
      }

      if (event is CourseUploadImageEvent) {
        yield UploadImageInprogressState();
        String url = await itemRepository.uploadImage(event.image, event.token, event.itemId);
        if (url != null && url.isNotEmpty) {
          yield UploadImageSuccessState(url: url);
        } else {
          yield CourseFailState(error: "Up hình không thành công. Có thể file ảnh không phù hợp. Vui lòng thử lại");
        }
      }

      if (event is CourseChangeUserStatusEvent) {
        yield CourseUserStatusInprogressState();
        await itemRepository.changeUserStatus(event.itemId, event.newStatus, event.token);
        yield CourseUserStatusSuccessState();
      }

      if (event is RegisteredUsersEvent) {
        final users = await userRepository.registeredUsers(event.token, event.itemId);
        yield RegisteredUsersSuccessState(users: users);
      }
    } catch (error, trace) {
      yield CourseFailState(error: error.toString());
      print(trace.toString());
    }
    if (event is ReviewSubmitEvent) {
      try {
        yield ReviewSubmitingState();
        final result = await itemRepository.saveRating(event.itemId, event.rating, event.comment, event.token);
        yield ReviewSubmitSuccessState(result: result);
      } catch (e) {
        print(e);
        yield ReviewSubmitFailState();
      }
    }
    if (event is ReviewLoadEvent) {
      try {
        yield ReviewLoadingState();
        final data = await itemRepository.loadItemReviews(event.itemId);
        yield ReviewLoadSuccessState(data: data);
      } catch (e) {
        print(e);
        yield CourseFailState(error: e.toString());
      }
    }
  }
}


export 'course_state.dart';
export 'course_event.dart';
export 'course_bloc.dart';

import 'dart:io';

import 'package:equatable/equatable.dart';

import '../../dto/item_dto.dart';

abstract class CourseEvent extends Equatable {
  const CourseEvent();
}

class LoadCourseEvent extends CourseEvent {
  final int id;
  final String token;

  LoadCourseEvent({this.id, this.token});
  @override
  List<Object> get props => [id, token];

  @override
  String toString() => 'LoadCourseEvent {id: $id}';
}

class SaveCourseEvent extends CourseEvent {
  final ItemDTO item;
  final String token;

  SaveCourseEvent({this.item, this.token});
  @override
  List<Object> get props => [item, token];

  @override
  String toString() => 'SaveCourseEvent {item: $item}';
}

class ListCourseEvent extends CourseEvent {
  final String token;

  ListCourseEvent({this.token});
  @override
  List<Object> get props => [token];

  @override
  String toString() => 'ListCourseEvent';
}

class CourseUploadImageEvent extends CourseEvent {
  final File image;
  final String token;
  final int itemId;

  CourseUploadImageEvent({this.token, this.image, this.itemId});

  @override
  List<Object> get props => [token, image, itemId];

  @override
  String toString() => 'CourseUploadImageEvent item $itemId';
}

class CourseChangeUserStatusEvent extends CourseEvent {
  final String token;
  final int itemId;
  final int newStatus;

  CourseChangeUserStatusEvent({this.token, this.newStatus, this.itemId});

  @override
  List<Object> get props => [token, newStatus, itemId];

  @override
  String toString() => 'CourseChangeUserStatusEvent item $itemId status $newStatus';
}

class RegisteredUsersEvent extends CourseEvent {
  final String token;
  final int itemId;

  RegisteredUsersEvent({this.token, this.itemId});
  @override
  List<Object> get props => [token, itemId];
  @override
  String toString() => 'RegisteredUsersEvent $itemId';
}

class ReviewSubmitEvent extends CourseEvent {
  final String token;
  final int itemId;
  final int rating;
  final String comment;

  ReviewSubmitEvent({this.token, this.itemId, this.rating, this.comment});
  @override
  List<Object> get props => [token, itemId, rating, comment];
  @override
  String toString() => 'ReviewSubmitEvent {itemId: $itemId, rating: $rating}';
}

class ReviewLoadEvent extends CourseEvent {
  final int itemId;

  ReviewLoadEvent({this.itemId});
  @override
  List<Object> get props => [itemId];
  @override
  String toString() => 'ReviewLoadEvent {itemId: $itemId}';
}


import 'package:anylearn/dto/class_registered_user.dart';
import 'package:anylearn/dto/item_user_action.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/item_dto.dart';
import '../../dto/user_courses_dto.dart';
import '../../dto/user_dto.dart';

abstract class CourseState extends Equatable {
  const CourseState();
  @override
  List<Object> get props => [];
}

class CourseInitState extends CourseState {}

class CourseLoadingState extends CourseState {}

class CourseLoadSuccess extends CourseState {
  final ItemDTO item;
  const CourseLoadSuccess({@required this.item});
  @override
  List<Object> get props => [item];
  @override
  String toString() => 'CourseLoadSuccess {item: $item}';
}

class CourseSavingState extends CourseState {}

class CourseSaveSuccessState extends CourseState {}

class CourseListLoadingState extends CourseState {}

class CourseListSuccessState extends CourseState {
  final UserCoursesDTO data;

  CourseListSuccessState({this.data});

  @override
  List<Object> get props => [data];
  @override
  String toString() => 'UserCoursesDTO {data: $data}';
}

class UploadImageInprogressState extends CourseState {}

class UploadImageSuccessState extends CourseState {
  final String url;
  const UploadImageSuccessState({@required this.url});
  @override
  List<Object> get props => [url];
  @override
  String toString() => '{url: $url}';
}

class CourseUserStatusInprogressState extends CourseState {}

class CourseUserStatusSuccessState extends CourseState {}

class CourseFailState extends CourseState {
  final String error;
  const CourseFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class RegisteredUsersSuccessState extends CourseState {
  final List<ClassRegisteredUserDTO> users;

  RegisteredUsersSuccessState({this.users});

  @override
  List<Object> get props => [users];

  @override
  String toString() => 'RegisteredUsersSuccessState {}';
}

class ReviewSubmitingState extends CourseState {}

class ReviewSubmitFailState extends CourseState {}

class ReviewSubmitSuccessState extends CourseState {
  final bool result;

  ReviewSubmitSuccessState({this.result});

  @override
  List<Object> get props => [result];

  @override
  String toString() => 'ReviewSubmitSuccessState {result: $result}';
}

class ReviewLoadSuccessState extends CourseState {
  final List<ItemUserAction> data;

  ReviewLoadSuccessState({this.data});

  @override
  List<Object> get props => [data];

  @override
  String toString() => 'ReviewLoadSuccessState';
}

class ReviewLoadingState extends CourseState {}


import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import 'event_event.dart';
import 'event_state.dart';

class EventBloc extends Bloc<EventEvent, EventState> {
  final PageRepository pageRepository;
  EventBloc({this.pageRepository}) : super(null);

  @override
  EventState get initialState => EventInitState();

  @override
  Stream<EventState> mapEventToState(EventEvent event) async* {
    try {
      if (event is LoadEventEvent) {
        yield EventLoadingState();
        final data = await pageRepository.monthEvent(event.month);
        if (data != null) {
          yield EventSuccessState(data: data);
        } else {
          yield EventFailState(error: "Không có dữ liệu");
        }
      }
    } catch (error, trace) {
      yield EventFailState(error: "Có lỗi xảy ra, vui lòng thử lại. $error");
      print(trace.toString());
    }
  }
}


export 'event_state.dart';
export 'event_event.dart';
export 'event_bloc.dart';

import 'package:equatable/equatable.dart';

abstract class EventEvent extends Equatable {
  const EventEvent();
}

class LoadEventEvent extends EventEvent {
  final DateTime month;

  LoadEventEvent({this.month});
  @override
  List<Object> get props => [month];

  @override
  String toString() => 'LoadEventEvent';
}

import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/event_dto.dart';


abstract class EventState extends Equatable {
  const EventState();
  @override
  List<Object> get props => [];
}

class EventInitState extends EventState {}

class EventLoadingState extends EventState {}

class EventSuccessState extends EventState {
  final Map<DateTime, List<EventDTO>> data;
  EventSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class EventFailState extends EventState {
  final String error;
  const EventFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import 'feedback_blocs.dart';

class FeedbackBloc extends Bloc<FeedbackEvent, FeedbackState> {
  final PageRepository pageRepository;
  FeedbackBloc({this.pageRepository}) : super(null);

  @override
  FeedbackState get initialState => FeedbackInitState();

  @override
  Stream<FeedbackState> mapEventToState(FeedbackEvent event) async* {
    try {
      if (event is SaveFeedbackEvent) {
        yield FeedbackSavingState();
        final result = await pageRepository.saveFeedback(event.token, event.content, event.file);
        if (result) {
          yield FeedbackSuccessState(result: result);
        } else {
          yield FeedbackFailState(error: "Có lỗi xảy ra, vui lòng thử lại");
        }
      }
    } catch (error, trace) {
      yield FeedbackFailState(error: error.toString());
      print(trace);
    }
  }
}


export 'feedback_state.dart';
export 'feedback_event.dart';
export 'feedback_bloc.dart';

import 'dart:io';

import 'package:equatable/equatable.dart';

abstract class FeedbackEvent extends Equatable {
  const FeedbackEvent();
}

class SaveFeedbackEvent extends FeedbackEvent {
  final String token;
  final String content;
  final File file;

  SaveFeedbackEvent({this.token, this.content, this.file});
  @override
  List<Object> get props => [token, content, file];

  @override
  String toString() => 'SaveFeedbackEvent {content: $content, file: $file}';
}


import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

abstract class FeedbackState extends Equatable {
  const FeedbackState();
  @override
  List<Object> get props => [];
}

class FeedbackInitState extends FeedbackState {}

class FeedbackSavingState extends FeedbackState {}

class FeedbackSuccessState extends FeedbackState {
  final bool result;
  FeedbackSuccessState({@required this.result}) : assert(result != null);
  @override
  List<Object> get props => [result];
}

class FeedbackFailState extends FeedbackState {
  final String error;
  const FeedbackFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:anylearn/dto/const.dart';
import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import 'home_event.dart';
import 'home_state.dart';

class HomeBloc extends Bloc<HomeEvent, HomeState> {
  final PageRepository pageRepository;
  HomeBloc({this.pageRepository}) : super(null);

  @override
  HomeState get initialState => HomeInitState();

  @override
  Stream<HomeState> mapEventToState(HomeEvent event) async* {
    try {
      if (event is LoadHomeEvent) {
        yield HomeLoadingState();
        final data = await pageRepository.dataHome(
            event.user != null ? event.user.role : MyConst.ROLE_GUEST, event.user != null ? event.user.id : null);
        if (data != null) {
          data.config.ignorePopupVersion = await pageRepository.getPopupVersion();
          yield HomeSuccessState(data: data);
        } else {
          yield HomeFailState(error: "Không có config cho trang");
        }
      }
      if (event is LoadQuoteEvent) {
        yield QuoteLoadingState();
        final quote = await pageRepository.getQuote(event.url);
        if (quote == null) {
          yield QuoteFailState();
        } else {
          yield QuoteSuccessState(quote: quote);
        }
      }
    } catch (error, trace) {
      yield HomeFailState(error: "Có lỗi xảy ra, vui lòng thử lại. $error");
      print(trace.toString());
    }

    if (event is LoadGuideEvent) {
      try {
        yield GuideLoadingState();
        final doc = await pageRepository.guide(event.path);
        if (doc != null) {
          yield GuideLoadSuccessState(doc: doc);
        }
      } catch (error) {
        yield GuideFailState(error: error.toString());
      }
    }

    if (event is UpdatePopupVersionEvent) {
      try {
        await pageRepository.savePopupVersion(event.version);
        yield UpdatePopupSuccessState();
      } catch (e) {
        print(e.toString());
      }
    }
  }
}


export 'home_state.dart';
export 'home_event.dart';
export 'home_bloc.dart';

import 'package:equatable/equatable.dart';

import '../../dto/user_dto.dart';

abstract class HomeEvent extends Equatable {
  const HomeEvent();
}

class LoadHomeEvent extends HomeEvent {
  final UserDTO user;

  LoadHomeEvent({this.user});
  @override
  List<Object> get props => [user];

  @override
  String toString() => 'LoadHomeEvent';
}

class LoadQuoteEvent extends HomeEvent {
  final url;

  LoadQuoteEvent({this.url});
  @override
  List<Object> get props => [];
  @override
  String toString() => 'LoadQuoteEvent';
}

class LoadGuideEvent extends HomeEvent {
  final String path;

  LoadGuideEvent({this.path});
  @override
  List<Object> get props => [];
  @override
  String toString() => 'LoadGuideEvent';
}

class UpdatePopupVersionEvent extends HomeEvent {
  final int version;

  UpdatePopupVersionEvent({this.version});
  @override
  List<Object> get props => [version];
  @override
  String toString() => 'UpdatePopupVersionEvent: $version';
}


import 'package:anylearn/dto/doc_dto.dart';
import 'package:anylearn/dto/quote_dto.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/home_dto.dart';

abstract class HomeState extends Equatable {
  const HomeState();
  @override
  List<Object> get props => [];
}

class HomeInitState extends HomeState {}

class HomeLoadingState extends HomeState {}

class QuoteLoadingState extends HomeState {}

class QuoteSuccessState extends HomeState {
  final QuoteDTO quote;

  QuoteSuccessState({this.quote});
  @override
  List<Object> get props => [quote];
}

class QuoteFailState extends HomeState {}

class HomeSuccessState extends HomeState {
  final HomeDTO data;
  HomeSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class HomeFailState extends HomeState {
  final String error;
  const HomeFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class GuideLoadingState extends HomeState {}

class GuideFailState extends HomeState {
  final String error;
  const GuideFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class GuideLoadSuccessState extends HomeState {
  final DocDTO doc;

  GuideLoadSuccessState({this.doc});
  @override
  List<Object> get props => [doc];
  @override
  String toString() => 'GuideLoadSuccessState';
}

class UpdatePopupSuccessState extends HomeState {}


import 'package:anylearn/dto/home_dto.dart';
import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import 'items_event.dart';
import 'items_state.dart';

class ItemsBloc extends Bloc<ItemsEvent, ItemsState> {
  final PageRepository pageRepository;
  ItemsBloc({this.pageRepository}) : super(null);

  @override
  ItemsState get initialState => ItemsInitState();

  @override
  Stream<ItemsState> mapEventToState(ItemsEvent event) async* {
    try {
      var data;
      if (event is ItemsSchoolLoadEvent) {
        yield ItemsLoadingState();
        data = await pageRepository.dataSchoolPage(event.id, event.page, event.pageSize);
        if (data != null) {
          yield ItemsSchoolSuccessState(data: data);
        }
      } else if (event is ItemsTeacherLoadEvent) {
        yield ItemsLoadingState();
        data = await pageRepository.dataTeacherPage(event.id, event.page, event.pageSize);
        if (data != null) {
          yield ItemsTeacherSuccessState(data: data);
        }
      }
      // if (data == null) {
      //   yield ItemsLoadFailState(error: "Không có thông tin bạn đang tìm kiếm.");
      // }
    } catch (error, trace) {
      yield ItemsLoadFailState(error: "Có lỗi xảy ra, vui lòng thử lại. $error");
      print(trace);
    }
    try {
      if (event is CategoryLoadEvent) {
        yield CategoryLoadingState();
        final List<CategoryPagingDTO> cats = await pageRepository.category(event.id, event.page, event.pageSize);
      }
    } catch (error, trace) {
      yield CategoryFailState(error: "Có lỗi xảy ra, vui lòng thử lại. $error");
      print(error);
    }
  }
}


export 'items_state.dart';
export 'items_event.dart';
export 'items_bloc.dart';

import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

abstract class ItemsEvent extends Equatable {
  const ItemsEvent();
}

class ItemsSchoolLoadEvent extends ItemsEvent {
  final int id;
  final int page;
  final int pageSize;

  ItemsSchoolLoadEvent({@required this.id, this.page = 1, this.pageSize = 9999});

  @override
  List<Object> get props => [id, page, pageSize];

  @override
  String toString() => 'ItemsSchoolLoadEvent  { page: $page, pageSize: $pageSize}';
}

class ItemsTeacherLoadEvent extends ItemsEvent {
  final int id;
  final int page;
  final int pageSize;

  ItemsTeacherLoadEvent({@required this.id, this.page = 1, this.pageSize = 9999});

  @override
  List<Object> get props => [id, page, pageSize];

  @override
  String toString() => 'ItemsTeacherLoadEvent  { page: $page, pageSize: $pageSize}';
}

class CategoryLoadEvent extends ItemsEvent {
  final int id;
  final int page;
  final int pageSize;

  CategoryLoadEvent({@required this.id, this.page = 1, this.pageSize = 9999});

  @override
  List<Object> get props => [id, page, pageSize];

  @override
  String toString() => 'CategoryLoadEvent  { page: $page, pageSize: $pageSize}';
}


import 'package:anylearn/dto/home_dto.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/items_dto.dart';

abstract class ItemsState extends Equatable {
  const ItemsState();
  @override
  List<Object> get props => [];
}

class ItemsInitState extends ItemsState {}

class ItemsLoadingState extends ItemsState {}

class ItemsSchoolSuccessState extends ItemsState {
  final ItemsDTO data;
  ItemsSchoolSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class ItemsTeacherSuccessState extends ItemsState {
  final ItemsDTO data;
  ItemsTeacherSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class ItemsLoadFailState extends ItemsState {
  final String error;
  const ItemsLoadFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class CategoryLoadingState extends ItemsState {}

class CategorySuccessState extends ItemsState {
  final List<CategoryPagingDTO> data;
  CategorySuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class CategoryFailState extends ItemsState {
  final String error;
  const CategoryFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:anylearn/blocs/auth/auth_blocs.dart';
import 'package:bloc/bloc.dart';
import 'package:meta/meta.dart';

import '../../models/user_repo.dart';
import '../auth/auth_bloc.dart';
import '../auth/auth_event.dart';
import 'login_event.dart';
import 'login_state.dart';

class LoginBloc extends Bloc<LoginEvent, LoginState> {
  final UserRepository userRepository;
  final AuthBloc authBloc;

  LoginBloc({@required this.userRepository, @required this.authBloc})
      : assert(userRepository != null),
        assert(authBloc != null), super(null);

  @override
  LoginState get initialState => LoginInitState();

  @override
  Stream<LoginState> mapEventToState(LoginEvent event) async* {
    if (event is LoginButtonPressedEvent) {
      yield LoginInProgressState();

      try {
        final user = await userRepository.authenticated(phone: event.phone, password: event.password);
        authBloc..add(AuthLoggedInEvent(user: user));
        yield LoginSuccessState();
        // yield LoginInitState();
      } catch (error) {
        yield LoginFailState(error: error.toString());
      }
    }

    if (event is LoginFacebookEvent) {
      yield LoginFacebookInProgressState();

      try {
        final user = await userRepository.loginFacebook(data: event.data);
        yield LoginFacebookSuccessState();
        authBloc..add(AuthLoggedInEvent(user: user));
        yield LoginSuccessState();
      } catch (error) {
        yield LoginFacebookFailState(error: error.toString());
      }
    }

    if (event is LoginAppleEvent) {
      yield LoginAppleInProgressState();

      try {
        final user = await userRepository.loginApple(data: event.data);
        yield LoginAppleSuccessState();
        authBloc..add(AuthLoggedInEvent(user: user));
        yield LoginSuccessState();
      } catch (error) {
        yield LoginAppleFailState(error: error.toString());
      }
    }
  }
}


export 'login_state.dart';
export 'login_event.dart';
export 'login_bloc.dart';

import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

abstract class LoginEvent extends Equatable {
  const LoginEvent();
}

class LoginButtonPressedEvent extends LoginEvent {
  final String phone;
  final String password;

  LoginButtonPressedEvent({@required this.phone, @required this.password});

  @override
  List<Object> get props => [phone, password];

  @override 
  String toString() => 'LoginButtonPressed { phone: $phone, password: $password}';
  
}


class LoginFacebookEvent extends LoginEvent {
  final Map<String, dynamic> data;

  LoginFacebookEvent({@required this.data});

  @override
  List<Object> get props => [data];

  @override 
  String toString() => 'LoginFacebookEvent { data: $data}';
  
}


class LoginAppleEvent extends LoginEvent {
  final Map<String, dynamic> data;

  LoginAppleEvent({@required this.data});

  @override
  List<Object> get props => [data];

  @override 
  String toString() => 'LoginAppleEvent { data: $data}';
  
}

import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

abstract class LoginState extends Equatable {
  const LoginState();

  @override
  List<Object> get props => [];
}

class LoginInitState extends LoginState {}

class LoginInProgressState extends LoginState {}

class LoginSuccessState extends LoginState {}

class LoginFailState extends LoginState {
  final String error;

  const LoginFailState({@required this.error});

  @override
  List<Object> get props => [error];

  @override
  String toString() => '{error: $error}';
}

class LoginFacebookInProgressState extends LoginState {}

class LoginFacebookSuccessState extends LoginState {}

class LoginFacebookFailState extends LoginState {
  final String error;

  const LoginFacebookFailState({@required this.error});

  @override
  List<Object> get props => [error];

  @override
  String toString() => '{error: $error}';
}

class LoginAppleInProgressState extends LoginState {}

class LoginAppleSuccessState extends LoginState {}

class LoginAppleFailState extends LoginState {
  final String error;

  const LoginAppleFailState({@required this.error});

  @override
  List<Object> get props => [error];

  @override
  String toString() => '{error: $error}';
}


import 'package:bloc/bloc.dart';
import 'package:flutter/material.dart';

import '../../models/user_repo.dart';
import 'notif_blocs.dart';

class NotifBloc extends Bloc<NotifEvent, NotifState> {
  final UserRepository userRepository;

  NotifBloc({@required this.userRepository}) : assert(userRepository != null), super(null);

  @override
  NotifState get initialState => NotifInitState();

  @override
  Stream<NotifState> mapEventToState(NotifEvent event) async* {
    try {
      if (event is NotifLoadEvent) {
        yield NotifLoadingState();
        final notifs = await userRepository.notification(event.token);
        yield NotifSuccessState(notif: notifs);
      } else if (event is NotifReadEvent) {
        await userRepository.notifRead(event.token, event.id);
        yield NotifReadState();
      }
    } catch (error) {
      yield NotifFailState(error: error.toString());
    }
  }
}


export 'notif_state.dart';
export 'notif_event.dart';
export 'notif_bloc.dart';

import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

abstract class NotifEvent extends Equatable {
  const NotifEvent();

  @override
  List<Object> get props => [];
}

class NotifLoadEvent extends NotifEvent {
  final String token;
  NotifLoadEvent({@required this.token});

  @override
  List<Object> get props => [token];

  @override
  String toString() => 'NotifLoadEvent';
}


class NotifReadEvent extends NotifEvent {
  final String token;
  final int id;
  const NotifReadEvent({@required this.token, this.id, });

  @override
  List<Object> get props => [token, id];

  @override
  String toString() => 'NotifReadEvent id: $id';
}


import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

import '../../dto/notification_dto.dart';

abstract class NotifState extends Equatable {
  @override
  List<Object> get props => [];
}

class NotifInitState extends NotifState {}

class NotifLoadingState extends NotifState {}

class NotifSuccessState extends NotifState {
  final NotificationPagingDTO notif;

  NotifSuccessState({@required this.notif}) : assert(notif != null);

  @override
  List<Object> get props => [notif];
}

class NotifReadState extends NotifState {}

class NotifFailState extends NotifState {
  final String error;

  NotifFailState({this.error});

  @override
  List<Object> get props => [error];
}


import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import '../../models/transaction_repo.dart';
import 'pdp_event.dart';
import 'pdp_state.dart';

class PdpBloc extends Bloc<PdpEvent, PdpState> {
  final PageRepository pageRepository;
  final TransactionRepository transactionRepository;
  PdpBloc({this.pageRepository, this.transactionRepository}) : super(null);

  @override
  PdpState get initialState => PdpInitState();

  @override
  Stream<PdpState> mapEventToState(PdpEvent event) async* {
    try {
      if (event is LoadPDPEvent) {
        yield PdpLoadingState();
        if (event.id == null) {
          yield PdpFailState(error: "Truy vấn không hợp lệ");
        }
        final data = await pageRepository.dataPDP(event.id, event.token);
        if (data != null) {
          yield PdpSuccessState(data: data);
        } else {
          yield PdpFailState(error: "Error 404 - Trang không tồn tại.");
        }
      }
      if (event is PdpFavoriteTouchEvent) {
        yield PdpFavoriteTouchingState();
        final rs = await pageRepository.touchFav(event.itemId, event.token);
        yield PdpFavoriteTouchSuccessState(isFav: rs);
      }
      if (event is PdpFriendLoadEvent) {
        final friends = await pageRepository.allFriends(event.token);
        yield PdpShareFriendListSuccessState(friends: friends);
      }
    } catch (error) {
      yield PdpFailState(error: error.toString());
    }

    if (event is PdpFriendShareEvent) {
      try {
        await pageRepository.shareFriends(event.token, event.itemId, event.friendIds, event.isALL);
        yield PdpShareSuccessState();
      } catch (error, trace) {
        print(trace);
        yield PdpShareFailState(error: error.toString());
      }
    }

    if (event is PdpRegisterEvent) {
      try {
        final data = await transactionRepository.register(event.token, event.itemId, event.voucher, event.childUser);
        if (data) {
          yield PdpRegisterSuccessState(result: data);
        } else {
          yield PdpRegisterFailState(error: "Có lỗi xảy ra, vui lòng thử lại");
        }
      } catch (error) {
        yield PdpRegisterFailState(error: error.toString());
      }
    }
  }
}


export 'pdp_state.dart';
export 'pdp_event.dart';
export 'pdp_bloc.dart';

import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

abstract class PdpEvent extends Equatable {
  const PdpEvent();
}

class LoadPDPEvent extends PdpEvent {
  final int id;
  final String token;

  LoadPDPEvent({@required this.id, this.token});

  @override
  List<Object> get props => [id, token];

  @override
  String toString() => 'LoadPDPEvent  { id: $id}';
}

class PdpFavoriteTouchEvent extends PdpEvent {
  final int itemId;
  final String token;

  PdpFavoriteTouchEvent({@required this.itemId, @required this.token});

  @override
  List<Object> get props => [itemId, token];

  @override
  String toString() => 'PdpFavoriteTouchEvent  { id: $itemId}';
}

class PdpRegisterEvent extends PdpEvent {
  final int itemId;
  final String token;
  final String voucher;
  final int childUser;

  PdpRegisterEvent({@required this.itemId, @required this.token, this.voucher, this.childUser});

  @override
  List<Object> get props => [itemId, token, voucher];

  @override
  String toString() => 'PdpRegisterEvent  { id: $itemId, voucher: $voucher}';
}

class PdpFriendLoadEvent extends PdpEvent {
  final String token;

  PdpFriendLoadEvent({@required this.token});

  @override
  List<Object> get props => [token];

  @override
  String toString() => 'PdpFriendLoadEvent';
}

class PdpFriendShareEvent extends PdpEvent {
  final String token;
  final int itemId;
  final List<int> friendIds;
  final bool isALL;

  PdpFriendShareEvent({this.token, this.itemId, this.friendIds, this.isALL});

  @override
  List<Object> get props => [token, itemId, friendIds, isALL];

  @override
  String toString() => 'PdpFriendShareEvent {id: $itemId, friends: $friendIds, isALL: $isALL}';
}


import 'package:anylearn/dto/user_dto.dart';
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/pdp_dto.dart';

abstract class PdpState extends Equatable {
  const PdpState();
  @override
  List<Object> get props => [];
}

class PdpInitState extends PdpState {}

class PdpLoadingState extends PdpState {}

class PdpSuccessState extends PdpState {
  final PdpDTO data;
  PdpSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class PdpFavoriteTouchingState extends PdpState {}

class PdpFavoriteTouchSuccessState extends PdpState {
  final bool isFav;
  PdpFavoriteTouchSuccessState({@required this.isFav}) : assert(isFav != null);
  @override
  List<Object> get props => [isFav];
}

class PdpRegisteringState extends PdpState {}

class PdpRegisterSuccessState extends PdpState {
  final bool result;
  PdpRegisterSuccessState({this.result});
  @override
  List<Object> get props => [result];
}

class PdpRegisterFailState extends PdpState {
  final String error;
  const PdpRegisterFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class PdpSharingState extends PdpState {}

class PdpShareFailState extends PdpState {
  final String error;
  const PdpShareFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class PdpShareSuccessState extends PdpState {}

class PdpShareFriendListingState extends PdpState {}

class PdpShareFriendListSuccessState extends PdpState {
  final List<UserDTO> friends;

  PdpShareFriendListSuccessState({this.friends});

  @override
  List<Object> get props => [friends];
}

class PdpFailState extends PdpState {
  final String error;
  const PdpFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:bloc/bloc.dart';
import 'package:meta/meta.dart';

import '../../models/user_repo.dart';
import 'register_event.dart';
import 'register_state.dart';

class RegisterBloc extends Bloc<RegisterEvent, RegisterState> {
  final UserRepository userRepository;

  RegisterBloc({@required this.userRepository}) : assert(userRepository != null), super(null);

  @override
  RegisterState get initialState => RegisterInitState();

  @override
  Stream<RegisterState> mapEventToState(RegisterEvent event) async* {
    try {
      if (event is RegisterButtonPressedEvent) {
        yield RegisterInprogressState();

        await userRepository.register(event.userInput.phone, event.userInput.name, event.userInput.password,
            event.userInput.refcode, event.userInput.role);
        yield RegisterSuccessState();
        // yield RegisterInitState();

      }

      if (event is RegisterFormLoadEvent) {
        yield RegisterLoadingTocState();
        final toc = await userRepository.toc();
        yield RegisterTocSuccessState(toc: toc);
      }
    } catch (e) {
      yield RegisterFailState(error: e.toString());
    }
  }
}


export 'register_state.dart';
export 'register_event.dart';
export 'register_bloc.dart';

import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

import '../../dto/user_dto.dart';

abstract class RegisterEvent extends Equatable {
  const RegisterEvent();
}

class RegisterFormLoadEvent extends RegisterEvent {
  @override
  List<Object> get props => [];
}

class RegisterButtonPressedEvent extends RegisterEvent {
  final UserDTO userInput;

  RegisterButtonPressedEvent({@required this.userInput});

  @override
  List<Object> get props => [userInput];

  @override
  String toString() => 'RegisterButtonPressedEvent { user: $userInput}';
}


import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

abstract class RegisterState extends Equatable {
  const RegisterState();

  @override
  List<Object> get props => [];
}

class RegisterInitState extends RegisterState {}

class RegisterLoadingTocState extends RegisterState {}

class RegisterTocSuccessState extends RegisterState {
  final String toc;

  const RegisterTocSuccessState({@required this.toc});

  @override
  List<Object> get props => [toc];

  @override
  String toString() => '{RegisterSuccessState}';
}

class RegisterInprogressState extends RegisterState {}

class RegisterSuccessState extends RegisterState {}

class RegisterFailState extends RegisterState {
  final String error;

  const RegisterFailState({@required this.error});

  @override
  List<Object> get props => [error];

  @override
  String toString() => '{error: $error}';
}


import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';
import 'search_blocs.dart';

class SearchBloc extends Bloc<SearchEvent, SearchState> {
  final PageRepository pageRepository;
  SearchBloc({this.pageRepository}) : super(null);

  @override
  SearchState get initialState => SearchInitState();

  @override
  Stream<SearchState> mapEventToState(SearchEvent event) async* {
    try {
      if (event is SearchUserEvent) {
        yield SearchLoadingState();
        final result = await pageRepository.searchUser(event.screen, event.query);
        yield SearchUserSuccessState(users: result);
      } else if (event is SearchItemEvent) {
        yield SearchLoadingState();
        final result = await pageRepository.searchItem(event.screen, event.query);
        yield SearchItemSuccessState(items: result);
      }
      if (event is SearchTagsEvent) {
        yield SearchTagsLoadingState();
        final tags = await pageRepository.searchTags();
        yield SearchTagsSuccessState(tags: tags);
      }
    } catch (error, trace) {
      yield SearchFailState(error: error.toString());
      print(trace);
    }
  }
}


export 'search_state.dart';
export 'search_event.dart';
export 'search_bloc.dart';

import 'package:equatable/equatable.dart';

abstract class SearchEvent extends Equatable {
  const SearchEvent();
}

class SearchUserEvent extends SearchEvent {
  final String screen;
  final String query;

  SearchUserEvent({this.screen, this.query});
  @override
  List<Object> get props => [screen, query];

  @override
  String toString() => 'SaveSearchEvent {screen: $screen, query: $query}';
}

class SearchItemEvent extends SearchEvent {
  final String screen;
  final String query;

  SearchItemEvent({this.screen, this.query});
  @override
  List<Object> get props => [screen, query];

  @override
  String toString() => 'SaveSearchEvent {screen: $screen, query: $query}';
}

class SearchTagsEvent extends SearchEvent {
  @override
  List<Object> get props => [];

  @override
  String toString() => 'SearchTagsEvent {}';
}


import 'package:anylearn/dto/item_dto.dart';
import 'package:anylearn/dto/user_dto.dart';
import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

abstract class SearchState extends Equatable {
  const SearchState();
  @override
  List<Object> get props => [];
}

class SearchInitState extends SearchState {}

class SearchLoadingState extends SearchState {}

class SearchUserSuccessState extends SearchState {
  final List<UserDTO> users;
  SearchUserSuccessState({@required this.users});
  @override
  List<Object> get props => [users];
}

class SearchItemSuccessState extends SearchState {
  final List<ItemDTO> items;
  SearchItemSuccessState({@required this.items});
  @override
  List<Object> get props => [items];
}

class SearchFailState extends SearchState {
  final String error;
  const SearchFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class SearchTagsLoadingState extends SearchState {}

class SearchTagsSuccessState extends SearchState {
  final List<String> tags;
  SearchTagsSuccessState({@required this.tags});
  @override
  List<Object> get props => [tags];
}


import 'package:bloc/bloc.dart';

import '../../models/transaction_repo.dart';
import 'transaction_blocs.dart';

class TransactionBloc extends Bloc<TransactionEvent, TransactionState> {
  final TransactionRepository transactionRepository;
  TransactionBloc({this.transactionRepository}) : super(null);

  @override
  TransactionState get initialState => TransactionInitState();

  @override
  Stream<TransactionState> mapEventToState(TransactionEvent event) async* {
    try {
      if (event is LoadTransactionPageEvent) {
        final config = await transactionRepository.dataTransactionPage(event.type, event.token);
        if (config == null) {
          yield TransactionFailState(error: "Không load được cấu hình.");
        } else {
          yield TransactionConfigSuccessState(configs: config);
        }
      } else if (event is LoadTransactionHistoryEvent) {
        final data = await transactionRepository.dataHistoryPage(event.token);
        if (data == null) {
          yield TransactionFailState(error: "Không load lịch sử giao dich.");
        } else {
          yield TransactionHistorySuccessState(history: data);
        }
      } else if (event is LoadFoundationEvent) {
        yield FoundationLoadingState();
        final value = await transactionRepository.foundation();
        yield FoundationSuccessState(value: value);
      }
    } catch (error, t) {
      yield TransactionFailState(error: error.toString());
      print(error);
      print(t);
    }

    try {
      if (event is SaveDepositEvent) {
        final result = await transactionRepository.submitDeposit(event.amount, event.token, event.payment);
        yield TransactionDepositeSaveSuccessState();
      } else if (event is SaveWithdrawEvent) {
        final config = await transactionRepository.submitWithdraw(event.amount, event.token, event.bankInfo);
        yield TransactionWithdrawSaveSuccessState();
      } else if (event is SaveExchangeEvent) {
        final config = await transactionRepository.submitExchange(event.amount, event.token);
        yield TransactionExchangeSaveSuccessState();
      }
    } catch (error, trace) {
      print(error);
      print(trace);
      yield TransactionSaveFailState(error: error.toString());
    }
  }
}


export 'transaction_state.dart';
export 'transaction_event.dart';
export 'transaction_bloc.dart';

import 'package:equatable/equatable.dart';
import 'package:meta/meta.dart';

import '../../dto/bank_dto.dart';

abstract class TransactionEvent extends Equatable {
  const TransactionEvent();
}

class LoadTransactionPageEvent extends TransactionEvent {
  final String type;
  final String token;

  LoadTransactionPageEvent({@required this.type, @required this.token});

  @override
  List<Object> get props => [type, token];

  @override
  String toString() => 'LoadTransactionPageEvent  { type: $type}';
}

class LoadTransactionHistoryEvent extends TransactionEvent {
  final String token;

  LoadTransactionHistoryEvent({@required this.token});

  @override
  List<Object> get props => [token];

  @override
  String toString() => 'LoadTransactionHistoryEvent  {}';
}

class SaveDepositEvent extends TransactionEvent {
  final String token;
  final String amount;
  final String payment;

  SaveDepositEvent({@required this.token, @required this.amount, this.payment});

  @override
  List<Object> get props => [token, amount, payment];

  @override
  String toString() => 'SaveDepositEvent  { amount $amount}';
}

class SaveWithdrawEvent extends TransactionEvent {
  final token;
  final amount;
  final BankDTO bankInfo;

  SaveWithdrawEvent({@required this.token, @required this.amount, this.bankInfo});

  @override
  List<Object> get props => [token, amount, bankInfo];

  @override
  String toString() => 'SaveWithdrawEvent  { amount: $amount, bank: $bankInfo}';
}

class SaveExchangeEvent extends TransactionEvent {
  final String token;
  final int amount;

  SaveExchangeEvent({@required this.token, @required this.amount});

  @override
  List<Object> get props => [token, amount];

  @override
  String toString() => 'SaveExchangeEvent  {  amount: $amount}';
}

class LoadFoundationEvent extends TransactionEvent {
  @override
  List<Object> get props => [];

  @override
  String toString() => '  {  LoadFoundationEvent}';
}


import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/foundation_dto.dart';
import '../../dto/transaction_config_dto.dart';
import '../../dto/transaction_dto.dart';

abstract class TransactionState extends Equatable {
  const TransactionState();
  @override
  List<Object> get props => [];
}

class TransactionInitState extends TransactionState {}

class TransactionLoadingState extends TransactionState {}

class TransactionConfigSuccessState extends TransactionState {
  final TransactionConfigDTO configs;
  const TransactionConfigSuccessState({this.configs});
  @override
  List<Object> get props => [configs];
}

class TransactionHistoryLoadingState extends TransactionState {}

class TransactionHistorySuccessState extends TransactionState {
  final Map<String, List<TransactionDTO>> history;

  TransactionHistorySuccessState({this.history});
  @override
  List<Object> get props => [history];
}

class TransactionWithdrawSavingState extends TransactionState {}

class TransactionWithdrawSaveSuccessState extends TransactionState {
  final TransactionConfigDTO configs;

  TransactionWithdrawSaveSuccessState({this.configs});
  @override
  List<Object> get props => [configs];
}

class FoundationLoadingState extends TransactionState {}

class FoundationSuccessState extends TransactionState {
  final FoundationDTO value;

  FoundationSuccessState({this.value});
  @override
  List<Object> get props => [value];
}

class TransactionDepositavingState extends TransactionState {}

class TransactionDepositeSaveSuccessState extends TransactionState {
  // final TransactionConfigDTO configs;

  // TransactionDepositeSaveSuccessState({this.configs});
  // @override
  // List<Object> get props => [configs];
}

class TransactionExchangeSavingState extends TransactionState {}

class TransactionExchangeSaveSuccessState extends TransactionState {
  final TransactionConfigDTO configs;

  TransactionExchangeSaveSuccessState({this.configs});
  @override
  List<Object> get props => [configs];
}

class TransactionSaveFailState extends TransactionState {
  final String error;
  const TransactionSaveFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}

class TransactionFailState extends TransactionState {
  final String error;
  const TransactionFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:anylearn/blocs/users/users_event.dart';
import 'package:anylearn/blocs/users/users_state.dart';
import 'package:bloc/bloc.dart';

import '../../models/page_repo.dart';

class UsersBloc extends Bloc<UsersEvent, UsersState> {
  final PageRepository pageRepository;
  UsersBloc({this.pageRepository}) : super(null);

  @override
  UsersState get initialState => UsersInitState();

  @override
  Stream<UsersState> mapEventToState(UsersEvent event) async* {
    try {
      yield UsersLoadingState();
      var data;
      if (event is UsersSchoolLoadEvent) {
        data = await pageRepository.dataSchoolsPage(event.page, event.pageSize);
        if (data != null) {
          yield UsersSchoolSuccessState(data: data);
        }
      } else if (event is UsersTeacherLoadEvent) {
        data = await pageRepository.dataTeachersPage(event.page, event.pageSize);
        if (data != null) {
          yield UsersTeacherSuccessState(data: data);
        }
      }
      if (data == null) {
        yield UsersLoadFailState(error: "Không có thông tin bạn đang tìm kiếm.");
      }
    } catch (error, trace) {
      yield UsersLoadFailState(error: "Có lỗi xảy ra, vui lòng thử lại. $error");
      print(trace.toString());
    }
  }
}


export 'users_state.dart';
export 'users_event.dart';
export 'users_bloc.dart';

import 'package:equatable/equatable.dart';

abstract class UsersEvent extends Equatable {
  const UsersEvent();
}

class UsersSchoolLoadEvent extends UsersEvent {
  final int page;
  final int pageSize;

  UsersSchoolLoadEvent({this.page = 1, this.pageSize = 9999});

  @override
  List<Object> get props => [page, pageSize];

  @override
  String toString() => 'UsersLoadSchoolsEvent  { page: $page, pageSize: $pageSize}';
}

class UsersTeacherLoadEvent extends UsersEvent {
  final int page;
  final int pageSize;

  UsersTeacherLoadEvent({this.page = 1, this.pageSize = 9999});

  @override
  List<Object> get props => [page, pageSize];

  @override
  String toString() => 'UsersLoadTeacherEvent  { page: $page, pageSize: $pageSize}';
}


import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../dto/users_dto.dart';

abstract class UsersState extends Equatable {
  const UsersState();
  @override
  List<Object> get props => [];
}

class UsersInitState extends UsersState {}

class UsersLoadingState extends UsersState {}

class UsersSchoolSuccessState extends UsersState {
  final UsersDTO data;
  UsersSchoolSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class UsersTeacherSuccessState extends UsersState {
  final UsersDTO data;
  UsersTeacherSuccessState({@required this.data}) : assert(data != null);
  @override
  List<Object> get props => [data];
}

class UsersLoadFailState extends UsersState {
  final String error;
  const UsersLoadFailState({@required this.error});
  @override
  List<Object> get props => [error];
  @override
  String toString() => '{error: $error}';
}


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

class CustomCachedImage extends StatelessWidget {
  final String url;
  final fit;
  final borderRadius;

  CustomCachedImage({Key key, this.url, this.fit, this.borderRadius}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return CachedNetworkImage(
      imageUrl: url,
      imageBuilder: (context, imageProvider) => Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(borderRadius ?? 0),
          image: DecorationImage(
            image: imageProvider,
            fit: fit ?? BoxFit.cover,
          ),
        ),
      ),
      placeholder: (context, url) => Container(
        alignment: Alignment.center,
        child: CircularProgressIndicator(),
      ),
      errorWidget: (context, url, error) => Icon(Icons.error),
    );
  }
}


import 'package:flutter/material.dart';

import '../customs/custom_scroll_physical.dart';

class CustomCarousel extends StatelessWidget {
  CustomCarousel({
    Key key,
    @required this.items,
    @required this.builderFunction,
    @required this.height,
    this.dividerIndent = 10,
    this.width,
  }) : super(key: key);

  final List<dynamic> items;
  final double dividerIndent;
  final Function(BuildContext context, dynamic item, double cardHeight) builderFunction;
  final double height;
  final width;

  @override
  Widget build(BuildContext context) {
    double _width = width;
    if (_width == null) {
      _width = MediaQuery.of(context).size.width;
      _width = _width * 2 / 3 - 10 + this.dividerIndent;
    }

    return Container(
      alignment: Alignment.topCenter,
      height: height,
      child: ListView.separated(
          physics: CustomScrollPhysics(itemDimension: 100),
          primary: false,
          separatorBuilder: (context, index) => Divider(
                indent: dividerIndent,
              ),
          scrollDirection: Axis.horizontal,
          itemCount: items.length,
          itemBuilder: (context, index) {
            Widget item = builderFunction(context, items[index], this.height);
            if (index == 0) {
              return Padding(
                child: item,
                padding: EdgeInsets.only(left: dividerIndent),
              );
            } else if (index == items.length - 1) {
              return Padding(
                child: item,
                padding: EdgeInsets.only(right: dividerIndent),
              );
            }
            return item;
          }),
    );
  }
}


import 'package:flutter/material.dart';

class CurvedClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    var path = Path();
    path.lineTo(0, size.height - 30);
    path.quadraticBezierTo(
        size.width / 2, size.height, size.width, size.height - 30);
    path.lineTo(size.width, 0);

    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) => false;
}

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

class CustomRadio extends StatelessWidget {
  final String groupValue;
  final String value;
  final String label;
  final VoidCallback func;

  const CustomRadio({Key key, this.groupValue, this.value, this.func, this.label}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      child: Row(
        children: <Widget>[
          Radio(
            materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
            groupValue: groupValue,
            value: value,
            onChanged: (value) {
              func();
            },
          ),
          Text.rich(
            TextSpan(
              text: label,
              style: TextStyle(fontSize: 12.0, color: Colors.grey[800]),
              recognizer: TapGestureRecognizer()
                ..onTap = () {
                  func();
                },
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:flutter/material.dart';

class CustomScrollPhysics extends ScrollPhysics {
  final double itemDimension;

  CustomScrollPhysics({this.itemDimension, ScrollPhysics parent}) : super(parent: parent);

  @override
  CustomScrollPhysics applyTo(ScrollPhysics ancestor) {
    return CustomScrollPhysics(itemDimension: itemDimension, parent: buildParent(ancestor));
  }

  double _getPage(ScrollPosition position) {
    return position.pixels / itemDimension;
  }

  double _getPixels(double page) {
    return page * itemDimension;
  }

  double _getTargetPixels(ScrollPosition position, Tolerance tolerance, double velocity) {
    double page = _getPage(position);
    if (velocity < -tolerance.velocity) {
      page -= 1.0;
    } else if (velocity > tolerance.velocity) {
      page += 1.0;
    }
    return _getPixels(page.roundToDouble());
  }

  @override
  Simulation createBallisticSimulation(ScrollMetrics position, double velocity) {
    // If we're out of range and not headed back in range, defer to the parent
    // ballistics, which should put us back in range at a page boundary.
    if ((velocity <= 0.0 && position.pixels <= position.minScrollExtent) ||
        (velocity >= 0.0 && position.pixels >= position.maxScrollExtent))
      return super.createBallisticSimulation(position, velocity);
    final Tolerance tolerance = this.tolerance;
    final double target = _getTargetPixels(position, tolerance, velocity);
    if (target != position.pixels)
      return ScrollSpringSimulation(spring, position.pixels, target, velocity, tolerance: tolerance);
    return null;
  }

  @override
  bool get allowImplicitScrolling => false;
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/search/search_blocs.dart';
import '../dto/item_dto.dart';
import '../dto/user_dto.dart';
import 'custom_cached_image.dart';

class CustomSearchDelegate extends SearchDelegate {
  final screen;

  CustomSearchDelegate({this.screen});

  @override
  String get searchFieldLabel {
    if (screen == "school") {
      return "Tìm Trường Học...";
    } else if (screen == "teacher") {
      return "Tìm chuyên gia...";
    } else if (screen == "product") {
      return "Tìm sản phẩm...";
    }
    return "Tìm khóa học...";
  }

  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: Icon(Icons.clear),
        onPressed: () {
          query = '';
          showSuggestions(context);
        },
      ),
      IconButton(
          icon: Icon(Icons.search),
          onPressed: () {
            showResults(context);
          })
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: Icon(Icons.arrow_back),
      onPressed: () {
        close(context, null);
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    if (screen == "school" || screen == "teacher") {
      BlocProvider.of<SearchBloc>(context)..add(SearchUserEvent(screen: screen, query: query));
    } else {
      BlocProvider.of<SearchBloc>(context)..add(SearchItemEvent(screen: screen, query: query));
    }
    return BlocBuilder<SearchBloc, SearchState>(
      bloc: BlocProvider.of<SearchBloc>(context),
      builder: (context, state) {
        if (state is SearchUserSuccessState) {
          final List<UserDTO> users = state.users;
          return users == null || users.length == 0
              ? Center(child: Text("Rất tiếc, không có thông tin bạn cần tìm."))
              : Container(
                  child: ListView.separated(
                      itemBuilder: (context, index) {
                        return ListTile(
                          leading: Container(
                              height: 50,
                              width: 50,
                              child: users[index].image == null
                                  ? Icon(Icons.broken_image)
                                  : CustomCachedImage(
                                      url: users[index].image,
                                    )),
                          title: Text(users[index].name),
                          trailing: Icon(Icons.chevron_right),
                          onTap: () {
                            Navigator.of(context).pushNamed("/items/$screen", arguments: users[index].id);
                          },
                        );
                      },
                      separatorBuilder: (context, index) {
                        return Divider();
                      },
                      itemCount: users.length),
                );
        }
        if (state is SearchItemSuccessState) {
          final List<ItemDTO> items = state.items;
          return items == null || items.length == 0
              ? Center(child: Text("Rất tiếc, không có thông tin bạn cần tìm."))
              : Container(
                  child: ListView.separated(
                      itemBuilder: (context, index) {
                        return ListTile(
                          leading: Container(
                              height: 50,
                              width: 50,
                              child: items[index].image == null
                                  ? Icon(Icons.broken_image)
                                  : CustomCachedImage(
                                      url: items[index].image,
                                    )),
                          title: Text(items[index].title),
                          subtitle: Text((items[index].authorType == "school" ? "Trung tâm: " : "Giảng viên: ") +
                              items[index].authorName),
                          trailing: Icon(Icons.chevron_right),
                          onTap: () {
                            Navigator.of(context).pushNamed("/pdp", arguments: items[index].id);
                          },
                        );
                      },
                      separatorBuilder: (context, index) {
                        return Divider();
                      },
                      itemCount: items.length),
                );
        }
        return Center(child: CircularProgressIndicator());
      },
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    return (screen == "teacher" || screen == "school")
        ? Text("")
        : BlocBuilder<SearchBloc, SearchState>(
            bloc: BlocProvider.of<SearchBloc>(context)..add(SearchTagsEvent()),
            builder: (context, state) {
              if (state is SearchTagsSuccessState) {
                return Container(
                  child: ListView.separated(
                      itemBuilder: (context, index) {
                        return ListTile(
                          title: Text(
                            "@${state.tags[index]}",
                            style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
                          ),
                          trailing: Icon(Icons.chevron_right),
                          onTap: () {
                            query = "@${state.tags[index]}";
                            showResults(context);
                          },
                        );
                      },
                      separatorBuilder: (context, index) {
                        return Divider();
                      },
                      itemCount: state.tags.length),
                );
              }
              return CircularProgressIndicator();
            });
  }
}



import 'package:flutter/material.dart';

class CustomShapeBorder extends ContinuousRectangleBorder {
  @override
  Path getOuterPath(Rect rect, {TextDirection textDirection}) {

    final double innerCircleRadius = 150.0;

    Path path = Path();
    path.lineTo(0, rect.height);
    path.quadraticBezierTo(rect.width / 2 - (innerCircleRadius / 2) - 30, rect.height + 15, rect.width / 2 - 75, rect.height + 50);
    path.cubicTo(
        rect.width / 2 - 40, rect.height + innerCircleRadius - 40,
        rect.width / 2 + 40, rect.height + innerCircleRadius - 40,
        rect.width / 2 + 75, rect.height + 50
    );
    path.quadraticBezierTo(rect.width / 2 + (innerCircleRadius / 2) + 30, rect.height + 15, rect.width, rect.height);
    path.lineTo(rect.width, 0.0);
    path.close();

    return path;
  }
}

import 'dart:async';
import 'dart:io';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:path_provider/path_provider.dart';

import '../blocs/feedback/feedback_blocs.dart';
import '../dto/user_dto.dart';
import '../models/page_repo.dart';

class CustomFeedback extends StatefulWidget {
  final Widget child;
  final UserDTO user;
  const CustomFeedback({Key key, this.child, this.user}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _CustomFeedback();
}

class _CustomFeedback extends State<CustomFeedback> {
  final disableFeedback = false;
  final _formKey = new GlobalKey<FormState>();
  GlobalKey previewContainer = new GlobalKey();
  FeedbackBloc feedbackBloc;
  String content;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final PageRepository pageRepository = RepositoryProvider.of<PageRepository>(context);
    feedbackBloc = FeedbackBloc(pageRepository: pageRepository);
  }

  @override
  Widget build(BuildContext context) {
    return RepaintBoundary(
      key: previewContainer,
      child: BlocProvider<FeedbackBloc>(
        create: (context) => feedbackBloc,
        child: BlocListener<FeedbackBloc, FeedbackState>(
          listener: (context, state) {
            if (state is FeedbackSuccessState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(content: Text("Cảm ơn bạn đã góp ý cho chúng tôi.")));
            }
          },
          child: Container(
            color: Colors.white,
            child: Stack(
              alignment: Alignment.bottomRight,
              children: <Widget>[
                widget.child,
                disableFeedback || widget.user == null
                    ? SizedBox(
                        height: 0,
                      )
                    : Container(
                        padding: EdgeInsets.all(8),
                        margin: EdgeInsets.only(bottom: 20),
                        child: FloatingActionButton(
                            heroTag: "feedbackBtn",
                            onPressed: () async {
                              showDialog(
                                  context: context,
                                  builder: (context) => SimpleDialog(
                                        titlePadding: EdgeInsets.all(10),
                                        title: Text(
                                          "anyLEARN luôn hoàn thiện từng ngày để phục vụ bạn tốt hơn, hãy nhắn cho chúng tôi 1 thông tin phản hồi về trải nghiệm của bạn!",
                                          style: TextStyle(fontSize: 12),
                                        ),
                                        contentPadding: EdgeInsets.all(10),
                                        children: <Widget>[
                                          Form(
                                            key: _formKey,
                                            child: TextFormField(
                                              validator: (String value) {
                                                if (value.length < 3) {
                                                  return "Bạn chưa nhập phản hồi nè.";
                                                }
                                                _formKey.currentState.save();
                                                return null;
                                              },
                                              maxLines: 8,
                                              onChanged: (value) {
                                                setState(() {
                                                  content = value;
                                                });
                                              },
                                              initialValue: "",
                                              decoration: InputDecoration(
                                                  alignLabelWithHint: true,
                                                  labelText: "Để lại ý kiến đóng góp của bạn vào đây..",
                                                  labelStyle: TextStyle(fontSize: 14)),
                                            ),
                                          ),
                                          Padding(
                                            padding: const EdgeInsets.only(top: 8, bottom: 8),
                                            child: Row(children: [
                                              Icon(
                                                Icons.info,
                                                color: Colors.blue,
                                              ),
                                              // Image.file(await takeScreenShot()),
                                              Expanded(
                                                  child: Text(
                                                "Để hiểu rõ hơn ý kiến của bạn, chúng tôi xin phép được chụp màn hình ứng dụng của bạn.",
                                                style: TextStyle(fontSize: 12, color: Colors.black87),
                                              )),
                                            ]),
                                          ),
                                          RaisedButton(
                                            // padding: EdgeInsets.all(10),
                                            shape: RoundedRectangleBorder(
                                                borderRadius: BorderRadius.circular(10.0),
                                                side: BorderSide(color: Colors.blueAccent)),
                                            onPressed: () async {
                                              if (_formKey.currentState.validate()) {
                                                _formKey.currentState.save();
                                                Navigator.of(context).pop();
                                                Future.delayed(const Duration(seconds: 5));
                                                final file = await takeScreenShot();
                                                feedbackBloc
                                                  ..add(SaveFeedbackEvent(
                                                    file: file,
                                                    token: widget.user.token,
                                                    content: content,
                                                  ));
                                              }
                                            },
                                            color: Colors.blue,
                                            child: Text(
                                              "Gửi phản hồi",
                                              style: TextStyle(color: Colors.white),
                                            ),
                                          )
                                        ],
                                      ));
                            },
                            child: Icon(Icons.add_comment))),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<File> takeScreenShot() async {
    try {
      RenderRepaintBoundary boundary = previewContainer.currentContext.findRenderObject();
      ui.Image image = await boundary.toImage(pixelRatio: 2.0);
      final directory = (await getApplicationDocumentsDirectory()).path;
      ByteData byteData = await image.toByteData(format: ui.ImageByteFormat.png);
      Uint8List pngBytes = byteData.buffer.asUint8List();
      File file = new File("$directory/screenshot.png");
      await file.writeAsBytes(pngBytes);
      return file;
    } catch (e) {}
    return null;
  }
}


import 'package:flutter/material.dart';

class CustomCurvedPaint extends CustomPainter {
  Color colorOne = Colors.blue;
  Color colorThree = Colors.blue[100];

  @override
  void paint(Canvas canvas, Size size) {
    Path path = Path();
    Paint paint = Paint();

    path.lineTo(0, size.height * 0.95);
    path.quadraticBezierTo(size.width * 0.15, size.height * 0.95, size.width * 0.5, size.height * 0.60);
    path.quadraticBezierTo(size.width * 0.60, size.height * 0.50, size.width * 0.65, size.height * 0.47);
    path.quadraticBezierTo(size.width * 0.75, size.height * 0.40, size.width * 0.85, size.height * 0.45);
    path.quadraticBezierTo(size.width * 0.95, size.height * 0.55, size.width, size.height * 0.7);
    path.lineTo(size.width, 0);
    path.close();

    paint.color = colorThree;
    canvas.drawPath(path, paint);

    path = Path();
    path.lineTo(0, size.height * 0.65);
    path.quadraticBezierTo(size.width * 0.15, size.height * 0.80, size.width * 0.5, size.height * 0.50);
    path.quadraticBezierTo(size.width * 0.60, size.height * 0.40, size.width * 0.65, size.height * 0.37);
    path.quadraticBezierTo(size.width * 0.75, size.height * 0.30, size.width * 0.85, size.height * 0.35);
    path.quadraticBezierTo(size.width * 0.95, size.height * 0.45, size.width, size.height * 0.6);
    path.lineTo(size.width, 0);
    path.close();

    paint.color = colorOne;
    canvas.drawPath(path, paint);
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return oldDelegate != this;
  }
}


class RestException implements Exception {
  final message;
  final prefix;

  RestException([this.message, this.prefix]);

  String toString() => '$prefix | $message';

}

class FetchDataException extends RestException {
  FetchDataException([String message]) : super(message, "Có lỗi xảy ra");
}

class BadRequestException extends RestException {
  static const CODE = 400;
  BadRequestException([message]) : super(message, "Dữ liệu không đúng");
}

class UnauthorizedException extends RestException {
  static const CODE = 401;
  UnauthorizedException([message]) : super(message, "Không xác thực");
}

class ForbiddenException extends RestException {
  static const CODE = 403;
  ForbiddenException([message]) : super(message, "Không có quyền");
}

class NotFoundException extends RestException {
  static const CODE = 403;
  NotFoundException([message]) : super(message, "Không tìm thấy");
}


import 'package:equatable/equatable.dart';

import 'event_dto.dart';

class AccountCalendarDTO extends Equatable {
  final List<EventDTO> done;
  final List<EventDTO> open;
  final List<EventDTO> fav;

  AccountCalendarDTO({this.done, this.open, this.fav});

  @override
  List<Object> get props => [done, open, fav];

  static AccountCalendarDTO fromJson(json) {
    return json == null
        ? null
        : AccountCalendarDTO(
            done: List<EventDTO>.from(json['done']?.map((e) => e == null ? null : EventDTO.fromJson(e))).toList(),
            open: List<EventDTO>.from(json['open']?.map((e) => e == null ? null : EventDTO.fromJson(e))).toList(),
            fav: List<EventDTO>.from(json['fav']?.map((e) => e == null ? null : EventDTO.fromJson(e))).toList(),
          );
  }
}


import 'transaction_dto.dart';

class AccountTransactionDTO {
  static const WALLET_M = "walletm";
  static const WALLET_C = "walletc";
  
  final String wallet;
  final double currentAmount;
  final List<TransactionDTO> transactions;

  AccountTransactionDTO({this.wallet, this.currentAmount, this.transactions});

}

import 'package:anylearn/dto/ask_dto.dart';

class ArticleDTO {
  final id;
  final title;
  final userName;
  final categoryName;
  final type;
  final image;
  final video;
  final shortContent;
  final content;
  final view;
  final createdAt;
  final related;

  ArticleDTO(
      {this.id,
      this.title,
      this.userName,
      this.categoryName,
      this.type,
      this.image,
      this.video,
      this.shortContent,
      this.content,
      this.view,
      this.createdAt,
      this.related});

  static ArticleDTO fromJson(dynamic json) {
    return json == null
        ? null
        : ArticleDTO(
            id: json['id'],
            title: json['title'],
            userName: json['user_name'],
            categoryName: json['category_name'],
            type: json['type'],
            image: json['image'],
            video: json['video'],
            shortContent: json['short_content'],
            content: json['content'],
            view: json['view'],
            createdAt: json['created_at'] == null ? null : DateTime.tryParse(json['created_at']),
            related: json['related'] == null
                ? null
                : List<ArticleDTO>.from(json['related']?.map((v) => v == null ? null : ArticleDTO.fromJson(v)))
                    .toList(),
          );
  }
}

class ArticlePagingDTO {
  final currentPage;
  final List<ArticleDTO> data;
  final from;
  final lastPage;
  final perPage;
  final to;
  final total;

  ArticlePagingDTO({this.currentPage, this.data, this.from, this.lastPage, this.perPage, this.to, this.total});

  @override
  List<Object> get props => [currentPage, data, from, lastPage, perPage, to, total];

  @override
  String toString() {
    return 'PagingDTO {currentPage: $currentPage, total: $total, perPage: $perPage}';
  }

  static ArticlePagingDTO fromJson(dynamic json) {
    return json == null
        ? null
        : ArticlePagingDTO(
            currentPage: json['current_page'],
            data: List<ArticleDTO>.from(json['data']?.map((v) => v == null ? null : ArticleDTO.fromJson(v))).toList(),
            from: json['from'],
            to: json['to'],
            perPage: json['per_page'],
            lastPage: json['last_page'],
            total: json['total'],
          );
  }
}

class ArticleHomeDTO {
  final List<ArticleDTO> reads;
  final List<ArticleDTO> videos;
  final List<AskDTO> asks;

  ArticleHomeDTO({this.reads, this.videos, this.asks});

  static ArticleHomeDTO fromJson(dynamic json) {
    return json == null
        ? null
        : ArticleHomeDTO(
            reads: json['reads'] == null
                ? null
                : List<ArticleDTO>.from(
                    json['reads']?.map(
                      (e) => e == null ? null : ArticleDTO.fromJson(e),
                    ),
                  ),
            videos: json['videos'] == null
                ? null
                : List<ArticleDTO>.from(
                    json['videos']?.map(
                      (e) => e == null ? null : ArticleDTO.fromJson(e),
                    ),
                  ),
            asks: json['asks'] == null
                ? null
                : List<AskDTO>.from(
                    json['asks']?.map(
                      (e) => e == null ? null : AskDTO.fromJson(e),
                    ),
                  ),
          );
  }
}


class AskDTO {
  final id;
  final String title;
  final String type;
  final String content;
  final int userId;
  final String username;
  final String userImage;
  final DateTime createdAt;
  final bool selectedAnswer;
  final like;
  final unlike;
  final List<AskDTO> comments;
  final String userRole;
  final String myVote;

  AskDTO({
    this.id,
    this.title,
    this.type,
    this.content,
    this.userId,
    this.username,
    this.createdAt,
    this.selectedAnswer,
    this.like,
    this.unlike,
    this.comments,
    this.userImage,
    this.userRole,
    this.myVote,
  });

  static AskDTO fromJson(dynamic json) {
    return json == null
        ? null
        : AskDTO(
            id: json['id'],
            title: json['title'] ?? "",
            type: json['type'],
            content: json['content'],
            userId: json['user_id'],
            username: json['name'],
            userImage: json['user_image'],
            createdAt: DateTime.parse(json['created_at']),
            selectedAnswer: json['is_selected_answer'] == 0 ? false : true,
            like: json['like'],
            unlike: json['unlike'],
            userRole: json['user_role'],
            myVote: json['my_vote'],
            comments: json['comments'] == null
                ? []
                : List<AskDTO>.from(json['comments']?.map((v) => v == null
                    ? null
                    : AskDTO(
                        id: v['id'],
                        title: v['title'] ?? "",
                        type: v['type'],
                        content: v['content'],
                        userId: v['user_id'],
                        username: v['name'],
                        userImage: v['user_image'],
                        userRole: v['user_role'],
                        createdAt: DateTime.parse(v['created_at']),
                        selectedAnswer: v['is_selected_answer'] == 0 ? false : true,
                        like: v['like'],
                        unlike: v['unlike'],
                        myVote: v['my_vote'],
                      ))).toList(),
          );
  }
}


import 'package:equatable/equatable.dart';

import 'ask_dto.dart';

class AskPagingDTO extends Equatable {
  final currentPage;
  final List<AskDTO> data;
  final from;
  final lastPage;
  final perPage;
  final to;
  final total;

  AskPagingDTO({this.currentPage, this.data, this.from, this.lastPage, this.perPage, this.to, this.total});

  @override
  List<Object> get props => [currentPage, data, from, lastPage, perPage, to, total];

  @override
  String toString() {
    return 'PagingDTO {currentPage: $currentPage, total: $total, perPage: $perPage}';
  }

  static AskPagingDTO fromJson(dynamic json) {
    return json == null
        ? null
        : AskPagingDTO(
            currentPage: json['current_page'],
            data: List<AskDTO>.from(json['data']?.map((v) => v == null ? null : AskDTO.fromJson(v))).toList(),
            from: json['from'],
            to: json['to'],
            perPage: json['per_page'],
            lastPage: json['last_page'],
            total: json['total'],
          );
  }
}


import 'ask_dto.dart';

class AskThreadDTO {
  final AskDTO question;
  final List<AskDTO> comments;
  final List<AskDTO> answers;

  AskThreadDTO({
    this.question,
    this.comments,
    this.answers,
  });

  static AskThreadDTO fromJson(dynamic json) {
    return json == null
        ? null
        : AskThreadDTO(
            question: AskDTO.fromJson(json['question']),
            comments: List<AskDTO>.from(json['comments']?.map((v) => v == null ? null : AskDTO.fromJson(v))).toList(),
            answers: List<AskDTO>.from(json['answers']?.map((v) => v == null ? null : AskDTO.fromJson(v))).toList(),
          );
  }
}


import 'package:equatable/equatable.dart';

class BankDTO extends Equatable {
  final String bankName;
  final String bankNo;
  final String bankBranch;
  final String accountName;
  final String content;

  BankDTO({this.bankName, this.bankNo, this.bankBranch, this.accountName, this.content});

  @override
  List<Object> get props => [bankName, bankNo, bankBranch, accountName, content];

  static BankDTO fromJson(dynamic json) {
    return json == null
        ? null
        : BankDTO(
            bankName: json['bank_name'],
            bankNo: json['bank_no'],
            bankBranch: json['bank_branch'],
            accountName: json['account_name'],
            content: json['content'],
          );
  }

  Map<String, dynamic> toJson() {
    return {
      'bank_name': bankName,
      'bank_no': bankNo,
      'bank_branch': bankBranch,
      'account_name': accountName,
      'content': content
    };
  }
}


class CategoryDTO {
  final int id;
  final String title;

  CategoryDTO({
    this.id,
    this.title,
  });

  static CategoryDTO fromJson(dynamic json) {
    return json == null
        ? null
        : CategoryDTO(
            id: json['id'],
            title: json['title'],
          );
  }
}


import 'package:equatable/equatable.dart';

class ClassRegisteredUserDTO extends Equatable {
  final int id;
  String name;
  String phone;
  String image;
  String child;

  ClassRegisteredUserDTO({
    this.id,
    this.name,
    this.phone,
    this.image,
    this.child,
  });

  @override
  List<Object> get props => [
        id,
        name,
        phone,
        image,
        child,
      ];

  @override
  String toString() => 'UserDTO {id: $id, name: $name, phone: $phone}';

  static ClassRegisteredUserDTO fromJson(dynamic json) {
    return json != null
        ? ClassRegisteredUserDTO(
            id: json['id'],
            name: json['name'],
            phone: json['phone'],
            image: json['image'],
            child: json['child'],
          )
        : null;
  }
}


class MyConst {
  static const AUTH_TOKEN = "_token_";
  static const ROLE_MEMBER = "member";
  static const ROLE_TEACHER = "teacher";
  static const ROLE_SCHOOL = "school";
  static const ROLE_MOD = "mod";
  static const ROLE_ADMIN = "admin";
  static const ROLE_GUEST = "guest";

  static const TRANS_TYPE_DEPOSIT = "deposit";
  static const TRANS_TYPE_WITHDRAW = "withdraw";
  static const TRANS_TYPE_EXCHANGE = "exchange";
  static const TRANS_TYPE_ORDER = "order";
  static const TRANS_TYPE_COMMISSION = "commission";

  static const ITEM_COURSE = "course";
  static const ITEM_CLASS = "class";
  static const ITEM_PRODUCT = "product";

  static const ITEM_SUBTYPE_ONLINE = 'online';
  static const ITEM_SUBTYPE_OFFLINE = 'offline';

  static const ITEM_USER_STATUS_INACTIVE = 0;
  static const ITEM_USER_STATUS_ACTIVE = 1;
  static const ITEM_USER_STATUS_DONE = 99;
  static const ITEM_USER_STATUS_CANCEL = 90;

  static const TRANS_STATUS_PENDING = 0;
  static const TRANS_STATUS_APPROVE = 1;
  static const TRANS_STATUS_CANCEL = 99;

  static const WALLET_M = 'wallet_m';
  static const WALLET_C = 'wallet_c';

  static const GUIDE_TOC = 'guide_toc';
  static const GUIDE_MEMBER = 'guide_member';
  static const GUIDE_TEACHER = 'guide_teacher';
  static const GUIDE_SCHOOL = 'guide_school';
  static const GUIDE_ABOUT = 'guide_about';
  static const GUIDE_TOC_SCHOOL = 'guide_toc_school';
  static const GUIDE_TOC_TEACHER = 'guide_toc_teacher';

  static const PAYMENT_ATM = 'atm';
  static const PAYMENT_VOUCHER = 'voucher';

  static const CONTRACT_NEW = 1;
  static const CONTRACT_SIGNED = 10;
  static const CONTRACT_APPROVED = 99;
  static const CONTRACT_DELETED = 0;

  static const ASK_TYPE_READ = 'read';
  static const ASK_TYPE_VIDEO = 'video';
  static const ASK_TYPE_FORUM = 'forum';

  static const ASK_COMMENT = 'comment';
  static const ASK_ANSWER = 'answer';
  static const ASK_QUESTION = 'question';

  static const ASK_VOTE_LIKE = 'like';
  static const ASK_VOTE_DISLIKE = 'dislike';
}


import 'package:equatable/equatable.dart';

class ContractDTO extends Equatable {
  final id;
  int userId;
  final status;
  String type;
  String certId;
  String certPlace;
  String certDate;
  String tax;
  String ref;
  String refTitle;
  String address;
  String commission;
  String bankName;
  String bankBranch;
  String bankNo;
  String bankAccount;
  String signed;
  String template;
  String dob;
  String dobPlace;
  String email;

  ContractDTO({
    this.id,
    this.userId,
    this.status,
    this.type,
    this.certId,
    this.certPlace,
    this.certDate,
    this.tax,
    this.refTitle,
    this.address,
    this.commission,
    this.bankName,
    this.bankBranch,
    this.bankNo,
    this.bankAccount,
    this.signed,
    this.template,
    this.ref,
    this.dob,
    this.dobPlace,
    this.email,
  });

  @override
  List<Object> get props => [];

  static ContractDTO fromJson(dynamic json) {
    return json == null
        ? null
        : ContractDTO(
            id: json['id'],
            userId: json['user_id'],
            status: json['status'],
            type: json['type'],
            certId: json['cert_id'],
            certDate: json['cert_date'],
            certPlace: json['cert_place'],
            tax: json['tax'],
            refTitle: json['ref_title'],
            address: json['address'],
            commission: json['commission'].toString(),
            bankName: json['bank_name'],
            bankBranch: json['bank_branch'],
            bankNo: json['bank_no'],
            bankAccount: json['bank_account'],
            signed: json['signed'],
            template: json['template'],
            ref: json['ref'],
            dob: json['dob'],
            dobPlace: json['dob_place'],
            email: json['email'],
          );
  }

  Map<String, dynamic> toJson() {
    return {
      // 'id': id,
      // 'user_id': userId,
      // 'status': status,
      // 'type': type,
      'cert_id': certId,
      'cert_date': certDate,
      'cert_place': certPlace,
      'tax': tax,
      'ref_title': refTitle,
      'address': address,
      'commission': commission,
      'bank_name': bankName,
      'bank_no': bankNo,
      'bank_branch': bankBranch,
      'bank_account': bankAccount,
      'dob': dob,
      'dob_place': dobPlace,
      'email': email,
      'ref': ref,
      // 'signed': signed,
    };
  }

  @override
  String toString() =>
      "ContractDTO {id: $id, certId: $certId, certDate: $certDate, certPlace: $certPlace, tax: $tax, commission: $commission, bankName: $bankName}";
}


class CourseRegisteredPramsDTO {
  final String token;
  final int itemId;

  CourseRegisteredPramsDTO({this.token, this.itemId});
}


import 'package:equatable/equatable.dart';

class DocDTO extends Equatable {
  final String content;
  final DateTime lastUpdate;

  DocDTO({this.content, this.lastUpdate});

  @override
  List<Object> get props => [content, lastUpdate];

  static DocDTO fromJson(json) {
    return json == null
        ? null
        : DocDTO(
            content: json['content'],
            lastUpdate: DateTime.parse(json['updated_at']),
          );
  }
}


import 'package:equatable/equatable.dart';

class EventDTO extends Equatable {
  final int id;
  final int itemId;
  final String itemSubtype;
  final String title;
  final String content;
  final String scheduleContent;
  final String author;
  final String date;
  final String time;
  final String timeEnd;
  final String location;
  final String image;
  final String route;
  final int userJoined;
  final int authorStatus;
  final int userRating;
  final bool nolimitTime;
  final int childId;
  final String childName;

  EventDTO({
    this.id,
    this.itemId,
    this.content,
    this.author,
    this.date,
    this.title,
    this.time,
    this.timeEnd,
    this.location,
    this.scheduleContent,
    this.image,
    this.route,
    this.userJoined,
    this.authorStatus,
    this.userRating,
    this.nolimitTime,
    this.childId,
    this.childName,
    this.itemSubtype,
  });

  factory EventDTO.fromJson(Map<String, dynamic> json) {
    return EventDTO(
      id: json['id'],
      itemId: json['item_id'],
      title: json['title'],
      itemSubtype: json['item_subtype'],
      time: json['time'],
      timeEnd: json['time_end'],
      image: json['image'],
      date: json['date'],
      author: json['author'],
      content: json['content'],
      userJoined: json['user_joined'],
      location: json['location'],
      authorStatus: json['author_status'],
      scheduleContent: json['schedule_content'],
      childId: json['child_id'],
      childName: json['child_name'],
      userRating: json['user_rating'] == null ? 0 : int.parse(json['user_rating']),
      nolimitTime: json['nolimit_time'] == null ? false : (json['nolimit_time'] == "1" ? true : false),
    );
  }

  @override
  List<Object> get props => [
        id,
        title,
        date,
        time,
        image,
        author,
        content,
        userJoined,
        location,
        authorStatus,
        itemId,
        childId,
        childName,
        scheduleContent,
      ];
}

class OnlineScheduleInfoDTO extends Equatable {
  final String url;
  final String info;

  OnlineScheduleInfoDTO({this.url, this.info});
  @override
  List<Object> get props => throw UnimplementedError();

  factory OnlineScheduleInfoDTO.fromJson(Map<String, dynamic> json) {
    return OnlineScheduleInfoDTO(
      url: json['url'],
      info: json['info'],
    );
  }
}


import 'event_dto.dart';

class EventsDTO {
  final Map<String, List<EventDTO>> events;

  EventsDTO({this.events});

  factory EventsDTO.fromJson(Map<String, dynamic> json) {
    return EventsDTO(
      events: (json)?.map(
        (k, e) => new MapEntry(
          k,
          e == null
              ? null
              : (e as List)?.map((f) => f == null ? null : new EventDTO.fromJson(f as Map<String, dynamic>))?.toList(),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';

class FeatureDataDTO {
  final IconData icon;
  final String title;
  final String route;
  final dynamic routeParam;
  final String iconImage;
  final String iconBg;
  final Color iconColor;
  final Color bg;

  FeatureDataDTO({this.icon, this.title, this.route, this.iconImage, this.iconBg, this.iconColor, this.routeParam, this.bg});
}


import 'article_dto.dart';
import 'transaction_dto.dart';

class FoundationDTO {
  final value;
  final bool enableIosTrans;
  final List<TransactionDTO> history;
  final List<ArticleDTO> news;

  FoundationDTO({this.value, this.history, this.news, this.enableIosTrans});

  static FoundationDTO fromJson(dynamic json) {
    return json == null
        ? null
        : FoundationDTO(
            value: json['value'],
            enableIosTrans: json['ios_transaction'] == null ? false : (json['ios_transaction'] == 1),
            history: json['history'] == null
                ? null
                : List<TransactionDTO>.from(
                    json['history']?.map(
                      (e) => e == null ? null : TransactionDTO.fromJson(e),
                    ),
                  ),
            news: json['news'] == null
                ? null
                : List<ArticleDTO>.from(
                    json['news']?.map(
                      (e) => e == null ? null : ArticleDTO.fromJson(e),
                    ),
                  ),
          );
  }
}


class FriendParamsDTO {
  final int userId;
  final int level;

  FriendParamsDTO({this.userId, this.level});

}

import 'package:anylearn/dto/user_dto.dart';
import 'package:equatable/equatable.dart';

class FriendsDTO extends Equatable {
  final UserDTO user;
  final List<UserDTO> friends;

  FriendsDTO({this.user, this.friends});
  @override
  List<Object> get props => [user, friends];

  @override
  String toString() => 'FriendsDTO {user: ${user.name}, friends: ${friends.length}';

  static FriendsDTO fromJson(dynamic json) {
    return json == null
        ? null
        : FriendsDTO(
            user: UserDTO.fromJson(json['user']),
            friends: List<UserDTO>.from(json['friends']?.map((v) => v == null ? null : UserDTO.fromJson(v))).toList(),
          );
  }
}


class GuideDTO {
  final String title;
  final String content;
  final String lastUpdate;

  GuideDTO({this.title, this.content, this.lastUpdate});
}

class HomeConfigDTO {
  final String quoteUrl;
  final double bannerRatio;
  final String catType;
  final PopupDTO popup;
  int ignorePopupVersion;

  HomeConfigDTO({this.quoteUrl, this.bannerRatio, this.catType, this.popup});

  static HomeConfigDTO fromJson(dynamic json) {
    return json == null
        ? HomeConfigDTO()
        : HomeConfigDTO(
            quoteUrl: json['quote_url'],
            bannerRatio: double.tryParse(json['banner_ratio']),
            catType: json['cat_type'],
            popup: PopupDTO.fromJson(json['popup']),
          );
  }
}

class PopupDTO {
  final image;
  final route;
  final args;
  final int version;

  PopupDTO({this.image, this.route, this.args, this.version});

  static PopupDTO fromJson(dynamic json) {
    return json == null
        ? null
        : PopupDTO(
            image: json['image'],
            route: json['route'],
            args: json['args'],
            version: json['version'],
          );
  }
}


import 'package:equatable/equatable.dart';

import 'article_dto.dart';
import 'feature_data_dto.dart';
import 'home_config_dto.dart';
import 'item_dto.dart';
import 'items_paging_dto.dart';

class HomeDTO extends Equatable {
  List<FeatureDataDTO> featuresIcons;
  final HomeConfigDTO config;
  final List<ArticleDTO> articles;
  final List<ArticleDTO> promotions;
  final List<ArticleDTO> events;
  final List<HomeClassesDTO> homeClasses;
  final List<HomeBannerDTO> homeBanner;
  final List<CategoryDTO> categories;

  HomeDTO({
    this.featuresIcons,
    this.config,
    this.articles,
    this.homeClasses,
    this.homeBanner,
    this.promotions,
    this.events,
    this.categories,
  });

  @override
  List<Object> get props => [featuresIcons, config, articles, homeClasses, homeBanner, promotions, events, categories];

  static HomeDTO fromJson(dynamic json) {
    return json == null
        ? null
        : HomeDTO(
            homeBanner: json['new_banners'] == null
                ? null
                : List<HomeBannerDTO>.from(
                    json['new_banners']?.map((v) => v == null ? null : HomeBannerDTO.fromJson(v))).toList(),
            config: json['articles'] == null ? null : HomeConfigDTO.fromJson(json['configs']),
            articles: json['articles'] == null
                ? null
                : List<ArticleDTO>.from(json['articles']?.map((e) => e == null ? null : ArticleDTO.fromJson(e)))
                    .toList(),
            promotions: json['promotions'] == null
                ? null
                : List<ArticleDTO>.from(json['promotions']?.map((e) => e == null ? null : ArticleDTO.fromJson(e)))
                    .toList(),
            events: json['events'] == null
                ? null
                : List<ArticleDTO>.from(json['events']?.map((e) => e == null ? null : ArticleDTO.fromJson(e))).toList(),
            homeClasses: json['home_classes'] == null
                ? null
                : List<HomeClassesDTO>.from(
                    json['home_classes']?.map((v) => v == null ? null : HomeClassesDTO.fromJson(v))).toList(),
            categories:
                List<CategoryDTO>.from(json['categories']?.map((v) => v == null ? null : CategoryDTO.fromJson(v)))
                    .toList());
  }
}

class HomeClassesDTO extends Equatable {
  final String title;
  final List<ItemDTO> classes;

  HomeClassesDTO({this.title, this.classes});

  @override
  List<Object> get props => [title, classes];

  static HomeClassesDTO fromJson(dynamic json) {
    return json == null
        ? null
        : HomeClassesDTO(
            title: json['title'],
            classes: List<ItemDTO>.from(json['classes']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
          );
  }
}

class HomeBannerDTO extends Equatable {
  final String file;
  final String route;
  final String arg;

  HomeBannerDTO({this.file, this.route, this.arg});

  @override
  List<Object> get props => [file, route, arg];

  static HomeBannerDTO fromJson(dynamic json) {
    return json == null
        ? null
        : HomeBannerDTO(
            file: json['file'],
            route: json['route'],
            arg: json['arg'],
          );
  }
}

class CategoryDTO extends Equatable {
  final String title;
  final id;
  final List<ItemDTO> items;

  CategoryDTO({this.title, this.id, this.items});

  @override
  List<Object> get props => [
        id,
        title,
        items,
      ];

  static CategoryDTO fromJson(dynamic json) {
    return json == null
        ? null
        : CategoryDTO(
            id: json['id'],
            title: json['title'],
            items: List<ItemDTO>.from(json['items']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
          );
  }
}

class CategoryPagingDTO extends Equatable {
  final String title;
  final id;
  final ItemsPagingDTO items;

  CategoryPagingDTO({this.title, this.id, this.items});

  @override
  List<Object> get props => [
        id,
        title,
        items,
      ];

  static CategoryPagingDTO fromJson(dynamic json) {
    return json == null
        ? null
        : CategoryPagingDTO(
            id: json['id'],
            title: json['title'],
            items: ItemsPagingDTO.fromJson(json['items']),
          );
  }
}


import 'package:equatable/equatable.dart';

import 'item_dto.dart';


class HotItemsDTO extends Equatable {
  final String title;
  final String route;
  final List<ItemDTO> list;

  HotItemsDTO({this.title, this.route, this.list});

  @override
  List<Object> get props => [title, route, list];

  static HotItemsDTO fromJson(dynamic json) {
    return json == null
        ? null
        : HotItemsDTO(
            title: json['title'],
            list: List<ItemDTO>.from(json['list']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
            route: json['route'],
          );
  }
}


import 'package:equatable/equatable.dart';

import 'user_dto.dart';

class HotUsersDTO extends Equatable {
  final String title;
  final String route;
  final List<UserDTO> list;

  HotUsersDTO({this.title, this.route, this.list});

  @override
  List<Object> get props => [title, route, list];

  static HotUsersDTO fromJson(dynamic json) {
    return json == null
        ? null
        : HotUsersDTO(
            title: json['title'],
            list: List<UserDTO>.from(json['list']?.map((v) => v == null ? null : UserDTO.fromJson(v))).toList(),
            route: json['route'],
          );
  }
}


import 'package:equatable/equatable.dart';

class ItemDTO extends Equatable {
  final int id;
  String image;
  String type;
  String subtype;
  String title;
  int price;
  int priceOrg;
  String shortContent;
  String content;
  final String route;
  final String date;
  final double rating;
  String dateStart;
  String dateEnd;
  String timeStart;
  String timeEnd;
  final int numCart;
  final int numShare;
  final int numFavorite;
  String location;
  final int status;
  final int userStatus;
  final String authorName;
  final String authorType;
  final bool nolimitTime;
  final List<ItemDTO> openings;
  final String url;

  ItemDTO({
    this.id,
    this.image,
    this.title,
    this.type,
    this.subtype,
    this.price,
    this.priceOrg,
    this.shortContent,
    this.content,
    this.route,
    this.date,
    this.rating,
    this.dateStart,
    this.dateEnd,
    this.timeStart,
    this.timeEnd,
    this.numCart,
    this.numFavorite,
    this.numShare,
    this.location,
    this.status,
    this.userStatus,
    this.authorName,
    this.authorType,
    this.nolimitTime,
    this.openings,
    this.url,
  });

  @override
  List<Object> get props => [
        id,
        image,
        title,
        type,
        price,
        priceOrg,
        shortContent,
        content,
        date,
        rating,
        dateStart,
        dateEnd,
        timeStart,
        numCart,
        numFavorite,
        numShare,
        location,
        status,
        userStatus,
        authorName,
        authorType,
        nolimitTime,
        openings,
        subtype,
        url,
      ];


  @override
  String toString() => 'ItemDTO {title: $title, type: $type}';

  static ItemDTO fromJson(dynamic json) {
    return json == null
        ? null
        : ItemDTO(
            title: json['title'],
            id: json['id'],
            type: json['type'],
            subtype: json['subtype'],
            image: json['image'],
            price: json['price'],
            priceOrg: json['org_price'],
            shortContent: json['short_content'],
            content: json['content'],
            rating: json['rating'] == null ? null : double.parse(json['rating'].toString()),
            dateStart: json['date_start'],
            dateEnd: json['date_end'],
            timeStart: json['time_start'],
            timeEnd: json['time_end'],
            numCart: json['num_cart'],
            numFavorite: json['num_favorite'],
            numShare: json['num_share'],
            location: json['location'],
            status: json['status'],
            url: json['url'],
            userStatus: json['user_status'],
            authorName: json['author'] ?? null,
            authorType: json['author_type'] ?? null,
            nolimitTime: json['nolimit_time'] == "1" ? true : false,
            openings: json['openings'] == null
                ? null
                : List<ItemDTO>.from(json['openings']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
          );
  }
}


class ItemUserAction {
  final int id;
  final int itemId;
  final int userId;
  final String userName;
  final String userImage;
  final String value;
  final String extraValue;
  final DateTime createdAt;

  ItemUserAction({
    this.id,
    this.itemId,
    this.userId,
    this.userName,
    this.userImage,
    this.value,
    this.extraValue,
    this.createdAt,
  });

  static ItemUserAction fromJson(dynamic json) {
    return json == null
        ? null
        : ItemUserAction(
            id: json['id'],
            itemId: json['item_id'],
            userId: json['user_id'],
            userName: json['user_name'],
            userImage: json['user_image'],
            value: json['value'],
            extraValue: json['extra_value'],
            createdAt: json['created_at'] == null ? null : DateTime.tryParse(json['created_at']),
          );
  }
}


import 'package:equatable/equatable.dart';

import 'items_paging_dto.dart';
import 'user_dto.dart';

class ItemsDTO extends Equatable{
  final UserDTO user;
  final ItemsPagingDTO items;

  ItemsDTO({this.user, this.items});

  @override
  List<Object> get props => [user, items];

  static ItemsDTO fromJson(dynamic json) {
    return json == null ? null : ItemsDTO(
      user: UserDTO.fromJson(json['user']),
      items: ItemsPagingDTO.fromJson(json['items']),
    );
  }
}

import 'package:equatable/equatable.dart';

import 'item_dto.dart';

class ItemsPagingDTO extends Equatable {
  final currentPage;
  final List<ItemDTO> data;
  final from;
  final lastPage;
  final perPage;
  final to;
  final total;

  ItemsPagingDTO({this.currentPage, this.data, this.from, this.lastPage, this.perPage, this.to, this.total});

  @override
  List<Object> get props => [currentPage, data, from, lastPage, perPage, to, total];

  @override
  String toString() {
    return 'PagingDTO {currentPage: $currentPage, total: $total, perPage: $perPage}';
  }

  static ItemsPagingDTO fromJson(dynamic json) {
    return json == null
        ? null
        : ItemsPagingDTO(
            currentPage: json['current_page'],
            data: List<ItemDTO>.from(json['data']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
            // from: json['from'],
            // to: json['to'],
            perPage: json['per_page'],
            // lastPage: json['last_page'],
            total: json['total'],
          );
  }
}


class LoginCallback {
  final String message;
  final String routeName;
  final routeArgs;

  LoginCallback({this.message, this.routeName, this.routeArgs});
}


import 'package:equatable/equatable.dart';
import 'package:firebase_messaging/firebase_messaging.dart';

class NotificationDTO extends Equatable {
  final int id;
  final String title;
  final String content;
  final String read;
  final String route;
  final DateTime createdAt;
  final String extraContent;
  final String type;

  NotificationDTO({
    this.id,
    this.title,
    this.content,
    this.read,
    this.route,
    this.createdAt,
    this.extraContent,
    this.type,
  });

  @override
  List<Object> get props => [
        id,
        title,
        content,
        read,
        route,
        extraContent,
        type,
      ];

  static NotificationDTO fromJson(dynamic json) {
    return json == null
        ? null
        : NotificationDTO(
            id: json['id'],
            title: json['title'],
            content: json['content'],
            route: json['route'],
            read: json['read'],
            extraContent: json['extra_content'],
            createdAt: DateTime.parse(json['created_at']),
            type: json['type']);
  }

  static NotificationDTO fromFireBase(RemoteMessage message) {
    // if (Platform.isIOS) {
    return NotificationDTO(
      title: message.notification.title,
      content: message.notification.body,
      route: message.data.containsKey("screen") ? message.data['screen'] : null,
      extraContent: message.data.containsKey("args") ? message.data['args'] : null,
    );
    // } else {
    //   return NotificationDTO(
    //     title: message.notification.title,
    //     content: message.notification.body,
    //     route: message.data['screen'] != null ? message.data['screen'] : null,
    //     extraContent: message.data['args'] != null ? message.data['args'] : null,
    //   );
    // }
  }

  static NotificationDTO fromNewFirebase(RemoteMessage message) {
    return NotificationDTO(
      title: message.notification.title,
      content: message.notification.body,
      route: message.data['screen'] != null ? message.data['screen'] : null,
      extraContent: message.data['args'] != null ? message.data['args'] : null,
    );
  }
}

class NotificationPagingDTO extends Equatable {
  final currentPage;
  final List<NotificationDTO> data;
  final from;
  final lastPage;
  final perPage;
  final to;
  final total;

  NotificationPagingDTO({this.currentPage, this.data, this.from, this.lastPage, this.perPage, this.to, this.total});

  @override
  List<Object> get props => [currentPage, data, from, lastPage, perPage, to, total];

  static NotificationPagingDTO fromJson(dynamic json) {
    return json == null
        ? null
        : NotificationPagingDTO(
            currentPage: json['current_page'],
            data: List<NotificationDTO>.from(json['data']?.map((v) => v == null ? null : NotificationDTO.fromJson(v)))
                .toList(),
            // from: json['from'],
            // to: json['to'],
            perPage: json['per_page'],
            // lastPage: json['last_page'],
            total: json['total'],
          );
  }
}


import 'package:equatable/equatable.dart';

import 'category_dto.dart';
import 'hot_items_dto.dart';
import 'item_dto.dart';
import 'user_dto.dart';

class PdpDTO extends Equatable {
  final UserDTO author;
  final ItemDTO item;
  final int numSchedule;
  final HotItemsDTO hotItems;
  bool isFavorite;
  final int commission;
  final bool disableAnypoint;
  final bool enableIosTrans;
  final List<CategoryDTO> categories;

  PdpDTO({this.categories, this.author, this.item, this.hotItems, this.isFavorite, this.commission, this.numSchedule, this.enableIosTrans, this.disableAnypoint});

  @override
  List<Object> get props => [author, item, hotItems, isFavorite, commission, numSchedule, enableIosTrans, disableAnypoint, categories];

  static PdpDTO fromJson(dynamic json) {
    return json == null
        ? null
        : PdpDTO(
            item: ItemDTO.fromJson(json['item']),
            author: UserDTO.fromJson(json['author']),
            hotItems: HotItemsDTO.fromJson(json['hotItems']),
            commission: json['commission'],
            numSchedule: json['num_schedule'],
            isFavorite: json['is_fav'],
            enableIosTrans: json['ios_transaction'] == null ? false : (json['ios_transaction'] == 1),
            disableAnypoint: json['disable_anypoint'] == null ? false : (json['disable_anypoint'] == 1),
            categories: List<CategoryDTO>.from(json['categories']?.map((v) => v == null ? null : CategoryDTO.fromJson(v))).toList(),
          );
  }
}


import 'package:equatable/equatable.dart';

class QuoteDTO extends Equatable {
  final String id;
  final String text;
  final String author;

  QuoteDTO({this.id, this.text, this.author});

  @override
  List<Object> get props => [id, text, author];

  static QuoteDTO fromJson(dynamic json) {
    return QuoteDTO(
      id: json['_id'],
      text: json['quoteText'],
      author: json['quoteAuthor'],
    );
  }

  @override
  String toString() => 'Quote {id: $id, text: $text, author: $author}';
}


import 'package:equatable/equatable.dart';

import 'bank_dto.dart';
import 'transaction_dto.dart';

class TransactionConfigDTO extends Equatable {
  final List<int> suggests;
  final int suggestInputColumn;
  final List<String> payments;
  final int vipFee;
  final int vipDays;
  final List<TransactionDTO> lastTransactions;
  final BankDTO depositBank;
  final int rate;
  final int pendingM;
  final int pendingC;

  TransactionConfigDTO({
    this.suggests,
    this.payments,
    this.vipFee,
    this.vipDays,
    this.lastTransactions,
    this.depositBank,
    this.suggestInputColumn,
    this.rate,
    this.pendingC,
    this.pendingM,
  });

  @override
  List<Object> get props => [
        suggests,
        payments,
        vipFee,
        vipDays,
        lastTransactions,
        depositBank,
        suggestInputColumn,
        rate,
        pendingM,
        pendingC,
      ];

  static TransactionConfigDTO fromJson(dynamic json) {
    return json == null
        ? null
        : TransactionConfigDTO(
            suggests: List<int>.from(json['suggest']?.map((e) => e == null ? null : e)).toList(),
            vipFee: json['vip_fee'],
            vipDays: json['vip_days'],
            lastTransactions: List<TransactionDTO>.from(
                json['transactions']?.map((e) => e == null ? null : TransactionDTO.fromJson(e))).toList(),
            depositBank: BankDTO.fromJson(json['bank']),
            suggestInputColumn: json['suggest_columns'],
            rate: json['rate'],
            pendingM: json['pending_wallet_m'],
            pendingC: json['pending_wallet_c'],
          );
  }
}


import 'dart:convert';
import 'package:equatable/equatable.dart';

import 'bank_dto.dart';

class TransactionDTO extends Equatable {
  final int id;
  final int userId;
  final String type;
  final int amount;
  final String content;
  final String createdDate;
  final int status;
  final int orderId;
  final String payMethod;
  final BankDTO bankInfo;
  final int refUser;
  final int refAmount;

  TransactionDTO({
    this.id,
    this.type,
    this.payMethod,
    this.userId,
    this.amount,
    this.content,
    this.createdDate,
    this.status,
    this.orderId,
    this.bankInfo,
    this.refUser,
    this.refAmount,
  });

  @override
  List<Object> get props => [
        id,
        payMethod,
        type,
        userId,
        amount,
        content,
        createdDate,
        status,
        orderId,
        bankInfo,
        refUser,
        refAmount,
      ];

  static TransactionDTO fromJson(dynamic json) {
    return json == null
        ? null
        : TransactionDTO(
            amount: json['amount'],
            userId: json['user_id'],
            id: json['id'],
            content: json['content'],
            createdDate: json['created_at'],
            payMethod: json['pay_method'],
            bankInfo:
                json['pay_info'] == null || json['pay_info'].length == 0 ? null : BankDTO.fromJson(jsonDecode(json['pay_info'])),
            status: json['status'],
            orderId: json['order_id'],
            type: json['type'],
            refAmount: json['ref_amount'],
            refUser: json['ref_user_id'],
          );
  }
}


import 'package:anylearn/dto/item_dto.dart';
import 'package:equatable/equatable.dart';

class UserCoursesDTO extends Equatable {
  final List<ItemDTO> open;
  final List<ItemDTO> close;

  UserCoursesDTO({this.open, this.close});

  @override
  List<Object> get props => [open, close];

  static UserCoursesDTO fromJson(dynamic json) {
    return json == null
        ? null
        : UserCoursesDTO(
            open: List<ItemDTO>.from(json['open']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
            close: List<ItemDTO>.from(json['close']?.map((v) => v == null ? null : ItemDTO.fromJson(v))).toList(),
          );
  }
}


import 'package:equatable/equatable.dart';

class UserDocDTO extends Equatable {
  final int id;
  final int userId;
  final String type;
  final String ext;
  final String data;

  UserDocDTO({this.id, this.userId, this.type, this.ext, this.data});

  @override
  List<Object> get props => [id, userId, type, ext, data];

  static UserDocDTO fromJson(dynamic json) {
    return json == null ? null : UserDocDTO(
      id: json['id'],
      userId: json['user_id'],
      type: json['type'],
      ext: json['file_ext'],
      data: json['data'],
    );
  }
  
}

import 'package:anylearn/dto/item_dto.dart';
import 'package:equatable/equatable.dart';

import 'user_doc_dto.dart';

class UserDTO extends Equatable {
  final int id;
  String name;
  String title;
  String phone;
  String role;
  String image;
  String banner;
  String address;
  final int walletM;
  final int walletC;
  final int userId;
  final double commissionRate;
  String country;
  String dob;
  String email;
  final int expire;
  String introduce;
  final int isHot;
  final int numFriends;
  String refcode;
  final int status;
  final int updateDoc;
  final String route;
  final double rating;
  String password;
  String token;
  String refLink;
  String fullContent;
  final List<UserDocDTO> docs;
  String dobPlace;
  int isSigned;
  final bool enableIosTrans;
  final bool disableAnypoint;
  final List<ItemDTO> registered;
  final List<ItemDTO> faved;
  final List<ItemDTO> rated;
  final List<UserDTO> children;
  final int cartcount;

  UserDTO({
    this.id,
    this.name,
    this.phone,
    this.title,
    this.role,
    this.image,
    this.banner,
    this.address,
    this.walletM,
    this.walletC,
    this.userId,
    this.commissionRate,
    this.country,
    this.dob,
    this.email,
    this.expire,
    this.introduce,
    this.isHot,
    this.numFriends,
    this.refcode,
    this.status,
    this.updateDoc,
    this.route,
    this.rating,
    this.password,
    this.token,
    this.refLink,
    this.fullContent,
    this.docs,
    this.isSigned,
    this.dobPlace,
    this.enableIosTrans,
    this.disableAnypoint,
    this.registered,
    this.faved,
    this.rated,
    this.children,
    this.cartcount,
  });

  @override
  List<Object> get props => [
        id,
        name,
        phone,
        title,
        role,
        image,
        banner,
        address,
        walletM,
        walletC,
        userId,
        commissionRate,
        country,
        dob,
        email,
        expire,
        introduce,
        isHot,
        numFriends,
        refcode,
        updateDoc,
        route,
        rating,
        token,
        status,
        refLink,
        fullContent,
        docs,
        isSigned,
        dobPlace,
        enableIosTrans,
        disableAnypoint,
        registered,
        faved,
        rated,
        children,
        cartcount,
      ];

  @override
  String toString() => 'UserDTO {id: $id, name: $name, phone: $phone}';

  static UserDTO fromJson(dynamic json) {
    return json != null
        ? UserDTO(
            id: json['id'],
            name: json['name'],
            email: json['email'],
            phone: json['phone'],
            refcode: json['refcode'],
            token: json['api_token'],
            role: json['role'],
            status: json['status'],
            updateDoc: json['update_doc'],
            expire: json['expire'],
            walletC: json['wallet_c'],
            walletM: json['wallet_m'],
            commissionRate: json['commission_rate'],
            userId: json['user_id'],
            isHot: json['is_hot'],
            image: json['image'],
            banner: json['banner'],
            introduce: json['introduce'],
            title: json['title'],
            dob: json['dob'],
            address: json['address'],
            country: json['country'],
            numFriends: json['num_friends'],
            refLink: json['reflink'],
            fullContent: json['full_content'],
            cartcount: json['cartcount'] == null ? 0 : json['cartcount'],
            docs: json['docs'] == null
                ? null
                : List<UserDocDTO>.from(json['docs']?.map((e) => e == null ? null : UserDocDTO.fromJson(e))).toList(),
            isSigned: json['is_signed'],
            dobPlace: json['dob_place'],
            rating: json['rating'] == null ? null : double.parse(json['rating'].toString()),
            enableIosTrans: json['ios_transaction'] == null ? false : (json['ios_transaction'] == 1),
            disableAnypoint: json['disable_anypoint'] == null ? false : (json['disable_anypoint'] == 1),
            registered: json['registered'] == null
                ? null
                : List<ItemDTO>.from(json['registered']?.map((e) => e == null ? null : ItemDTO.fromJson(e))).toList(),
            faved: json['faved'] == null
                ? null
                : List<ItemDTO>.from(json['faved']?.map((e) => e == null ? null : ItemDTO.fromJson(e))).toList(),
            rated: json['rated'] == null
                ? null
                : List<ItemDTO>.from(json['rated']?.map((e) => e == null ? null : ItemDTO.fromJson(e))).toList(),
            children: json['children'] == null
                ? null
                : List<UserDTO>.from(json['children']?.map((e) => e == null ? null : UserDTO.fromJson(e))).toList(),
          )
        : null;
  }
}


import 'package:equatable/equatable.dart';

import 'users_paging_dto.dart';

class UsersDTO extends Equatable {
  final String banner;
  final UsersPagingDTO list;

  UsersDTO({this.banner, this.list});

  @override
  List<Object> get props => [banner, list];

  static UsersDTO fromJson(dynamic json) {
    return json == null
        ? null
        : UsersDTO(
            banner: json['banner'],
            list: UsersPagingDTO.fromJson(json['list']),
          );
  }
}


import 'package:equatable/equatable.dart';

import 'user_dto.dart';

class UsersPagingDTO extends Equatable {
  final currentPage;
  final List<UserDTO> data;
  final from;
  final lastPage;
  final perPage;
  final to;
  final total;

  UsersPagingDTO({this.currentPage, this.data, this.from, this.lastPage, this.perPage, this.to, this.total});

  @override
  List<Object> get props => [currentPage, data, from, lastPage, perPage, to, total];

  @override
  String toString() {
    return 'PagingDTO {currentPage: $currentPage, total: $total, perPage: $perPage}';
  }

  static UsersPagingDTO fromJson(dynamic json) {
    return json == null
        ? null
        : UsersPagingDTO(
            currentPage: json['current_page'],
            data: List<UserDTO>.from(json['data']?.map((v) => v == null ? null : UserDTO.fromJson(v))).toList(),
            // from: json['from'],
            // to: json['to'],
            perPage: json['per_page'],
            // lastPage: json['last_page'],
            total: json['total'],
          );
  }
}


import 'package:anylearn/blocs/account/account_blocs.dart';
import 'package:anylearn/dto/notification_dto.dart';
import 'package:anylearn/dto/user_dto.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:overlay_support/overlay_support.dart';

import 'app_config.dart';
import 'blocs/article/article_bloc.dart';
import 'blocs/auth/auth_bloc.dart';
import 'blocs/auth/auth_blocs.dart';
import 'blocs/course/course_blocs.dart';
import 'blocs/notif/notif_blocs.dart';
import 'blocs/search/search_blocs.dart';
import 'models/item_repo.dart';
import 'models/page_repo.dart';
import 'models/transaction_repo.dart';
import 'models/user_repo.dart';
import 'routes.dart';
import 'screens/home.dart';
import 'themes/default.dart';

bool newNotification = false;
String notifToken;
final env = "prod";
// final env = "staging";
// final env = "dev";
AppConfig config;
UserDTO user;

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print('Handling a background message ${message.messageId}');
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  config = await AppConfig.forEnv(env);
  // BlocSupervisor.delegate = SimpleBlocDelegate();
  final userRepo = UserRepository(config: config);
  final pageRepo = PageRepository(config: config);
  final transRepo = TransactionRepository(config: config);
  final itemRepo = ItemRepository(config: config);
  await Firebase.initializeApp();
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  return runApp(
    MultiRepositoryProvider(
        providers: [
          RepositoryProvider<UserRepository>(
            create: (context) => userRepo,
          ),
          RepositoryProvider<PageRepository>(
            create: (context) => pageRepo,
          ),
          RepositoryProvider<TransactionRepository>(
            create: (context) => transRepo,
          ),
          RepositoryProvider<ItemRepository>(
            create: (context) => itemRepo,
          ),
        ],
        child: MultiBlocProvider(providers: [
          BlocProvider<AuthBloc>(create: (context) => AuthBloc(userRepository: userRepo)),
          BlocProvider<AccountBloc>(create: (context) => AccountBloc(userRepository: userRepo)),
          BlocProvider<CourseBloc>(create: (context) => CourseBloc(itemRepository: itemRepo, userRepository: userRepo)),
          BlocProvider<SearchBloc>(create: (context) => SearchBloc(pageRepository: pageRepo)),
          BlocProvider<NotifBloc>(create: (context) => NotifBloc(userRepository: userRepo)),
          BlocProvider<ArticleBloc>(create: (context) => ArticleBloc(pageRepository: pageRepo)),
        ], child: MyApp())),
  );
}

class MyApp extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _MyApp();
}

class _MyApp extends State<MyApp> {
  final GlobalKey<NavigatorState> navigatorKey = new GlobalKey<NavigatorState>();

  @override
  void initState() {
    super.initState();
    FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage message) {
      if (message != null) {
        print('A new getInitialMessage event was published!');
      }
    });

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('A new onMessage event was published!');
      final notifObj = NotificationDTO.fromFireBase(message);
      showSimpleNotification(
          Card(
            child: Container(
              padding: EdgeInsets.all(15),
              child: Text(
                notifObj.content,
                style: TextStyle(color: Colors.black),
              ),
            ),
          ),
          background: Colors.transparent);
    });

    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('A new onMessageOpenedApp event was published!');
    });
    FirebaseMessaging.instance.getToken().then((token) {
      assert(token != null);
      print(token);
      notifToken = token;
    });
  }

  @override
  Widget build(BuildContext context) {
    return OverlaySupport(
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        navigatorKey: navigatorKey,
        title: 'anyLearn',
        theme: appTheme(),
        routes: routes,
        home: HomeScreen(),
        // home: HomeScreen(),
      ),
    );
  }
}

// class Splash extends StatefulWidget {
//   @override
//   SplashState createState() => new SplashState();
// }

// class SplashState extends State<Splash> with AfterLayoutMixin<Splash> {
//   Future checkFirstSeen() async {
//     int version = 2;
//     SharedPreferences prefs = await SharedPreferences.getInstance();
//     int _seen = (prefs.getInt('intro_seen') ?? version);

//     if (_seen > version) {
//       Navigator.of(context).pushReplacement(new MaterialPageRoute(builder: (context) => new HomeScreen()));
//     } else {
//       await prefs.setInt('intro_seen', version + 1);
//       Navigator.of(context).pushReplacement(new MaterialPageRoute(builder: (context) => new IntroScreen()));
//     }
//   }

//   @override
//   void afterFirstLayout(BuildContext context) => checkFirstSeen();

//   @override
//   Widget build(BuildContext context) {
//     return new Scaffold(
//       body: new Center(
//         child: CircularProgressIndicator(),
//       ),
//     );
//   }
// }

// class SimpleBlocDelegate extends BlocDelegate {
//   @override
//   void onEvent(Bloc bloc, Object event) {
//     print(event);
//     super.onEvent(bloc, event);
//   }

//   @override
//   void onTransition(Bloc bloc, Transition transition) {
//     print(transition);
//     super.onTransition(bloc, transition);
//   }

//   @override
//   void onError(Bloc bloc, Object error, StackTrace stackTrace) {
//     print(error);
//     super.onError(bloc, error, stackTrace);
//   }
// }


import 'package:anylearn/dto/friend_params_dto.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import '../dto/const.dart';
import '../dto/feature_data_dto.dart';

List<FeatureDataDTO> defaultHomeFeatures(String role, int userId) {
  Map<String, List<FeatureDataDTO>> configs = {
    MyConst.ROLE_MEMBER: [
      FeatureDataDTO(icon: MdiIcons.qrcode, title: "Mã Giới thiệu", route: "/qrcode", iconBg: "red", bg: Colors.blue[300]),
      FeatureDataDTO(icon: MdiIcons.accountGroup, title: "Bạn bè", route: "/account/friends", iconBg: "green",bg: Colors.green[600], routeParam: FriendParamsDTO(userId: userId, level: 1)),
      FeatureDataDTO(icon: MdiIcons.calendarClock, title: "Lịch học", route: "/account/calendar", iconBg: "orange", bg: Colors.blue[600]),
      FeatureDataDTO(icon: MdiIcons.searchWeb, title: "Tìm khóa học", route: "/event", iconBg: "purple", bg: Colors.green[300]),
      // FeatureDataDTO(icon: Icons.video_label, title: "Xem Để Học", route: "/ask", iconBg: "blue"),
      // FeatureDataDTO(icon: Icons.chrome_reader_mode, title: "Đọc Để Học", route: "/ask", iconBg: "yellow"),
      // FeatureDataDTO(icon: Icons.question_answer, title: "Hỏi Để Học", route: "/developing", iconBg: "cyan"),
      // FeatureDataDTO(icon: MdiIcons.handHeart, title: "Quỹ học bổng", route: "/foundation", iconBg: "pink"),
    ],
    MyConst.ROLE_TEACHER: [
      FeatureDataDTO(icon: MdiIcons.qrcode, title: "Mã Giới thiệu", route: "/qrcode", iconBg: "red", bg: Colors.blue[300]),
      FeatureDataDTO(icon: MdiIcons.accountGroup, title: "Bạn bè", route: "/account/friends", bg: Colors.green[600], iconBg: "green", routeParam: FriendParamsDTO(userId: userId, level: 1)),
      FeatureDataDTO(icon: MdiIcons.calendarClock, title: "Lịch dạy", route: "/course/list", iconBg: "orange", bg: Colors.blue[600]),
      FeatureDataDTO(icon: MdiIcons.presentation, title: "Tạo khóa học", route: "/course/form", iconBg: "purple", bg: Colors.green[300]),
      // FeatureDataDTO(icon: Icons.video_label, title: "Xem Để Học", route: "/ask", iconBg: "blue"),
      // FeatureDataDTO(icon: Icons.chrome_reader_mode, title: "Đọc Để Học", route: "/ask", iconBg: "yellow"),
      // FeatureDataDTO(icon: Icons.question_answer, title: "Hỏi Để Học", route: "/developing", iconBg: "cyan"),
      // FeatureDataDTO(icon: MdiIcons.handHeart, title: "Quỹ học bổng", route: "/foundation", iconBg: "pink"),
    ],
    MyConst.ROLE_SCHOOL: [
      FeatureDataDTO(icon: MdiIcons.qrcode, title: "Mã Giới thiệu", route: "/qrcode", iconBg: "red", bg: Colors.blue[300]),
      FeatureDataDTO(icon: MdiIcons.accountGroup, title: "Bạn bè", route: "/account/friends", bg: Colors.green[600], iconBg: "green", routeParam: FriendParamsDTO(userId: userId, level: 1)),
      FeatureDataDTO(icon: MdiIcons.calendarClock, title: "Lịch dạy", route: "/course/list", iconBg: "orange", bg: Colors.blue[600]),
      FeatureDataDTO(icon: MdiIcons.toolbox, title: "Tạo khóa học", route: "/course/form", iconBg: "purple", bg: Colors.green[300]),
      // FeatureDataDTO(icon: Icons.video_label, title: "Xem Để Học", route: "/ask", iconBg: "blue"),
      // FeatureDataDTO(icon: Icons.chrome_reader_mode, title: "Đọc Để Học", route: "/ask", iconBg: "yellow"),
      // FeatureDataDTO(icon: Icons.question_answer, title: "Hỏi Để Học", route: "/developing", iconBg: "cyan"),
      // FeatureDataDTO(icon: MdiIcons.handHeart, title: "Quỹ học bổng", route: "/foundation", iconBg: "pink"),
    ],
     MyConst.ROLE_GUEST: [
      FeatureDataDTO(icon: MdiIcons.qrcode, title: "Mã Giới thiệu", route: "/qrcode", iconBg: "red", bg: Colors.blue[300]),
      FeatureDataDTO(icon: MdiIcons.accountGroup, title: "Bạn bè", route: "/account/friends", bg: Colors.green[600], iconBg: "green", routeParam: FriendParamsDTO(userId: userId, level: 1)),
      FeatureDataDTO(icon: MdiIcons.login, title: "Đăng nhập", route: "/login", iconBg: "orange", bg: Colors.blue[600]),
      FeatureDataDTO(icon: MdiIcons.lockOutline, title: "Đăng ký", route: "/register", iconBg: "purple", bg: Colors.green[300]),
      // FeatureDataDTO(icon: Icons.video_label, title: "Xem Để Học", route: "/ask", iconBg: "blue"),
      // FeatureDataDTO(icon: Icons.chrome_reader_mode, title: "Đọc Để Học", route: "/ask", iconBg: "yellow"),
      // FeatureDataDTO(icon: Icons.question_answer, title: "Hỏi Để Học", route: "/developing", iconBg: "cyan"),
      // FeatureDataDTO(icon: MdiIcons.handHeart, title: "Quỹ học bổng", route: "/foundation", iconBg: "pink"),
    ],
  };
  return configs[role] ?? configs[MyConst.ROLE_MEMBER];
}


import 'dart:io';

import 'package:http/http.dart' as http;

import '../app_config.dart';
import '../dto/item_dto.dart';
import '../dto/item_user_action.dart';
import '../dto/user_courses_dto.dart';
import '../services/item_services.dart';

class ItemRepository {
  ItemService itemService;
  final AppConfig config;
  final httpClient = http.Client();

  ItemRepository({this.config}) {
    itemService = new ItemService(httpClient: httpClient, config: config);
  }

  Future<bool> saveItem(ItemDTO item, String token) async {
    return await itemService.saveItem(item, token);
  }

  Future<UserCoursesDTO> coursesOfUser(String token) async {
    return await itemService.coursesOfUser(token);
  }

  Future<ItemDTO> loadItemEdit(int itemId, String token) async {
    return await itemService.loadItemEdit(itemId, token);
  }

  Future<String> uploadImage(File file, String token, int itemId) async {
    return await itemService.uploadImage(token, file, itemId);
  }

  Future<bool> changeUserStatus(int itemId, int newStatus, String token) async {
    return await itemService.changeUserStatus(itemId, newStatus, token);
  }

  Future<bool> saveRating(int itemId, int rating, String comment, String token) async {
    return await itemService.saveRating(itemId, rating, comment, token);
  }

  Future<List<ItemUserAction>> loadItemReviews(int itemId) async {
    return await itemService.loadItemReviews(itemId);
  }
}


import 'dart:io';

import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import '../dto/article_dto.dart';
import '../dto/ask_paging_dto.dart';
import '../dto/ask_thread_dto.dart';
import '../dto/const.dart';
import '../dto/doc_dto.dart';
import '../dto/event_dto.dart';
import '../dto/home_dto.dart';
import '../dto/item_dto.dart';
import '../dto/items_dto.dart';
import '../dto/pdp_dto.dart';
import '../dto/quote_dto.dart';
import '../dto/user_dto.dart';
import '../dto/users_dto.dart';
import '../services/ask_service.dart';
import '../services/config_services.dart';
import '../services/item_services.dart';
import '../services/quote_service.dart';
import '../services/user_services.dart';
import 'default_feature_data.dart';

class PageRepository {
  UserService userService;
  QuoteService quoteService;
  ItemService itemService;
  ConfigServices configService;
  AskService askService;
  // TransactionService transactionService;
  final config;
  final httpClient = http.Client();

  PageRepository({this.config}) {
    quoteService = QuoteService(httpClient: this.httpClient);
    userService = UserService(config: config, httpClient: this.httpClient);
    configService = ConfigServices(config: config, httpClient: this.httpClient);
    itemService = ItemService(config: config, httpClient: this.httpClient);
    askService = AskService(config: config, httpClient: this.httpClient);
    // transactionService = TransactionService(config: config, httpClient: httpClient);
  }

  Future<PdpDTO> dataPDP(int itemId, String token) async {
    return await itemService.getPDPData(itemId, token);
  }

  Future<bool> touchFav(int itemId, String token) async {
    return await itemService.touchFav(itemId, token);
  }

  Future<UsersDTO> dataTeachersPage(int page, int pageSize) async {
    return await userService.getList(MyConst.ROLE_TEACHER, page, pageSize);
  }

  Future<ItemsDTO> dataTeacherPage(int userId, int page, int pageSize) async {
    return await itemService.itemsListOfUser(userId, page, pageSize);
  }

  Future<UsersDTO> dataSchoolsPage(int page, int pageSize) async {
    return await userService.getList(MyConst.ROLE_SCHOOL, page, pageSize);
  }

  Future<ItemsDTO> dataSchoolPage(int userId, page, pageSize) async {
    return await itemService.itemsListOfUser(userId, page, pageSize);
  }

  Future<List<CategoryPagingDTO>> category(int catId, page, pageSize) async {
    return await configService.category(catId, page, pageSize);
  }

  Future<HomeDTO> dataHome(String role, int userId) async {
    HomeDTO homeConfig = await configService.homeLayout(role);
    if (homeConfig.featuresIcons == null) {
      homeConfig.featuresIcons = defaultHomeFeatures(role, userId);
    }
    return homeConfig;
  }

  Future<QuoteDTO> getQuote(String url) async {
    return await quoteService.getQuote(url);
  }

  Future<Map<DateTime, List<EventDTO>>> monthEvent(DateTime month) async {
    return configService.monthEvent(month);
  }

  Future<DocDTO> guide(String key) async {
    return configService.doc(key);
  }

  Future<bool> saveFeedback(String token, String content, File file) async {
    return await configService.saveFeedback(token, content, file);
  }

  Future<List<UserDTO>> searchUser(String screen, String query) async {
    return await configService.searchUser(screen, query);
  }

  Future<List<ItemDTO>> searchItem(String screen, String query) async {
    return await configService.searchItem(screen, query);
  }

  Future<List<UserDTO>> allFriends(String token) async {
    return await userService.allFriends(token);
  }

  Future<bool> shareFriends(String token, int id, List<int> friends, bool isALL) async {
    return await userService.shareFriends(token, id, friends, isALL);
  }

  Future<ArticleHomeDTO> articleIndexPage() async {
    return await configService.articleIndexPage();
  }

  Future<ArticlePagingDTO> articleTypePage(String type, int page) async {
    return await configService.articleTypePage(type, page);
  }

  Future<ArticleDTO> article(int id) async {
    return await configService.article(id);
  }

  Future<int> getPopupVersion() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int popupVersion = prefs.getInt('home_popup') ?? 0;
    print("popupVersion: $popupVersion");
    return popupVersion;
  }

  Future<void> savePopupVersion(int value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('home_popup', value);
  }

  Future<AskPagingDTO> getAskList() async {
    return await askService.getList();
  }

  Future<AskThreadDTO> getAskThread(int askId, String token) async {
    return await askService.getThread(askId, token);
  }

  Future<bool> createAsk(int askId, String title, String content, UserDTO userDTO, String type) async {
    return await askService.create(askId, title, content, userDTO, type);
  }

  Future<bool> askSelectAnswer(int askId, String token) async {
    return await askService.selectAnswer(askId, token);
  }

  Future<bool> askVote(int askId, String type, String token) async {
    return await askService.vote(askId, type, token);
  }

  Future<List<String>> searchTags() async {
    return await configService.searchTags();
  }
}


import 'package:http/http.dart' as http;

import '../app_config.dart';
import '../dto/bank_dto.dart';
import '../dto/foundation_dto.dart';
import '../dto/transaction_config_dto.dart';
import '../dto/transaction_dto.dart';
import '../services/config_services.dart';
import '../services/transaction_service.dart';

class TransactionRepository {
  final AppConfig config;
  ConfigServices configService;
  TransactionService transactionService;
  final httpClient = http.Client();

  TransactionRepository({this.config}) {
    configService = ConfigServices(config: config, httpClient: httpClient);
    transactionService = TransactionService(config: config, httpClient: httpClient);
  }

  Future<TransactionConfigDTO> dataTransactionPage(String type, String token) async {
    return await configService.transactionConfigs(type, token);
  }

  Future<Map<String, List<TransactionDTO>>> dataHistoryPage(String token) async {
    return await transactionService.history(token);
  }

  Future<bool> submitDeposit(String amount, String token, String payMethod) async {
    return await transactionService.submitDeposit(amount, token, payMethod);
  }

  Future<bool> submitWithdraw(String amount, String token, BankDTO payInfo) async {
    return await transactionService.submitWithdraw(amount, token, payInfo);
  }

  Future<bool> submitExchange(int amount, String token) async {
    return await transactionService.submitExchange(amount, token);
  }

  Future<bool> register(String token, int itemId, String voucher, int childUser) async {
    return transactionService.register(token, itemId, voucher, childUser);
  }

  Future<FoundationDTO> foundation() async {
    return transactionService.foundation();
  }
}


import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;

import '../dto/account_calendar_dto.dart';
import '../dto/class_registered_user.dart';
import '../dto/const.dart';
import '../dto/contract.dart';
import '../dto/friends_dto.dart';
import '../dto/notification_dto.dart';
import '../dto/user_doc_dto.dart';
import '../dto/user_dto.dart';
import '../services/config_services.dart';
import '../services/user_services.dart';

class UserRepository {
  UserService userService;
  ConfigServices configServices;
  final storage = new FlutterSecureStorage();
  final config;
  final httpClient = http.Client();

  UserRepository({this.config}) {
    userService = new UserService(httpClient: httpClient, config: config);
    configServices = new ConfigServices(httpClient: httpClient, config: config);
  }

  Future<UserDTO> getUser(String token, bool isFull) async {
    if (isFull) {
      return await userService.getInfo(token);
    }
    return await userService.getInfoLess(token);
  }

  Future<UserDTO> authenticated({@required String phone, @required String password}) async {
    return await userService.login(phone, password);
  }

  Future<UserDTO> loginFacebook({@required Map<String, dynamic> data}) async {
    return await userService.loginFacebook(data);
  }

  Future<UserDTO> loginApple({@required Map<String, dynamic> data}) async {
    return await userService.loginApple(data);
  }

  Future<void> deleteToken() async {
    await storage.delete(key: MyConst.AUTH_TOKEN);
    return;
  }

  Future<void> storeToken(String token) async {
    await storage.write(key: MyConst.AUTH_TOKEN, value: token);
    return;
  }

  Future<String> getToken() async {
    return await storage.read(key: MyConst.AUTH_TOKEN);
  }

  Future<UserDTO> register(String phone, String name, String password, String refcode, String role) async {
    return await userService.register(phone, name, password, refcode, role);
  }

  Future<String> uploadAvatar(File file, String token) async {
    return await userService.uploadUserImage("image", token, file);
  }

  Future<String> uploadBanner(File file, String token) async {
    return await userService.uploadUserImage("banner", token, file);
  }

  Future<bool> editUser(UserDTO user, String token) async {
    return await userService.updateInfo(user);
  }

  Future<bool> changePass(String token, String newPass, String oldPass) async {
    return await userService.changePass(token, newPass, oldPass);
  }

  Future<FriendsDTO> friends(int userId, String token) async {
    return await userService.friends(token, userId);
  }

  Future<String> toc() async {
    final docDTO = await configServices.doc(MyConst.GUIDE_TOC);
    if (docDTO != null) {
      return docDTO.content;
    }
    return "";
  }

  Future<AccountCalendarDTO> myCalendar(String token) async {
    return await userService.myCalendar(token);
  }

  Future<int> joinCourse(String token, int itemId, int childId) async {
    return userService.joinCourse(token, itemId, childId);
  }

  Future<List<ClassRegisteredUserDTO>> registeredUsers(String token, int itemId) async {
    return userService.registeredUsers(token, itemId);
  }

  Future<UserDTO> getProfile(int userId) async {
    return userService.getProfile(userId);
  }

  Future<List<UserDocDTO>> getDocs(String token) async {
    return userService.getDocs(token);
  }

  Future<List<UserDocDTO>> addDoc(String token, File file) async {
    return userService.addDoc(token, file);
  }

  Future<List<UserDocDTO>> removeDoc(String token, int fileId) async {
    return userService.removeDoc(token, fileId);
  }

  Future<NotificationPagingDTO> notification(String token) async {
    return userService.notification(token);
  }

  Future<void> notifRead(String token, int id) async {
    return userService.notifRead(token, id);
  }

  Future<void> logout(String token) async {
    return userService.logout(token);
  }

  Future<bool> saveContract(String token, ContractDTO contract) async {
    return await userService.saveContract(token, contract);
  }

  Future<ContractDTO> loadContract(String token, int contractId) async {
    return await userService.loadContract(token, contractId);
  }

  Future<bool> signContract(String token, int contractId) async {
    return await userService.signContract(token, contractId);
  }

  Future<bool> saveChildren(String token, int id, String name) async {
    return await userService.saveChildren(token, id, name);
  }

  Future<List<UserDTO>> getChildren(String token) async {
    return await userService.getChildren(token);
  }
}


import 'package:flutter/widgets.dart';

import 'screens/account.dart';
import 'screens/account/account_children.dart';
import 'screens/account_about.dart';
import 'screens/account_calendar.dart';
import 'screens/account_contact.dart';
import 'screens/account_docs.dart';
import 'screens/account_edit.dart';
import 'screens/account_friends.dart';
import 'screens/account_helpcenter.dart';
import 'screens/account_password.dart';
import 'screens/account_profile.dart';
import 'screens/ask.dart';
import 'screens/ask_cat.dart';
import 'screens/ask_content.dart';
import 'screens/ask_forum.dart';
import 'screens/ask_forum_thread.dart';
import 'screens/contract_school.dart';
import 'screens/contract_sign.dart';
import 'screens/contract_teacher.dart';
import 'screens/course_form.dart';
import 'screens/course_list.dart';
import 'screens/course_registered.dart';
import 'screens/deposit.dart';
import 'screens/developing.dart';
import 'screens/draw.dart';
import 'screens/event.dart';
import 'screens/exchange.dart';
import 'screens/foundation.dart';
import 'screens/guide.dart';
import 'screens/items_school.dart';
import 'screens/items_teacher.dart';
import 'screens/login.dart';
import 'screens/notification.dart';
import 'screens/pdp.dart';
import 'screens/qrcode.dart';
import 'screens/register.dart';
import 'screens/school.dart';
import 'screens/teacher.dart';
import 'screens/transaction.dart';
import 'screens/withdraw.dart';

final Map<String, WidgetBuilder> routes = <String, WidgetBuilder>{
  // "/home": (BuildContext context) => HomeScreen(),
  "/school": (BuildContext context) => SchoolScreen(),
  "/teacher": (BuildContext context) => TeacherScreen(),
  "/event": (BuildContext context) => EventScreen(),
  "/ask": (BuildContext context) => AskScreen(),
  "/article": (BuildContext context) => AskArticleScreen(),
  "/ask/cat": (BuildContext context) => AskCatScreen(),
  "/ask/forum": (BuildContext context) => AskForumScreen(),
  "/ask/forum/thread": (BuildContext context) => AskForumThreadScreen(),
  "/account": (BuildContext context) => AccountScreen(),
  "/account/friends": (BuildContext context) => AccountFriendsScreen(),
  "/account/calendar": (BuildContext context) => AccountCalendarScreen(),
  "/account/helpcenter": (BuildContext context) => AccountHelpCenterScreen(),
  "/account/about": (BuildContext context) => AccountAboutScreen(),
  "/account/edit": (BuildContext context) => AccountEditScreen(),
  "/account/password": (BuildContext context) => AccountPasswordScreen(),
  "/account/contact": (BuildContext context) => AccountContactScreen(),
  "/account/children": (BuildContext context) => AccountChildrenScreen(),
  "/deposit": (BuildContext context) => DepositScreen(),
  "/withdraw": (BuildContext context) => WithdrawScreen(),
  "/exchange": (BuildContext context) => ExchangeScreen(),
  "/transaction": (BuildContext context) => TransactionScreen(),
  "/developing": (BuildContext context) => DevelopingScreen(),
  "/notification": (BuildContext context) => NotificationScreen(),
  "/items/teacher": (BuildContext context) => ItemsTeacherScreen(),
  "/items/school": (BuildContext context) => ItemsSchoolScreen(),
  "/pdp": (BuildContext context) => PDPScreen(),
  "/qrcode": (BuildContext context) => QrCodeScreen(),
  "/register": (BuildContext context) => RegisterScreen(),
  "/login": (BuildContext context) => LoginScreen(),
  "/course/form": (BuildContext context) => CourseFormScreen(),
  "/course/list": (BuildContext context) => CourseListScreen(),
  "/course/registered": (BuildContext context) => CourseRegisteredScreen(),
  "/foundation": (BuildContext context) => FoundationScreen(),
  "/guide": (BuildContext context) => GuideScreen(),
  "/profile": (BuildContext context) => AccountProfileScreen(),
  "/account/docs": (BuildContext context) => AccountDocsScreen(),
  "/contract/teacher": (BuildContext context) => ContractTeacherScreen(),
  "/contract/school": (BuildContext context) => ContractSchoolScreen(),
  "/contract/sign": (BuildContext context) => ContractSignScreen(),
  "/draw": (BuildContext context) => DrawScreen(),
};


import 'dart:io';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:share/share.dart';

import '../../blocs/auth/auth_bloc.dart';
import '../../blocs/auth/auth_event.dart';
import '../../dto/const.dart';
import '../../dto/friend_params_dto.dart';
import '../../dto/user_dto.dart';
import '../../main.dart';
import '../webview.dart';
import 'app_bar_with_image.dart';
import 'normal_menu.dart';

class AccountBody extends StatefulWidget {
  final UserDTO user;
  final AuthBloc authBloc;

  const AccountBody({Key key, this.user, this.authBloc}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _AccountBody();
}

class _AccountBody extends State<AccountBody> {
  @override
  Widget build(BuildContext context) {
    var moneyFormat = new NumberFormat("###,###,###", "vi_VN");
    return CustomScrollView(
      slivers: <Widget>[
        AccountAppBarWithImage(user: widget.user),
        SliverToBoxAdapter(
          child: Column(children: <Widget>[
            (Platform.isIOS && !widget.user.enableIosTrans)
                ? SizedBox(height: 0)
                : AccountNormalMenu(
                    title: "Giao dịch của tôi",
                    route: "/transaction",
                    leadingIcon: MdiIcons.wallet,
                    trailing: Icon(Icons.chevron_right),
                    // subContent: Text(
                    //   "anyPoint: " + moneyFormat.format(widget.user.walletC),
                    //   style: TextStyle(
                    //     color: Colors.orange,
                    //     fontSize: 12.0,
                    //     fontFeatures: [FontFeature.tabularFigures()],
                    //   ),
                    // ),
                  ),
            widget.user.role == MyConst.ROLE_MEMBER
                ? SizedBox(height: 0)
                : AccountNormalMenu(
                    title: "Khóa học của tôi",
                    route: "/course/list",
                    leadingIcon: MdiIcons.viewList,
                    trailing: Icon(
                      Icons.chevron_right,
                    ),
                  ),
            AccountNormalMenu(
              title: "Lịch học của tôi",
              route: "/account/calendar",
              leadingIcon: MdiIcons.calendarAccount,
              trailing: Icon(Icons.chevron_right),
            ),

            AccountNormalMenu(
              title: "Danh sách bạn bè",
              route: "/account/friends",
              routeParam: FriendParamsDTO(userId: widget.user.id, level: 1),
              leadingIcon: MdiIcons.accountGroup,
              trailing: SizedBox(
                  width: 80.0,
                  child: Row(mainAxisAlignment: MainAxisAlignment.end, children: [
                    Text(widget.user.numFriends.toString() + " bạn "),
                    Icon(Icons.chevron_right),
                  ])),
            ),
            AccountNormalMenu(
              title: "Quản lý tài khoản phụ",
              route: "/account/children",
              routeParam: widget.user,
              leadingIcon: MdiIcons.accountChild,
              trailing: Icon(Icons.chevron_right_sharp),
            ),
            AccountNormalMenu(
              title: "Thông tin cá nhân",
              route: "/account/edit",
              leadingIcon: Icons.account_box,
              trailing: Icon(Icons.edit),
            ),
            AccountNormalMenu(
              title: "Mã giới thiệu",
              leadingIcon: MdiIcons.qrcode,
              trailing: Icon(Icons.share),
              subContent: Text(widget.user.refcode + " (chạm để chia sẻ)"),
              routeFunction: () => _tabToCopy(widget.user.refLink),
            ),
            widget.user.role == MyConst.ROLE_TEACHER
                ? AccountNormalMenu(
                    title: "Hợp đồng giảng viên",
                    route: "/contract/teacher",
                    routeParam: widget.user.token,
                    leadingIcon: MdiIcons.fileCertificateOutline,
                    trailing: Icon(
                      Icons.chevron_right,
                    ),
                  )
                : SizedBox(height: 0),
            widget.user.role == MyConst.ROLE_SCHOOL
                ? AccountNormalMenu(
                    title: "Hợp đồng trường học",
                    route: "/contract/school",
                    routeParam: widget.user.token,
                    leadingIcon: MdiIcons.fileCertificateOutline,
                    trailing: Icon(
                      Icons.chevron_right,
                    ),
                  )
                : SizedBox(height: 0),
            widget.user.role == MyConst.ROLE_MEMBER
                ? SizedBox(height: 0)
                : AccountNormalMenu(
                    title: "Cập nhật chứng chỉ",
                    route: "/account/docs",
                    routeParam: widget.user.token,
                    leadingIcon: MdiIcons.certificate,
                    trailing: Icon(
                      Icons.chevron_right,
                    ),
                  ),
            // Navigator.of(context).popUntil(ModalRoute.withName("/"));

            AccountNormalMenu(
              title: "Hướng dẫn sử dụng",
              route: "/guide",
              routeParam: "guide_" + widget.user.role,
              leadingIcon: MdiIcons.televisionGuide,
              trailing: Icon(Icons.chevron_right),
            ),
            widget.user.role == MyConst.ROLE_SCHOOL || widget.user.role == MyConst.ROLE_TEACHER
                ? AccountNormalMenu(
                    title: "Chính sách",
                    route: "/guide",
                    routeParam: "guide_toc_" + widget.user.role,
                    leadingIcon: MdiIcons.notebookOutline,
                    trailing: Icon(Icons.chevron_right),
                  )
                : SizedBox(height: 0),
            AccountNormalMenu(
              title: "Thông tin về anyLEARN.vn",
              route: "/guide",
              routeParam: MyConst.GUIDE_ABOUT,
              leadingIcon: MdiIcons.information,
              trailing: Icon(Icons.chevron_right),
            ),
            AccountNormalMenu(
              title: "Đổi mật khẩu",
              route: "/account/password",
              routeParam: widget.user.token,
              leadingIcon: MdiIcons.lock,
              trailing: Icon(Icons.arrow_right),
            ),
            AccountNormalMenu(
              title: "Trung Tâm Hỗ Trợ",
              routeFunction: () {
                Navigator.of(context).push(MaterialPageRoute(
                    builder: (context) => WebviewScreen(
                          url: config.webUrl + "helpcenter",
                        )));
              },
              leadingIcon: MdiIcons.helpCircle,
              trailing: Icon(Icons.chevron_right),
            ),
            AccountNormalMenu(
              title: "Đăng xuất",
              routeFunction: () {
                widget.authBloc.add(AuthLoggedOutEvent(token: widget.user.token));
              },
              leadingIcon: null,
              trailing: Icon(
                MdiIcons.logout,
                color: Colors.red,
              ),
              titleColor: Colors.red,
            ),
          ]),
        ),
      ],
    );
  }

  void _tabToCopy(String text) {
    // Clipboard.setData(new ClipboardData(text: text));
    Share.share(text);
  }
}


import 'dart:convert';
import 'dart:io';
import 'dart:math' as math;

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:overlay_support/overlay_support.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../blocs/account/account_blocs.dart';
import '../../dto/const.dart';
import '../../dto/event_dto.dart';
import '../../dto/user_dto.dart';
import '../../widgets/calendar_box.dart';
import '../rating_input.dart';

class AccountCalendarList extends StatefulWidget {
  final List<EventDTO> events;
  final isOpen;
  final UserDTO user;
  final AccountBloc accountBloc;

  const AccountCalendarList({Key key, this.events, this.isOpen, this.user, this.accountBloc}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _AccountCalendarList();
}

class _AccountCalendarList extends State<AccountCalendarList> with TickerProviderStateMixin {
  List<AnimationController> controllers;

  String timerString(AnimationController controller) {
    Duration duration = controller.duration * controller.value;
    return '${(duration.inHours).toString().padLeft(2, '0')}:${(duration.inMinutes % 60).toString().padLeft(2, '0')}:${(duration.inSeconds % 60).toString().padLeft(2, '0')}';
  }

  @override
  void initState() {
    super.initState();
    controllers = new List();
  }

  @override
  void dispose() {
    controllers.forEach((e) {
      e.dispose();
    });
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // String nowStr = DateFormat("yyyy-MM-dd").format(DateTime.now());
    return CustomScrollView(
      slivers: <Widget>[
        widget.events.length > 0
            ? SliverList(
                delegate: SliverChildBuilderDelegate(
                  (context, index) {
                    final itemIndex = index ~/ 2;
                    if (index.isEven) {
                      return ListTile(
                        leading: CalendarBox(
                            fontSize: 12,
                            text: DateFormat("dd/MM").format(DateTime.parse(widget.events[itemIndex].date))),
                        title: Text(widget.events[itemIndex].title),
                        subtitle: Text.rich(TextSpan(
                          text: (widget.events[itemIndex].itemSubtype == MyConst.ITEM_SUBTYPE_OFFLINE 
                          && widget.events[itemIndex].scheduleContent != widget.events[itemIndex].title) ? widget.events[itemIndex].scheduleContent : "",
                          children: [
                            TextSpan(
                                text: widget.events[itemIndex].childName != null
                                    ? "[" + widget.events[itemIndex].childName + "] "
                                    : ""),
                            TextSpan(text: widget.events[itemIndex].time),
                            TextSpan(
                                text: widget.events[itemIndex].userJoined == null ? "" : "\nĐã xác nhận",
                                style: TextStyle(color: Colors.green))
                          ],
                        )),
                        trailing: widget.events[itemIndex].authorStatus == MyConst.ITEM_USER_STATUS_CANCEL
                            ? Text("Lớp đã hủy")
                            : _buildTrailing(widget.events[itemIndex]),
                        onLongPress: () {
                          Navigator.of(context).pushNamed("/pdp", arguments: widget.events[itemIndex].itemId);
                        },
                      );
                    }
                    return Divider(
                      height: 0.0,
                    );
                  },
                  semanticIndexCallback: (Widget widget, int localIndex) {
                    if (localIndex.isEven) {
                      return localIndex ~/ 2;
                    }
                    return null;
                  },
                  childCount: math.max(0, widget.events.length * 2 - 1),
                ),
              )
            : SliverToBoxAdapter(
                child: Padding(
                  padding: const EdgeInsets.all(15.0),
                  child: Text.rich(
                    TextSpan(
                      text: "Bạn không có lịch học nào.",
                      style: TextStyle(fontSize: 16.0),
                      children: <TextSpan>[
                        TextSpan(
                            text: "Xem các lịch học đang có",
                            style: TextStyle(color: Colors.blue),
                            recognizer: TapGestureRecognizer()
                              ..onTap = () {
                                Navigator.of(context).pushNamed("/event");
                              }),
                      ],
                    ),
                    textAlign: TextAlign.left,
                  ),
                ),
              )
      ],
    );
  }

  Widget _buildTrailing(EventDTO event) {
    if (!widget.isOpen) {
      if (event.userJoined == null) {
        return BlocBuilder<AccountBloc, AccountState>(
          bloc: widget.accountBloc,
          builder: (context, state) {
            return event.userJoined != null && event.userJoined > 0
                ? Text("Đã tham gia")
                : RaisedButton(
                    color: Colors.blue,
                    onPressed: () {
                      widget.accountBloc
                        ..add(AccJoinCourseEvent(
                            token: widget.user.token,
                            itemId: event.itemId,
                            scheduleId: event.id,
                            childId: event.childId));
                    },
                    child: Text(
                      "Xác nhận",
                      style: TextStyle(fontSize: 12, color: Colors.white),
                    ));
          },
        );
      } else {
        return RaisedButton(
            onPressed: () {
              _dialogJoin(event, false);
            },
            color: Colors.blue,
            child: Text(
              "Đánh giá",
              style: TextStyle(fontSize: 12, color: Colors.white),
            ));
      }
    } else {
      final today = DateFormat("yyyy-MM-dd").format(DateTime.now());
      if (today == event.date || event.nolimitTime) {
        if (event.userJoined == null) {
          Duration diffInSeconds = DateTime.parse(event.date + " " + event.time).difference(DateTime.now());
          if (!diffInSeconds.isNegative) {
            AnimationController controller = AnimationController(
              vsync: this,
              duration: diffInSeconds,
            );
            controllers.add(controller);
            controller.reverse(from: controller.value == 0.0 ? 1.0 : controller.value);
            return AnimatedBuilder(
                animation: controller,
                builder: (context, child) {
                  return controller.isAnimating
                      ? RaisedButton(
                          onPressed: () {
                            _dialogJoin(event, false);
                          },
                          child: Text(
                            timerString(controller),
                            style: TextStyle(fontSize: 12),
                          ))
                      : RaisedButton(
                          color: Colors.blue,
                          onPressed: () {
                            _dialogJoin(event, true);
                          },
                          child: Text(
                            "Tham gia",
                            style: TextStyle(fontSize: 12, color: Colors.white),
                          ));
                });
          } else {
            return BlocBuilder<AccountBloc, AccountState>(
              bloc: widget.accountBloc,
              builder: (context, state) {
                return event.userJoined != null && event.userJoined > 0
                    ? RaisedButton(
                        onPressed: () {
                          _dialogJoin(event, false);
                        },
                        color: Colors.blue,
                        child: Text(
                          "Vào lớp",
                          style: TextStyle(fontSize: 12, color: Colors.white),
                        ))
                    : RaisedButton(
                        color: Colors.blue,
                        onPressed: () {
                          _dialogJoin(event, true);
                        },
                        child: Text(
                          "Tham gia",
                          style: TextStyle(fontSize: 12, color: Colors.white),
                        ));
              },
            );
          }
        } else {
          return RaisedButton(
              onPressed: () {
                _dialogJoin(event, false);
              },
              color: Colors.blue,
              child: Text(
                "Vào lớp",
                style: TextStyle(fontSize: 12, color: Colors.white),
              ));
        }
      } else {
        return Text("Chưa diễn ra");
      }
    }
  }

  void _dialogJoin(EventDTO eventDTO, bool hasConfirm) {
    String route = "";
    String routeInfo = "";
    OnlineScheduleInfoDTO onlineScheduleInfoDTO;
    if (eventDTO.itemSubtype == MyConst.ITEM_SUBTYPE_ONLINE) {
      try {
        onlineScheduleInfoDTO = OnlineScheduleInfoDTO.fromJson(jsonDecode(eventDTO.scheduleContent));
      } catch (e) {}

      if (onlineScheduleInfoDTO != null) {
        route = onlineScheduleInfoDTO.url;
        routeInfo = onlineScheduleInfoDTO.info;
      } else if (eventDTO.location != null) {
        route = eventDTO.location;
      } else {
        routeInfo = "Vui lòng chờ cập nhật thông tin lớp học.";
      }
    } else {
      routeInfo = eventDTO.scheduleContent;
    }
    showDialog(
      context: context,
      builder: (context) => SimpleDialog(
        children: <Widget>[
          eventDTO.itemSubtype != MyConst.ITEM_SUBTYPE_ONLINE
              ? Container()
              : ListTile(
                  title: Text("Vào lớp học"),
                  subtitle: Text.rich(TextSpan(text: route, children: [
                    routeInfo.isEmpty ? TextSpan(text: "") : TextSpan(text: "\n" + routeInfo),
                  ])),
                  onTap: () async {
                    Navigator.of(context).pop();
                    if (route != null) {
                      if (Platform.isIOS) {
                        if (await canLaunch(route)) {
                          await launch(route, forceSafariVC: false);
                        } else {
                          if (await canLaunch(route)) {
                            await launch(route);
                          } else {
                            toast("Đường dẫn lớp học không đúng, vui lòng kiểm tra lại với người phụ trách.");
                            throw 'Could not launch';
                          }
                        }
                      } else {
                        if (await canLaunch(route)) {
                          await launch(route);
                        } else {
                          throw 'Could not launch';
                        }
                      }
                    }
                  },
                ),
          hasConfirm ? Divider() : SizedBox(height: 0),
          hasConfirm
              ? ListTile(
                  title: Text("Xác nhận tham gia"),
                  onTap: () {
                    widget.accountBloc
                      ..add(AccJoinCourseEvent(
                          token: widget.user.token,
                          itemId: eventDTO.itemId,
                          scheduleId: eventDTO.id,
                          childId: eventDTO.childId));
                    Navigator.of(context).pop();
                  },
                )
              : Text(""),
          !hasConfirm ? Divider() : SizedBox(height: 0),
          !hasConfirm
              ? ListTile(
                  trailing: eventDTO.userRating > 0
                      ? Text("LÀM LẠI", style: TextStyle(color: Colors.blue))
                      : Icon(Icons.chevron_right),
                  title:
                      Text(eventDTO.userRating > 0 ? "Bạn đã đánh giá ${eventDTO.userRating}*" : "Đánh giá khóa học"),
                  onTap: () async {
                    Navigator.of(context).pop();
                    final sentReview = await Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                      return RatingInputScreen(
                          user: widget.user,
                          itemId: eventDTO.itemId,
                          itemTitle: eventDTO.title,
                          lastRating: eventDTO.userRating);
                    }));
                    if (sentReview) {
                      widget.accountBloc..add(AccLoadMyCalendarEvent(token: widget.user.token));
                    }
                  },
                )
              : SizedBox(height: 0),
        ],
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:overlay_support/overlay_support.dart';

import '../../blocs/account/account_blocs.dart';
import '../../dto/user_dto.dart';
import '../../models/user_repo.dart';

class AccountChildrenScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountChildrenScreen();
}

class _AccountChildrenScreen extends State<AccountChildrenScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  UserDTO user;
  AccountBloc _accountBloc;

  @override
  void didChangeDependencies() {
    user = ModalRoute.of(context).settings.arguments;
    final userRepo = RepositoryProvider.of<UserRepository>(context);
    _accountBloc = AccountBloc(userRepository: userRepo);
    _accountBloc..add(AccLoadChildrenEvent(token: user.token));

    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Quản lý tài khoản phụ"),
        actions: [
          IconButton(
              icon: Icon(
                Icons.add,
                color: Colors.white,
              ),
              onPressed: () {
                _formEdit(context, 0, "");
              }),
        ],
      ),
      body: BlocBuilder(
          bloc: _accountBloc,
          builder: (context, state) {
            if (state is AccChildrenSuccessState) {
              return ListView.separated(
                itemBuilder: (context, index) => ListTile(
                  title: Text(state.children[index].name),
                  trailing: Icon(Icons.edit),
                  onTap: () {
                    _formEdit(context, state.children[index].id, state.children[index].name);
                  },
                ),
                separatorBuilder: (context, index) => Divider(),
                itemCount: state.children.length,
              );
            }
            return Center(
              child: CircularProgressIndicator(),
            );
          }),
    );
  }

  void _formEdit(BuildContext context, int id, String name) {
    _titleController.text = name;
    showDialog(
        context: context,
        builder: (context) => SimpleDialog(
              contentPadding: EdgeInsets.fromLTRB(10, 5, 10, 0),
              children: [
                Form(
                    key: _formKey,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Container(
                          margin: EdgeInsets.only(bottom: 20),
                          child: TextFormField(
                            controller: _titleController,
                            decoration: InputDecoration(
                              labelText: "Tên thành viên",
                            ),
                          ),
                        )
                      ],
                    )),
                BlocListener(
                    bloc: _accountBloc,
                    listener: (context, state) {
                      if (state is AccSaveChildrenSuccessState) {
                        toast("Lưu thành công!");
                        _accountBloc..add(AccLoadChildrenEvent(token: user.token));
                        Navigator.of(context).pop();
                      } else if (state is AccChildrenFailState) {
                        toast(state.error);
                      }
                    },
                    child: RaisedButton(
                      onPressed: () {
                        _accountBloc..add(AccSaveChildrenEvent(id: id, name: _titleController.text, token: user.token));
                      },
                      color: Colors.blue,
                      textColor: Colors.white,
                      child: BlocBuilder(
                        bloc: _accountBloc,
                        builder: (context, state) {
                          if (state is AccSaveChildrenLoadingState) {
                            return Container(
                              padding: EdgeInsets.all(2),
                              child: CircularProgressIndicator(
                                valueColor: new AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            );
                          }
                          return id == 0 ? Text("Thêm tài khoản mới") : Text("Cập nhật tài khoản");
                        },
                      ),
                    )),
              ],
            ));
  }
}


import 'package:anylearn/dto/user_dto.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

class AccountAppBarWithImage extends StatelessWidget {
  final UserDTO user;

  const AccountAppBarWithImage({Key key, this.user}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double barHeight = width * 3 / 5;
    return SliverAppBar(
      expandedHeight: user.image != null ? barHeight : 0,
      centerTitle: true,
      floating: true,
      pinned: user.image != null ? false : true,
      actions: <Widget>[
        IconButton(
            icon: Icon(MdiIcons.qrcodeScan),
            onPressed: () {
              Navigator.of(context).pushNamed("/qrcode");
            })
      ],
      flexibleSpace: LayoutBuilder(
        builder: (context, bc) {
          return FlexibleSpaceBar(
            centerTitle: false,
            title: Text(
              user.name,
              style: TextStyle(),
            ),
            background: new ClipRect(
              child: new Container(
                decoration: new BoxDecoration(
                  image: user.image != null
                      ? DecorationImage(
                          image: CachedNetworkImageProvider(user.image),
                          colorFilter: ColorFilter.mode(Colors.black.withOpacity(0.3), BlendMode.darken),
                          fit: BoxFit.cover,
                          alignment: Alignment.topCenter,
                        )
                      : null,
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import '../../blocs/course/course_blocs.dart';
import '../../dto/const.dart';
import '../../dto/course_registered_params_dto.dart';
import '../../dto/item_dto.dart';
import '../../dto/user_dto.dart';
import '../../widgets/calendar_box.dart';

class CourseList extends StatelessWidget {
  final CourseBloc courseBloc;
  final UserDTO user;
  final bool hasMenu;
  final List<ItemDTO> list;
  final shortDayFormat = DateFormat("dd/MM");

  CourseList({Key key, this.list, this.hasMenu, this.courseBloc, this.user}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return list.length > 0
        ? ListView.separated(
            itemBuilder: (context, index) => ListTile(
              onTap: () {
                if (hasMenu) {
                  showDialog(
                    context: context,
                    builder: (context) => SimpleDialog(
                      children: <Widget>[
                        ListTile(
                            trailing: Icon(Icons.edit),
                            title: Text("Chỉnh sửa khóa học"),
                            onTap: () {
                              Navigator.of(context).pop();
                              Navigator.of(context).pushNamed("/course/form", arguments: list[index].id);
                            }),
                        Divider(),
                        ListTile(
                            trailing: Icon(Icons.assignment_turned_in),
                            title: Text("Danh sách đăng ký"),
                            onTap: () {
                              Navigator.of(context).pop();
                              Navigator.of(context).pushNamed('/course/registered',
                                  arguments: CourseRegisteredPramsDTO(token: user.token, itemId: list[index].id));
                            }),
                        Divider(),
                        _userStatusAction(context, list[index]),
                        Divider(),
                        ListTile(
                            trailing: Icon(Icons.close),
                            title: Text("Hủy lớp"),
                            onTap: () {
                              showDialog(
                                  context: context,
                                  builder: (context) => AlertDialog(
                                        content: Text(
                                            "Bạn chắc chắn muốn đóng lớp này? Lớp đã đóng không thể mở lại, xin hãy xác nhận."),
                                        actions: <Widget>[
                                          FlatButton(
                                              onPressed: () {
                                                Navigator.of(context).pop();
                                              },
                                              child: Text("Quay lại")),
                                          RaisedButton(
                                              color: Colors.red,
                                              child: Text("Hủy lớp"),
                                              onPressed: () {
                                                courseBloc.add(CourseChangeUserStatusEvent(
                                                    itemId: list[index].id,
                                                    token: user.token,
                                                    newStatus: MyConst.ITEM_USER_STATUS_CANCEL));
                                                Navigator.of(context).pop();
                                              }),
                                        ],
                                      ));
                            }),
                      ],
                    ),
                  );
                }
              },
              leading: CalendarBox(
                  image: list[index].image,
                  fontSize: 12,
                  text: shortDayFormat.format(DateTime.parse(list[index].dateStart))),
              title: Text(list[index].title),
              subtitle: Text.rich(
                TextSpan(
                    text: list[index].timeStart + " " + list[index].dateStart,
                    style: TextStyle(fontSize: 12),
                    children: [
                      TextSpan(text: "\n"),
                      _userStatusStr(list[index].userStatus),
                    ]),
              ),
              trailing: list[index].status == 0
                  ? Text(
                      "Đang duyệt",
                      style: TextStyle(color: Colors.red),
                    )
                  : Text(
                      "Đã duyệt",
                      style: TextStyle(color: Colors.green),
                    ),
            ),
            separatorBuilder: (context, index) => Divider(),
            itemCount: list.length,
          )
        : Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text.rich(TextSpan(text: "Bạn không có khóa học nào.")),
          );
  }

  TextSpan _userStatusStr(int status) {
    switch (status) {
      case MyConst.ITEM_USER_STATUS_INACTIVE:
        return TextSpan(
          text: "Chưa mở ",
          style: TextStyle(color: Colors.grey),
        );
      case MyConst.ITEM_USER_STATUS_ACTIVE:
        return TextSpan(
          text: "Đang mở ",
          style: TextStyle(color: Colors.green),
        );
      case MyConst.ITEM_USER_STATUS_DONE:
        return TextSpan(
          text: "Đã xong",
          style: TextStyle(color: Colors.green),
        );
      case MyConst.ITEM_USER_STATUS_CANCEL:
        return TextSpan(
          text: "Đã hủy",
          style: TextStyle(color: Colors.red),
        );
      default:
        return TextSpan(
          text: "-",
          style: TextStyle(color: Colors.grey),
        );
    }
  }

  Widget _userStatusAction(BuildContext context, ItemDTO itemDTO) {
    switch (itemDTO.userStatus) {
      case MyConst.ITEM_USER_STATUS_INACTIVE:
        return ListTile(
            trailing: Icon(Icons.play_circle_outline),
            title: Text("Mở lớp nhận đăng ký"),
            onTap: () {
              courseBloc.add(CourseChangeUserStatusEvent(
                  itemId: itemDTO.id, token: user.token, newStatus: MyConst.ITEM_USER_STATUS_ACTIVE));
              Navigator.of(context).pop();
            });

      case MyConst.ITEM_USER_STATUS_ACTIVE:
        if (DateTime.now().isAfter(DateTime.parse(itemDTO.dateStart + " " + itemDTO.timeStart))) {
          return ListTile(
              trailing: Icon(Icons.check),
              title: Text("Lớp đã hoàn thành"),
              onTap: () {
                courseBloc.add(CourseChangeUserStatusEvent(
                    itemId: itemDTO.id, token: user.token, newStatus: MyConst.ITEM_USER_STATUS_DONE));
                Navigator.of(context).pop();
              });
        } else {
          return ListTile(
              trailing: Icon(Icons.pause_circle_outline),
              title: Text("Tạm ẩn lớp, dừng đăng ký"),
              onTap: () {
                courseBloc.add(CourseChangeUserStatusEvent(
                    itemId: itemDTO.id, token: user.token, newStatus: MyConst.ITEM_USER_STATUS_INACTIVE));
                Navigator.of(context).pop();
              });
        }
    }
  }
}


import 'package:flutter/material.dart';

class AccountNormalMenu extends StatelessWidget {
  final String title;
  final String route;
  final IconData leadingIcon;
  final Widget trailing;
  final Widget subContent;
  final VoidCallback routeFunction;
  final String routeFunctionMsg;
  final Color leadingColor;
  final Color trailingColor;
  final Color titleColor;
  final dynamic routeParam;

  const AccountNormalMenu(
      {Key key,
      this.title,
      this.route,
      this.routeParam,
      this.leadingIcon,
      this.trailing,
      this.subContent,
      this.routeFunction,
      this.routeFunctionMsg,
      this.leadingColor,
      this.trailingColor,
      this.titleColor})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(children: [
      ListTile(
        title: Text(
          title,
          style: TextStyle(color: titleColor ?? Colors.black),
        ),
        subtitle: subContent ?? null,
        onTap: () {
          if (routeFunction != null) {
            routeFunction();
          } else {
            Navigator.of(context).pushNamed(route, arguments: routeParam);
          }
        },
        leading: Icon(
          leadingIcon,
          color: leadingColor ?? Colors.grey[600],
          size: 32.0,
        ),
        trailing: trailing,
      ),
      Divider(height: 0.0),
    ]);
  }
}


import 'dart:math' as math;
import 'package:anylearn/dto/const.dart';
import 'package:anylearn/dto/transaction_dto.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class TransactionList extends StatelessWidget {
  final List<TransactionDTO> transactions;
  final String tab;

  const TransactionList({Key key, this.transactions, this.tab}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    DateFormat dateF = new DateFormat("hh:mm dd/MM/yyyy");
    var monneyF = new NumberFormat("###,###,###", "vi_VN");
    return CustomScrollView(
      slivers: <Widget>[
        transactions.length > 0
            ? SliverList(
                delegate: SliverChildBuilderDelegate(
                  (context, index) {
                    final itemIndex = index ~/ 2;
                    if (index.isEven) {
                      return ListTile(
                        title: Text(
                          transactions[itemIndex].content,
                          style: TextStyle(),
                        ),
                        subtitle: Text.rich(
                          TextSpan(
                              text: (transactions[itemIndex].orderId != null && transactions[itemIndex].orderId > 0
                                      ? "#" + transactions[itemIndex].orderId.toString() + " - "
                                      : "") +
                                  (transactions[itemIndex].createdDate == null
                                      ? ""
                                      : dateF.format(DateTime.parse(transactions[itemIndex].createdDate))),
                              style: TextStyle(
                                fontWeight: FontWeight.w300,
                              ),
                              children: [
                                TextSpan(text: "\n"),
                                _statusText(transactions[itemIndex].status),
                              ]),
                        ),
                        trailing: Text(
                          monneyF.format(usedAmount(transactions[itemIndex])),
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: usedAmount(transactions[itemIndex]) > 0 ? Colors.green : Colors.red,
                          ),
                        ),
                      );
                    }
                    return Divider(
                      height: 0.0,
                    );
                  },
                  semanticIndexCallback: (Widget widget, int localIndex) {
                    if (localIndex.isEven) {
                      return localIndex ~/ 2;
                    }
                    return null;
                  },
                  childCount: math.max(0, transactions.length * 2 - 1),
                ),
              )
            : SliverToBoxAdapter(
                child: FlatButton(
                    onPressed: () {
                      Navigator.of(context).pushNamed("/event");
                    },
                    child: Text("Bạn không có giao dịch nào. Xem các lịch học đang có")),
              )
      ],
    );
  }

  TextSpan _statusText(int status) {
    switch (status) {
      case MyConst.TRANS_STATUS_PENDING:
        return TextSpan(text: "Đang chờ", style: TextStyle(color: Colors.grey));
      case MyConst.TRANS_STATUS_APPROVE:
        return TextSpan(text: "Đã xác nhận", style: TextStyle(color: Colors.green));
      case MyConst.TRANS_STATUS_CANCEL:
        return TextSpan(text: "Bị từ chối", style: TextStyle(color: Colors.red));
    }
  }

  int usedAmount(TransactionDTO trans) {
    if (trans.type == MyConst.TRANS_TYPE_EXCHANGE && tab == "wallet_c") {
      return trans.refAmount;
    }
    return trans.amount;
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:anylearn/dto/user_doc_dto.dart';
import 'package:flutter/material.dart';

import '../image_view.dart';

class UserDocList extends StatelessWidget {
  final List<UserDocDTO> userDocs;

  const UserDocList({Key key, this.userDocs}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    List<String> images = [];
    userDocs.forEach((e) {
      images.add(e.data);
    });
    final width = MediaQuery.of(context).size.width;
    return Container(
      height: (userDocs.length / 3).ceil().toDouble() * (width / 3),
      child: GridView.builder(
        itemCount: userDocs.length,
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 3,
        ),
        itemBuilder: (context, index) {
          return InkWell(
            onTap: () {
              open(context, index, images);
            },
            child: Card(
                elevation: 0,
                child: CustomCachedImage(
                  url: userDocs[index].data,
                )),
          );
        },
      ),
    );
  }

   void open(BuildContext context, final int index, List<String> galleryItems) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ImageViewScreen(
          galleryItems: galleryItems,
          backgroundDecoration: const BoxDecoration(
            color: Colors.black,
          ),
          initialIndex: index,
          scrollDirection: Axis.horizontal,
          imageText: "Chứng chỉ",
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_event.dart';
import '../blocs/auth/auth_state.dart';
import '../customs/feedback.dart';
import '../dto/user_dto.dart';
import '../widgets/loading_widget.dart';
import 'account/account_body.dart';

class AccountScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountScreen();
}

class _AccountScreen extends State<AccountScreen> {
  UserDTO user;
  AuthBloc _authBloc;

  @override
  void didChangeDependencies() {
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
      },
      child: BlocBuilder<AuthBloc, AuthState>(
        bloc: _authBloc,
        builder: (context, state) {
          if (state is AuthSuccessState) {
            user = state.user;
          }
          return Scaffold(
            body: user != null
                ? CustomFeedback(
                    user: user,
                    child: AccountBody(
                      user: user,
                      authBloc: _authBloc,
                    ),
                  )
                : LoadingWidget(),
          );
        },
      ),
    );
  }
}


import 'package:anylearn/screens/webview.dart';
import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:intl/intl.dart';

import '../dto/guide_dto.dart';

class AccountAboutScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountAboutScreen();
}

class _AccountAboutScreen extends State<AccountAboutScreen> {
  final GuideDTO guide = GuideDTO(
    title: "Thông tin về anyLEARN.vn",
    content:
        "<p>Content in html</p><p> Has Image <img src=\"https://scholarship-positions.com/wp-content/uploads/2020/01/Free-Online-Course-on-Learning-to-Teach-Online.jpg\" /> </p>",
    lastUpdate: "2020-05-19 19:00:00",
  );
  @override
  Widget build(BuildContext context) {
    DateFormat f = DateFormat("dd/MM/yyyy");
    return Scaffold(
      appBar: AppBar(
        centerTitle: false,
        title: Text("Giới thiệu"),
      ),
      body: ListView(
        children: <Widget>[
          Container(
            padding: EdgeInsets.fromLTRB(20.0, 10.0, 20.0, 10.0),
            decoration: BoxDecoration(
              color: Colors.grey[100],
            ),
            child: Text(
              guide.title,
              style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.bold, color: Colors.grey[600]),
            ),
          ),
          Html(
            data: guide.content,
            shrinkWrap: true,
            onLinkTap: (String url, _, __, ___) {
              Navigator.of(context).push(MaterialPageRoute(
                  builder: (context) => WebviewScreen(
                        url: url,
                      )));
            },
          ),
          Divider(),
          Container(
            alignment: Alignment.topRight,
            padding: EdgeInsets.only(right: 10.0),
            child: Text(
              " Cập nhật ngày: " + f.format(DateTime.parse(guide.lastUpdate)),
              style: TextStyle(fontStyle: FontStyle.italic, fontSize: 10.0),
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:anylearn/screens/rating_input.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/account/account_blocs.dart';
import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_blocs.dart';
import '../dto/account_calendar_dto.dart';
import '../dto/user_dto.dart';
import '../models/user_repo.dart';
import '../widgets/calendar_box.dart';
import '../widgets/loading_widget.dart';
import 'account/account_calendar_list.dart';

class AccountCalendarScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountCalendarScreen();
}

class _AccountCalendarScreen extends State<AccountCalendarScreen> with TickerProviderStateMixin {
  AccountCalendarDTO calendars;

  bool createdTab = false;
  TabController _tabController;
  AccountBloc _accountBloc;
  AuthBloc _authBloc;
  UserDTO _user;

  @override
  void didChangeDependencies() {
    final userRepo = RepositoryProvider.of<UserRepository>(context);
    _accountBloc = AccountBloc(userRepository: userRepo);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  void initState() {
    super.initState();
    _tabController = new TabController(vsync: this, length: 3, initialIndex: 1);
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popUntil(ModalRoute.withName("/"));
          Navigator.of(context).pushNamed("/login");
        }
        if (state is AuthSuccessState) {
          _user = state.user;
          _accountBloc..add(AccLoadMyCalendarEvent(token: _user.token));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          centerTitle: false,
          title: const Text("Lịch học của tôi"),
          bottom: PreferredSize(
            child: Column(
              children: <Widget>[
                Container(
                  width: double.infinity,
                  height: 120.0,
                  child: Image.asset("assets/banners/schedule_banner.jpg", fit: BoxFit.cover),
                ),
                TabBar(controller: _tabController, tabs: [
                  Tab(child: Text("Đã qua")),
                  Tab(child: Text("Sắp diễn ra")),
                  Tab(child: Text("Quan tâm")),
                ]),
              ],
            ),
            preferredSize: Size.fromHeight(150.0),
          ),
        ),
        body: BlocProvider<AccountBloc>(
          create: (context) => _accountBloc,
          child: BlocListener<AccountBloc, AccountState>(
            listener: (context, state) {
              if (state is AccJoinSuccessState) {
                // Scaffold.of(context).showSnackBar(new SnackBar(content: Text("Xác nhận thành công")));
                showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                          title: Text("Mời đánh giá khóa học."),
                          content: Text("Chúc mừng bạn vừa hoàn thành buổi học. Vui lòng để lại đánh giá của bạn nhé."),
                          actions: [
                            FlatButton(
                                onPressed: () async {
                                  Navigator.of(context).pop();
                                  final sentReview =
                                      await Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                                    return RatingInputScreen(
                                        user: _user, itemId: state.itemId, itemTitle: "", lastRating: 0);
                                  }));
                                },
                                child: Text("ĐÁNH GIÁ"))
                          ],
                        ));
              }
              if (state is AccountFailState) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(content: Text(state.error)));
              }
            },
            child: BlocBuilder<AccountBloc, AccountState>(
              builder: (context, state) {
                if (state is AccMyCalendarSuccessState) {
                  calendars = state.calendar;
                }
                return TabBarView(
                  controller: _tabController,
                  children: [
                    calendars != null
                        ? AccountCalendarList(
                            accountBloc: _accountBloc,
                            events: calendars.done,
                            isOpen: false,
                            user: _user,
                          )
                        : LoadingWidget(),
                    calendars != null
                        ? AccountCalendarList(
                            accountBloc: _accountBloc,
                            events: calendars.open,
                            isOpen: true,
                            user: _user,
                          )
                        : LoadingWidget(),
                    calendars != null
                        ? (calendars.fav.length > 0
                            ? ListView.separated(
                                itemBuilder: (context, index) {
                                  return ListTile(
                                    leading: CalendarBox(
                                        fontSize: 12,
                                        text: DateFormat("dd/MM").format(DateTime.parse(calendars.fav[index].date))),
                                    title: Text(
                                      calendars.fav[index].title,
                                    ),
                                    trailing: Icon(Icons.chevron_right),
                                    onTap: () {
                                      Navigator.of(context).pushNamed("/pdp", arguments: calendars.fav[index].itemId);
                                    },
                                  );
                                },
                                separatorBuilder: (context, index) {
                                  return Divider();
                                },
                                itemCount: calendars.fav.length)
                            : Padding(
                                padding: const EdgeInsets.all(15.0),
                                child: Text.rich(
                                  TextSpan(
                                    text: "Bạn chưa đánh dấu khóa học nào là ưa thích.",
                                    style: TextStyle(fontSize: 16.0),
                                    children: <TextSpan>[
                                      TextSpan(
                                          text: "Xem các lịch học đang có",
                                          style: TextStyle(color: Colors.blue),
                                          recognizer: TapGestureRecognizer()
                                            ..onTap = () {
                                              Navigator.of(context).pushNamed("/event");
                                            }),
                                    ],
                                  ),
                                  textAlign: TextAlign.left,
                                )))
                        : LoadingWidget(),
                  ],
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

class AccountContactScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountContactScreen();
}

class _AccountContactScreen extends State<AccountContactScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: false,
        title: Text("Liên hệ với chúng tôi"),
      ),
      body: Container(
        padding: EdgeInsets.all(20.0),
        alignment: Alignment.topCenter,
        child: Text.rich(
          TextSpan(
            text:
                "Xin lỗi! Tính năng này đang được hoàn thiện. Vui lòng phản hồi với chúng tôi qua các kênh trực tiếp.",
            style: TextStyle(fontSize: 16.0),
            children: <TextSpan>[
              TextSpan(
                  text: "TẠI ĐÂY",
                  style: TextStyle(color: Colors.blue),
                  recognizer: TapGestureRecognizer()
                    ..onTap = () {
                      Navigator.of(context).pushNamed("/account/about");
                    }),
            ],
          ),
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}


import 'dart:io';

import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';

import '../blocs/account/account_blocs.dart';
import '../dto/user_doc_dto.dart';
import '../models/user_repo.dart';
import '../widgets/loading_widget.dart';
import 'loading.dart';

class AccountDocsScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountDocsScreen();
}

class _AccountDocsScreen extends State<AccountDocsScreen> {
  AccountBloc accountBloc;
  List<UserDocDTO> userDocs;
  final ImagePicker _imagePicker = ImagePicker();

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final userRepo = RepositoryProvider.of<UserRepository>(context);
    accountBloc = AccountBloc(userRepository: userRepo);
  }

  @override
  Widget build(BuildContext context) {
    final token = ModalRoute.of(context).settings.arguments;
    accountBloc..add(AccLoadDocsEvent(token: token));
    return Scaffold(
      appBar: AppBar(
        title: Text("Quản lý chứng chỉ"),
        centerTitle: false,
      ),
      body: BlocProvider<AccountBloc>(
        create: (context) => accountBloc,
        child: BlocListener<AccountBloc, AccountState>(
          bloc: accountBloc,
          listener: (context, state) {
            if (state is AccountFailState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text(state.error.toString()),
                ));
            }
          },
          child: BlocBuilder<AccountBloc, AccountState>(
            bloc: accountBloc,
            builder: (context, state) {
              if (state is AccLoadDocsSuccessState) {
                userDocs = state.userDocs;
              }
              if (state is AccAddDocSuccessState) {
                userDocs = state.userDocs;
              }
              if (state is AccRemoveDocSuccessState) {
                userDocs = state.userDocs;
              }
              return userDocs == null
                  ? LoadingScreen()
                  : Container(
                      child: ListView(
                        children: <Widget>[
                              Padding(
                                padding: const EdgeInsets.all(15),
                                child: RaisedButton(
                                  shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(10.0),
                                  ),
                                  color: Colors.blue,
                                  onPressed: () async {
                                    final PickedFile image = await _imagePicker.getImage(
                                      source: ImageSource.camera,
                                    );
                                    if (image != null) {
                                      accountBloc..add(AccAddDocEvent(token: token, file: File(image.path)));
                                    }
                                  },
                                  child: (state is AccAddDocLoadingState)
                                      ? LoadingWidget(
                                          color: Colors.white,
                                        )
                                      : Text(
                                          "Thêm chứng chỉ mới",
                                          style: TextStyle(color: Colors.white),
                                        ),
                                ),
                              ),
                              Divider(thickness: 10),
                            ] +
                            (userDocs == null
                                ? []
                                : userDocs
                                    .map((e) => e == null
                                        ? null
                                        : Container(
                                            height: 200,
                                            padding: EdgeInsets.only(bottom: 5),
                                            child: ListTile(
                                              onTap: () {
                                                showDialog(
                                                    context: context,
                                                    builder: (context) => SimpleDialog(
                                                          children: <Widget>[
                                                            CustomCachedImage(url: e.data),
                                                            FlatButton(
                                                                onPressed: () {
                                                                  Navigator.of(context).pop();
                                                                },
                                                                child: Text("Đóng"))
                                                          ],
                                                        ));
                                              },
                                              title: CustomCachedImage(url: e.data),
                                              trailing: IconButton(
                                                  icon: Icon(Icons.delete),
                                                  onPressed: () {
                                                    showDialog(
                                                      context: context,
                                                      builder: (context) => AlertDialog(
                                                          content: Text("Bạn có muốn xóa file này"),
                                                          actions: [
                                                            FlatButton(
                                                              onPressed: () {
                                                                Navigator.of(context).pop();
                                                              },
                                                              child: Text("Bỏ qua"),
                                                            ),
                                                            RaisedButton(
                                                                onPressed: () {
                                                                  accountBloc
                                                                    ..add(
                                                                        AccRemoveDocEvent(token: token, fileId: e.id));
                                                                  Navigator.of(context).pop();
                                                                },
                                                                color: Colors.red,
                                                                child: Text("Xóa"))
                                                          ]),
                                                    );
                                                  }),
                                            ),
                                          ))
                                    .toList()),
                      ),
                    );
            },
          ),
        ),
      ),
    );
  }
}


import 'dart:io';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
// import 'package:flutter_html_editor/html_editor.dart';
import 'package:image_picker/image_picker.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:validators/validators.dart' as validator;

import '../blocs/account/account_bloc.dart';
import '../blocs/account/account_event.dart';
import '../blocs/account/account_state.dart';
import '../blocs/auth/auth_blocs.dart';
import '../customs/feedback.dart';
import '../dto/const.dart';
import '../dto/user_dto.dart';
import '../models/user_repo.dart';
import '../widgets/loading_widget.dart';

class AccountEditScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountEditScreen();
}

class _AccountEditScreen extends State<AccountEditScreen> {
  // GlobalKey<HtmlEditorState> keyEditor = GlobalKey<HtmlEditorState>();
  // GlobalKey<HtmlEditorState> keyEditor = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  UserDTO _user;
  File _image;
  AccountBloc accountBloc;
  AuthBloc _authBloc;
  final ImagePicker _imagePicker = ImagePicker();

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final userRepo = RepositoryProvider.of<UserRepository>(context);
    accountBloc = AccountBloc(userRepository: userRepo);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent(isFull: true));
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;

    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popUntil(ModalRoute.withName("/"));
        }
        if (state is AuthSuccessState) {
          accountBloc..add(AccInitPageEvent(user: state.user));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          centerTitle: false,
          title: Text("Thông tin cá nhân"),
          actions: <Widget>[
            IconButton(
                icon: Icon(Icons.save),
                onPressed: () async {
                  if (_formKey.currentState.validate()) {
                    _formKey.currentState.save();
                    _user.fullContent = ""; //await keyEditor.currentState.getText();
                    accountBloc..add(AccEditSubmitEvent(user: _user, token: _user.token));
                  }
                })
          ],
        ),
        body: BlocProvider<AccountBloc>(
          create: (context) => accountBloc,
          child: BlocListener<AccountBloc, AccountState>(
            bloc: accountBloc,
            listener: (context, state) {
              if (state is AccountFailState) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text(state.error),
                  ));
              }
              if (state is UploadAvatarSuccessState) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text("Cập nhật avatar thành công."),
                  ));
                _authBloc..add(AuthCheckEvent());
              }
              if (state is UploadBannerSuccessState) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text("Cập nhật banner thành công."),
                  ));
                _authBloc..add(AuthCheckEvent());
              }
              if (state is AccEditSaveSuccessState) {
                _authBloc..add(AuthCheckEvent());
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    duration: Duration(seconds: 1),
                    content: Text("Cập nhật thông tin thành công."),
                  )).closed.then((value) {
                    Navigator.of(context).pop();
                  });
              }
            },
            child: BlocBuilder<AccountBloc, AccountState>(
              bloc: accountBloc,
              builder: (context, state) {
                if (state is AccInitPageSuccess) {
                  _user = state.user;
                }
                return _user != null
                    ? CustomFeedback(
                        user: _user,
                        child: Form(
                          key: _formKey,
                          child: ListView(
                            children: <Widget>[
                              Container(
                                padding: EdgeInsets.fromLTRB(15.0, 10.0, 15.0, 10.0),
                                decoration: BoxDecoration(
                                  color: Colors.grey[100],
                                ),
                                child: Text(
                                  "Chỉnh sửa thông tin cá nhân của bạn",
                                  style:
                                      TextStyle(fontSize: 12.0, fontWeight: FontWeight.bold, color: Colors.grey[600]),
                                ),
                              ),
                              Stack(
                                children: [
                                  _bannerBox(width / 2),
                                  _imageBox(width / 3),
                                ],
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.name,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.name = value;
                                    });
                                  },
                                  validator: (String value) {
                                    if (value.length < 3) {
                                      return "Tên của bạn cần lớn hơn 3 kí tự";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Họ & Tên",
                                    icon: Icon(MdiIcons.account),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.refcode,
                                  validator: (String value) {
                                    if (value.length < 6) {
                                      return "Mã giới thiệu cần lớn hơn 6 kí tự";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  onSaved: (value) {
                                    setState(() {
                                      _user.refcode = value;
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Mã giới thiệu của bạn",
                                    icon: Icon(MdiIcons.qrcode),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.title,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.title = value;
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Chức danh" +
                                        (_user.role == MyConst.ROLE_SCHOOL ? " & Tên người đại diện" : ""),
                                    icon: Icon(MdiIcons.officeBuilding),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.phone,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.phone = value;
                                    });
                                  },
                                  validator: (String value) {
                                    if (!validator.isNumeric(value)) {
                                      return "Số điện thoại không đúng";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  keyboardType: TextInputType.phone,
                                  decoration: InputDecoration(
                                    labelText: "Số điện thoại",
                                    icon: Icon(MdiIcons.phone),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.email,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.email = value;
                                    });
                                  },
                                  validator: (String value) {
                                    if (!validator.isEmail(value)) {
                                      return "Email không đúng";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  keyboardType: TextInputType.emailAddress,
                                  decoration: InputDecoration(
                                    labelText: "Email",
                                    icon: Icon(MdiIcons.email),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.address,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.address = value;
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Địa chỉ",
                                    icon: Icon(MdiIcons.map),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  initialValue: _user.country,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.country = value;
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Quốc gia",
                                    icon: Icon(MdiIcons.earth),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0),
                                child: TextFormField(
                                  maxLines: 3,
                                  initialValue: _user.introduce,
                                  onSaved: (value) {
                                    setState(() {
                                      _user.introduce = value;
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Giới thiệu ngắn",
                                    icon: Icon(MdiIcons.information),
                                  ),
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(left: 15.0, right: 15.0, top: 15),
                                child: Text("Thông tin giới thiệu vui lòng cập nhật từ website"),
                              ),
                              // Padding(
                              //   padding: const EdgeInsets.only(left: 30.0, right: 30.0, top: 15),
                              //   child: HtmlEditor(
                              //     // hint: "Thông tin giới thiệu",
                              //     value: _user.fullContent ?? "",
                              //     key: keyEditor,
                              //     height: 400,
                              //     showBottomToolbar: true,
                              //   ),

                              // ),
                              Container(
                                height: 48.0,
                                margin: const EdgeInsets.all(15.0),
                                child: RaisedButton(
                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
                                  color: Colors.blue,
                                  onPressed: () async {
                                    if (_formKey.currentState.validate()) {
                                      _user.fullContent = ""; //await keyEditor.currentState.getText();
                                      _formKey.currentState.save();
                                      accountBloc..add(AccEditSubmitEvent(user: _user, token: _user.token));
                                    }
                                  },
                                  child: BlocBuilder(
                                    bloc: accountBloc,
                                    builder: (context, state) {
                                      if (state is AccEditSavingState) {
                                        return LoadingWidget();
                                      }
                                      return Text(
                                        "Lưu thay đổi",
                                        style: TextStyle(fontSize: 16.0, color: Colors.white),
                                      );
                                    },
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      )
                    : LoadingWidget();
              },
            ),
          ),
        ),
      ),
    );
  }

  Future _getBanner() async {
    final PickedFile image = await _imagePicker.getImage(
      source: ImageSource.gallery,
    );
    if (image != null) {
      accountBloc..add(AccChangeBannerEvent(token: _user.token, file: File(image.path)));
    }
  }

  Future _getAvatar({bool fromCamera: false}) async {
    final PickedFile image = await _imagePicker.getImage(
      source: fromCamera ? ImageSource.camera : ImageSource.gallery,
    );

    if (image != null) {
      accountBloc..add(AccChangeAvatarEvent(token: _user.token, file: File(image.path)));
    }
  }

  Widget _imageBox(double size) {
    return Stack(
      alignment: Alignment.bottomCenter,
      children: <Widget>[
        Container(
          padding: EdgeInsets.only(top: size, left: size, right: size),
          child: CircleAvatar(
            backgroundColor: Colors.green,
            radius: size / 2,
            child: (_user.image != null && _user.image != "")
                ? CircleAvatar(
                    radius: size / 2 - 2.0,
                    backgroundImage: CachedNetworkImageProvider(_user.image),
                  )
                : Icon(Icons.account_circle),
          ),
        ),
        BlocBuilder(
          bloc: accountBloc,
          builder: (context, state) {
            if (state is UploadAvatarInprogressState) {
              return LoadingWidget();
            }
            return IconButton(
              icon: Icon(Icons.camera_alt),
              iconSize: 28.0,
              color: Colors.grey,
              onPressed: () {
                showDialog(
                    context: context,
                    builder: (context) {
                      return SimpleDialog(children: <Widget>[
                        ListTile(
                            title: Text("Chụp ảnh bằng camera"),
                            onTap: () {
                              _getAvatar(fromCamera: true);
                              Navigator.pop(context);
                            }),
                        Divider(),
                        ListTile(
                            title: Text("Chọn ảnh từ thư viện"),
                            onTap: () {
                              _getAvatar(fromCamera: false);
                              Navigator.pop(context);
                            }),
                      ]);
                    });
              },
            );
          },
        ),
      ],
    );
  }

  Widget _bannerBox(double size) {
    return Container(
        height: size,
        width: double.infinity,
        alignment: Alignment.bottomRight,
        decoration: _user.banner != null
            ? BoxDecoration(
                image: DecorationImage(
                  image: CachedNetworkImageProvider(_user.banner),
                  fit: BoxFit.cover,
                ),
              )
            : BoxDecoration(color: Colors.grey[300]),
        child: BlocBuilder(
          bloc: accountBloc,
          builder: (context, state) {
            if (state is UploadBannerInprogressState) {
              return LoadingWidget();
            }
            return IconButton(
              icon: Icon(Icons.camera_alt),
              iconSize: 28.0,
              color: Colors.grey,
              onPressed: () {
                _getBanner();
              },
            );
          },
        ));
  }
}


import 'dart:math' as math;

import 'package:anylearn/dto/const.dart';
import 'package:anylearn/dto/user_dto.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/account/account_blocs.dart';
import '../blocs/auth/auth_blocs.dart';
import '../customs/feedback.dart';
import '../dto/friend_params_dto.dart';
import '../dto/friends_dto.dart';
import '../models/user_repo.dart';
import '../widgets/loading_widget.dart';
import 'account/app_bar_with_image.dart';

class AccountFriendsScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountFriendsScreen();
}

class _AccountFriendsScreen extends State<AccountFriendsScreen> {
  FriendsDTO _data;
  AccountBloc _accountBloc;
  AuthBloc _authBloc;
  UserDTO _user;

  @override
  void didChangeDependencies() {
    final userRepo = RepositoryProvider.of<UserRepository>(context);
    _accountBloc = AccountBloc(userRepository: userRepo);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());

    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    var args = ModalRoute.of(context).settings.arguments;
    FriendParamsDTO param;
    if (args is String) {
      param = FriendParamsDTO(level: 1, userId: int.parse(args));
    } else {
      param = args;
    }
    // var moneyFormat = new NumberFormat("###,###,###", "vi_VN");
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popUntil(ModalRoute.withName("/"));
          Navigator.of(context).pushNamed("/login");
        }
        if (state is AuthSuccessState) {
          _user = state.user;
          _accountBloc.add(AccLoadFriendsEvent(token: state.user.token, userId: param.userId));
        }
      },
      child: Scaffold(
        body: BlocProvider<AccountBloc>(
          create: (context) => _accountBloc,
          child: BlocListener<AccountBloc, AccountState>(
            listener: (context, state) {
              if (state is AccountFailState) {
                Navigator.of(context).pop();
              }
            },
            child: BlocBuilder<AccountBloc, AccountState>(builder: (context, state) {
              if (state is AccFriendsLoadSuccessState) {
                _data = state.friends;
              }
              return _data == null
                  ? LoadingWidget()
                  : CustomFeedback(
                      user: _user,
                      child: CustomScrollView(
                        slivers: <Widget>[
                          AccountAppBarWithImage(user: _data.user),
                          SliverToBoxAdapter(
                            child: Container(
                              padding: EdgeInsets.fromLTRB(20.0, 10.0, 20.0, 10.0),
                              decoration: BoxDecoration(
                                color: Colors.grey[100],
                              ),
                              child: Text("Bạn bè của " + _data.user.name + " (MGT: " + _data.user.refcode + ")",
                                  style:
                                      TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold, color: Colors.grey[600])),
                            ),
                          ),
                          // SliverToBoxAdapter(
                          //   child: Container(
                          //       padding: EdgeInsets.fromLTRB(20.0, 10.0, 20.0, 10.0),
                          //       decoration: BoxDecoration(
                          //           // color: Colors.grey[100],
                          //           ),
                          //       child: Row(children: [
                          //         Icon(
                          //           Icons.info,
                          //           color: Colors.grey,
                          //           size: 12.0,
                          //         ),
                          //         Expanded(
                          //           child: Text("Chạm để xem bạn bè liên kết. Giữ để xem thông tin cá nhân.",
                          //               style: TextStyle(
                          //                   fontSize: 12.0, fontWeight: FontWeight.bold, color: Colors.grey[600])),
                          //         ),
                          //       ])),
                          // ),
                          _data.friends != null && _data.friends.length > 0
                              ? SliverList(
                                  delegate: SliverChildBuilderDelegate(
                                    (context, index) {
                                      final itemIndex = index ~/ 2;
                                      if (index.isEven) {
                                        return ListTile(
                                          leading: _data.friends[itemIndex].image != null &&
                                                  _data.friends[itemIndex].image.isNotEmpty
                                              ? CircleAvatar(
                                                  radius: 28,
                                                  backgroundColor: _roleColor(_data.friends[itemIndex].role),
                                                  child: CircleAvatar(
                                                      radius: 27,
                                                      backgroundImage:
                                                          CachedNetworkImageProvider(_data.friends[itemIndex].image)),
                                                )
                                              : Icon(
                                                  Icons.account_circle,
                                                  size: 56.0,
                                                  color: _roleColor(
                                                    _data.friends[itemIndex].role,
                                                  ),
                                                ),
                                          title: Text(_data.friends[itemIndex].name),
                                          subtitle: _data.friends[itemIndex].title != null
                                              ? Text(_data.friends[itemIndex].title)
                                              : SizedBox(height: 0),
                                          trailing: SizedBox(
                                              width: 80.0,
                                              child: Row(mainAxisAlignment: MainAxisAlignment.end, children: [
                                                Text(_data.friends[itemIndex].numFriends.toString() + " bạn "),
                                                Icon(Icons.chevron_right),
                                              ])),
                                          // onTap: () {
                                          //   if (param.level < 1) {
                                          //     Navigator.of(context).pushNamed("/account/friends",
                                          //         arguments: FriendParamsDTO(
                                          //             userId: _data.friends[itemIndex].id, level: param.level + 1));
                                          //   } else {
                                          //     showDialog(
                                          //         context: context,
                                          //         child: AlertDialog(
                                          //           content: Text(
                                          //               "Bạn không thể xem thêm bạn bè, đây là nhánh liên kết cuối của bạn, hãy chia sẻ MÃ GIỚI THIỆU để có thêm nhiều bạn cùng học hơn!!!"),
                                          //           actions: <Widget>[
                                          //             FlatButton(
                                          //                 onPressed: () {
                                          //                   Navigator.of(context).pop();
                                          //                 },
                                          //                 child: Text("Đã hiểu")),
                                          //             RaisedButton(
                                          //               shape: RoundedRectangleBorder(
                                          //                 borderRadius: BorderRadius.circular(10.0),
                                          //               ),
                                          //               color: Colors.blue,
                                          //               onPressed: () {
                                          //                 Navigator.of(context).pop();
                                          //                 Navigator.of(context).pushNamed("/qrcode",
                                          //                     arguments: _data.friends[itemIndex].id);
                                          //               },
                                          //               child: Text("GIỚI THIỆU BẠN BÈ"),
                                          //             )
                                          //           ],
                                          //         ));
                                          //   }
                                          // },
                                          onTap: () {
                                            if (_data.friends[itemIndex].role == MyConst.ROLE_SCHOOL) {
                                              Navigator.of(context)
                                                  .pushNamed("/items/school", arguments: _data.friends[itemIndex].id);
                                            } else if (_data.friends[itemIndex].role == MyConst.ROLE_TEACHER) {
                                              Navigator.of(context)
                                                  .pushNamed("/items/teacher", arguments: _data.friends[itemIndex].id);
                                            } else {
                                              Navigator.of(context)
                                                  .pushNamed("/profile", arguments: _data.friends[itemIndex].id);
                                            }
                                          },
                                        );
                                      }
                                      return Divider(
                                        height: 0.0,
                                      );
                                    },
                                    semanticIndexCallback: (Widget widget, int localIndex) {
                                      if (localIndex.isEven) {
                                        return localIndex ~/ 2;
                                      }
                                      return null;
                                    },
                                    childCount: math.max(0, _data.friends.length * 2 - 1),
                                  ),
                                )
                              : SliverToBoxAdapter(
                                  child: Container(
                                    padding: EdgeInsets.all(20),
                                    child: param.level == 1
                                        ? Text.rich(
                                            TextSpan(
                                              text: "Hiện tại chưa có bạn nào.",
                                              style: TextStyle(fontSize: 16.0),
                                              children: <TextSpan>[
                                                TextSpan(
                                                    text: " CHIA SẺ MÃ GIỚI THIỆU",
                                                    style: TextStyle(color: Colors.blue),
                                                    recognizer: TapGestureRecognizer()
                                                      ..onTap = () {
                                                        Navigator.of(context).pushNamed("/qrcode");
                                                      }),
                                                TextSpan(text: " để có thêm bạn nhé.")
                                              ],
                                            ),
                                            textAlign: TextAlign.center,
                                          )
                                        : Text("Chưa có bạn nào."),
                                  ),
                                ),
                        ],
                      ),
                    );
            }),
          ),
        ),
      ),
    );
  }

  Color _roleColor(String role) {
    switch (role) {
      case "teacher":
        return Colors.orange;
      case "school":
        return Colors.blue;
      default:
        return Colors.green;
    }
  }
}


import 'package:anylearn/screens/webview.dart';
import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:intl/intl.dart';

import '../dto/guide_dto.dart';

class AccountHelpCenterScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountHelpCenterScreen();
}

class _AccountHelpCenterScreen extends State<AccountHelpCenterScreen> {
  final GuideDTO guide = GuideDTO(
    title: "HDSD Cho thành viên",
    content:
        "<p>Content in html</p><p> Has Image <img src=\"https://scholarship-positions.com/wp-content/uploads/2020/01/Free-Online-Course-on-Learning-to-Teach-Online.jpg\" /> </p>",
    lastUpdate: "2020-05-19 19:00:00",
  );
  @override
  Widget build(BuildContext context) {
    DateFormat f = DateFormat("dd/MM/yyyy");
    return Scaffold(
        appBar: AppBar(
          centerTitle: false,
          title: Text("Hướng dẫn sử dụng"),
        ),
        body: ListView(
          children: <Widget>[
            Container(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Container(
                    padding: EdgeInsets.fromLTRB(20.0, 10.0, 20.0, 10.0),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                    ),
                    child: Text(
                      guide.title,
                      style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.bold, color: Colors.grey[600]),
                    ),
                  ),
                  Html(
                    data: guide.content,
                    shrinkWrap: true,
                    onLinkTap: (String url, _, __, ___) {
                      Navigator.of(context).push(MaterialPageRoute(
                          builder: (context) => WebviewScreen(
                                url: url,
                              )));
                    },
                  ),
                  Divider(),
                  Container(
                    alignment: Alignment.topRight,
                    padding: EdgeInsets.only(right: 10.0),
                    child: Text(
                      " Cập nhật ngày: " + f.format(DateTime.parse(guide.lastUpdate)),
                      style: TextStyle(fontStyle: FontStyle.italic, fontSize: 10.0),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ));
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import '../blocs/account/account_blocs.dart';
import '../blocs/auth/auth_blocs.dart';
import '../widgets/loading_widget.dart';

class AccountPasswordScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountPasswordScreen();
}

class _AccountPasswordScreen extends State<AccountPasswordScreen> {
  final _formKey = GlobalKey<FormState>();
  String oldPassword;
  String newPassword;
  String confirmPassword;
  AccountBloc _accountBloc;
  AuthBloc _authBloc;
  bool loading = false;

  @override
  void didChangeDependencies() {
    _accountBloc = BlocProvider.of<AccountBloc>(context);
    _authBloc = BlocProvider.of<AuthBloc>(context);

    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    final token = ModalRoute.of(context).settings.arguments;
    return Scaffold(
      appBar: AppBar(
        centerTitle: false,
        title: Text("Đổi mật khẩu"),
      ),
      body: BlocListener(
        bloc: _accountBloc,
        listener: (context, state) {
          setState(() {
            loading = false;
          });
          if (state is AccChangePassSuccessState) {
            ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                duration: Duration(seconds: 4),
                content: Text("Mật khẩu đã được thay đổi. Vui lòng đăng nhập lại."),
              )).closed.then((value) {
                Navigator.of(context).pop();
                _authBloc.add(AuthLoggedOutEvent(token: token));
              });
          }
          if (state is AccChangePassFailState) {
            ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                duration: Duration(seconds: 4),
                content: Text(state.error),
              ));
          }
        },
        child: Form(
          key: _formKey,
          child: ListView(
            children: <Widget>[
              Container(
                padding: EdgeInsets.fromLTRB(20.0, 10.0, 20.0, 10.0),
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                ),
                child: Text(
                  "Đổi mật khẩu của bạn",
                  style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.bold, color: Colors.grey[600]),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 15.0, right: 30.0),
                child: TextFormField(
                  onSaved: (value) {
                    setState(() {
                      oldPassword = value.trim();
                    });
                  },
                  validator: (String value) {
                    if (value.isEmpty) {
                      return "Mật khẩu cũ là bắt buộc";
                    }
                    _formKey.currentState.save();
                    return null;
                  },
                  decoration: InputDecoration(
                    labelText: "Mật khẩu cũ",
                    icon: Icon(MdiIcons.keyRemove),
                  ),
                  obscureText: true,
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 15.0, right: 30.0),
                child: TextFormField(
                  onSaved: (value) {
                    setState(() {
                      newPassword = value.trim();
                    });
                  },
                  validator: (String value) {
                    if (value.length < 8) {
                      return "Mật khẩu ít nhất 8 kí tự";
                    }
                    _formKey.currentState.save();
                    return null;
                  },
                  decoration: InputDecoration(
                    labelText: "Mật khẩu mới",
                    icon: Icon(MdiIcons.formTextboxPassword),
                  ),
                  obscureText: true,
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(left: 15.0, right: 30.0),
                child: TextFormField(
                  onSaved: (value) {
                    setState(() {
                      confirmPassword = value.trim();
                    });
                  },
                  validator: (String value) {
                    if (value != newPassword) {
                      return "Xác nhận mât khẩu không đúng";
                    }
                    _formKey.currentState.save();
                    return null;
                  },
                  decoration: InputDecoration(
                    labelText: "Nhập lại mật khẩu mới",
                    icon: Icon(MdiIcons.formTextboxPassword),
                  ),
                  obscureText: true,
                ),
              ),
              Container(
                height: 36.0,
                margin: const EdgeInsets.only(left: 20.0, right: 20.0, top: 30.0),
                child: loading
                    ? LoadingWidget()
                    : RaisedButton(
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15.0)),
                        color: Colors.blue,
                        onPressed: () {
                          if (_formKey.currentState.validate() && !loading) {
                            _formKey.currentState.save();
                            _accountBloc
                              ..add(AccChangePassEvent(
                                token: token,
                                newPass: newPassword,
                                oldPass: oldPassword,
                              ));
                            setState(() {
                              loading = true;
                            });
                          }
                        },
                        child: Text(
                          "Đổi mật khẩu",
                          style: TextStyle(fontSize: 16.0, color: Colors.white),
                        ),
                      ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:anylearn/widgets/bottom_nav.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import '../blocs/account/account_blocs.dart';
import '../customs/custom_cached_image.dart';
import '../dto/const.dart';
import '../dto/hot_items_dto.dart';
import '../dto/user_dto.dart';
import '../models/user_repo.dart';
import '../widgets/fab_home.dart';
import '../widgets/hot_items.dart';
import '../widgets/loading_widget.dart';
import 'account/user_doc_list.dart';
import 'webview.dart';

class AccountProfileScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountProfileScreen();
}

class _AccountProfileScreen extends State<AccountProfileScreen> {
  AccountBloc _accountBloc;
  UserDTO user;

  @override
  void didChangeDependencies() {
    final _userRepo = RepositoryProvider.of<UserRepository>(context);
    int userId = ModalRoute.of(context).settings.arguments;
    if (userId == null) {
      Navigator.of(context).pop();
    } else {
      _accountBloc = AccountBloc(userRepository: _userRepo)..add(AccProfileEvent(userId: userId));
    }
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    return Scaffold(
      appBar: AppBar(
        actions: [
          IconButton(
              icon: Icon(Icons.menu),
              onPressed: () {
                Navigator.of(context).pushNamed("/account");
              })
        ],
      ),
      floatingActionButton: FloatingActionButtonHome(),
      floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
      bottomNavigationBar: BottomNav(
        route: BottomNav.PROFILE_INDEX,
        user: user,
      ),
      body: BlocBuilder<AccountBloc, AccountState>(
        bloc: _accountBloc,
        builder: (context, state) {
          if (state is AccProfileSuccessState) {
            user = state.user;
            return ListView(children: [
              Stack(
                children: [
                  _bannerBox(width / 2),
                  _imageBox(width / 3),
                ],
              ),
              Text(
                user.name,
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 20,
                ),
              ),
              user.role != MyConst.ROLE_SCHOOL
                  ? Text(
                      user.title ?? "",
                      textAlign: TextAlign.center,
                      style: TextStyle(),
                    )
                  : SizedBox(height: 0),
              Container(
                padding: EdgeInsets.all(15),
                child: Text(user.introduce ?? "",
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontStyle: FontStyle.italic,
                      fontSize: 12,
                      color: Colors.blue,
                    )),
              ),
              user.role == MyConst.ROLE_SCHOOL && user.title != null
                  ?
                  // Container(
                  //     padding: EdgeInsets.only(left: 15, right: 15),
                  //     child: Text.rich(TextSpan(text: "Người đại diện: ", children: [TextSpan(text: user.title)])))
                  ListTile(
                      dense: true,
                      contentPadding: EdgeInsets.only(top: 0, bottom: 0, left: 15, right: 15),
                      leading: Icon(MdiIcons.shieldAccount),
                      title: Text("Người đại diện: " + user.title),
                      isThreeLine: false,
                    )
                  : SizedBox(height: 0),
              user.address != null
                  ? ListTile(
                      dense: true,
                      contentPadding: EdgeInsets.only(top: 0, bottom: 0, left: 15, right: 15),
                      leading: Icon(MdiIcons.mapMarker),
                      title: Text(user.address),
                      isThreeLine: false,
                    )
                  : SizedBox(height: 0),
              user.docs == null || user.docs.length == 0
                  ? SizedBox(height: 0)
                  : Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        Divider(),
                        Padding(
                          padding: const EdgeInsets.only(left: 15, right: 15),
                          child: Text(
                            "Chứng chỉ",
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                        )
                      ],
                    ),
              Padding(
                padding: const EdgeInsets.only(left: 15, right: 15),
                child:
                    user.docs == null || user.docs.length == 0 ? SizedBox(height: 0) : UserDocList(userDocs: user.docs),
              ),
              (user.registered == null || user.registered.length == 0)
                  ? SizedBox(height: 0)
                  : Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Divider(
                        //   thickness: 10,
                        // ),
                        HotItems(
                          hotItems: [HotItemsDTO(title: "Các khoá học đã đăng ký", list: user.registered)],
                        ),
                      ],
                    ),
              (user.faved == null || user.faved.length == 0)
                  ? SizedBox(height: 0)
                  : Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Divider(
                        //   thickness: 10,
                        // ),
                        HotItems(
                          hotItems: [HotItemsDTO(title: "Các khoá học đang quan tâm", list: user.faved)],
                        ),
                      ],
                    ),
              (user.rated == null || user.rated.length == 0)
                  ? SizedBox(height: 0)
                  : Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Divider(
                        //   thickness: 10,
                        // ),
                        HotItems(
                          hotItems: [HotItemsDTO(title: "Các khoá học đã đánh giá", list: user.rated)],
                        ),
                      ],
                    ),
              user.fullContent == null
                  ? SizedBox(height: 0)
                  : Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Divider(
                          thickness: 10,
                        ),
                        Padding(
                          padding: const EdgeInsets.all(15),
                          child: Html(
                            data: user.fullContent,
                            shrinkWrap: true,
                            onLinkTap: (String url, _, __, ___) {
                              Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => WebviewScreen(
                                        url: url,
                                      )));
                            },
                          ),
                        ),
                      ],
                    ),
            ]);
          }
          return LoadingWidget();
        },
      ),
    );
  }

  Widget _imageBox(double size) {
    return Stack(
      alignment: Alignment.bottomCenter,
      children: <Widget>[
        Container(
          padding: EdgeInsets.only(top: size, left: size, right: size),
          child: CircleAvatar(
            backgroundColor: Colors.white,
            radius: size / 2,
            child: (user.image != null && user.image != "")
                ? CircleAvatar(radius: size / 2 - 2.0, backgroundImage: CachedNetworkImageProvider(user.image))
                : Icon(
                    Icons.account_circle,
                    size: size,
                    color: Colors.grey,
                  ),
          ),
        ),
      ],
    );
  }

  Widget _bannerBox(double size) {
    return Container(
      height: size,
      width: double.infinity,
      alignment: Alignment.bottomRight,
      color: Colors.grey[200],
      child: user.banner != null ? CustomCachedImage(url: user.banner) : SizedBox(height: size),
    );
  }
}


import 'package:flutter/material.dart';

import '../../blocs/article/article_blocs.dart';
import '../../dto/article_dto.dart';
import '../../dto/const.dart';
import '../../dto/user_dto.dart';
import '../ask_form.dart';
import 'ask_forum_list.dart';
import 'ask_header.dart';
import 'ask_list.dart';

class AskBody extends StatelessWidget {
  final ArticleHomeDTO data;
  final UserDTO user;
  final ArticleBloc articleBloc;

  const AskBody({Key key, this.data, this.user, this.articleBloc}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CustomScrollView(
      slivers: <Widget>[
        // SliverToBoxAdapter(child: Container(child: Image.asset("assets/banners/ask_banner.jpg"))),

        SliverToBoxAdapter(
          child: Container(
            height: 80,
            padding: EdgeInsets.all(15),
            child: TextFormField(
              onTap: () async {
                if (user == null) {
                  Navigator.of(context).pushNamed("/login");
                } else {
                  final result = await Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                    return AskFormScreen(
                      user: user,
                      askBloc: articleBloc,
                      askId: 0,
                      type: MyConst.ASK_QUESTION,
                    );
                  }));
                  if (result == true) {
                    // _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(AskIndexEvent());
                  }
                }
              },
              decoration: InputDecoration(
                filled: true,
                fillColor: Colors.white,
                contentPadding: const EdgeInsets.symmetric(vertical: 5.0, horizontal: 10),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide(color: Colors.blue[200], width: 3),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: BorderSide(color: Colors.grey, width: 1.0),
                ),
                hintText: "Bạn đang muốn hỏi điều gì ?",
                hintStyle: TextStyle(color: Colors.grey),
                suffixIcon: Icon(Icons.question_answer),
                // onPressed: () {
                //   showSearch(context: context, delegate: CustomSearchDelegate(screen: ""), query: searchController.text);
                // },
                // ),
              ),
            ),
          ),
        ),
        SliverToBoxAdapter(
          child: AskHeader(
            title: "Hỏi để Học".toUpperCase(),
            route: "/ask/forum",
          ),
        ),
        AskForumList(data: data.asks),
        SliverToBoxAdapter(
          child: AskHeader(
            title: "Xem để Học".toUpperCase(),
            type: MyConst.ASK_TYPE_VIDEO,
          ),
        ),
        AskList(data: data.videos),
        SliverToBoxAdapter(
          child: AskHeader(
            title: "Đọc để Học".toUpperCase(),
            type: MyConst.ASK_TYPE_READ,
          ),
        ),
        AskList(data: data.reads),
      ],
    );
  }
}


import 'package:flutter/material.dart';

import '../../blocs/article/article_bloc.dart';
import '../../blocs/article/article_blocs.dart';
import '../../dto/article_dto.dart';
import 'ask_list.dart';

class AskCatBody extends StatelessWidget {
  final ArticlePagingDTO data;
  final type;
  final ArticleBloc articleBloc;
  const AskCatBody({Key key, this.data, this.articleBloc, this.type}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return CustomScrollView(
      slivers: <Widget>[
        SliverToBoxAdapter(child: Container(child: Image.asset("assets/banners/ask_banner.jpg"))),
        AskList(data: data.data),
        SliverToBoxAdapter(
          child: Container(
              child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              data.currentPage > 1
                  ? FlatButton.icon(
                      onPressed: () async {
                        articleBloc..add(ArticleTypeEvent(type: type, page: (data.currentPage - 1)));
                      },
                      icon: Icon(Icons.chevron_left),
                      label: Text("TRANG TRƯỚC", style: TextStyle(color: Colors.blue),),
                    )
                  : SizedBox(height: 0),
              data.lastPage > data.currentPage
                  ? FlatButton.icon(
                      onPressed: () async {
                        articleBloc..add(ArticleTypeEvent(type: type, page: (data.currentPage + 1)));
                      },
                      icon: Icon(Icons.chevron_right),
                      label: Text("TRANG SAU", style: TextStyle(color: Colors.blue),),
                    )
                  : SizedBox(height: 0),
            ],
          )),
        )
      ],
    );
  }
}




import 'dart:math' as math;

import 'package:anylearn/themes/role_color.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

import '../../dto/ask_dto.dart';
import '../../widgets/time_ago.dart';

class AskForumList extends StatelessWidget {
  final List<AskDTO> data;

  const AskForumList({Key key, this.data}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return data.length == 0
        ? SliverToBoxAdapter(
            child: Container(
              padding: EdgeInsets.all(15),
              child: Text("Chưa có câu hỏi nào")),
          )
        : SliverList(
            delegate: SliverChildBuilderDelegate(
              (context, index) {
                final itemIndex = index ~/ 2;
                if (index.isEven) {
                  return ListTile(
                    title: Text(
                      data[itemIndex].title,
                      style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue, fontSize: 20),
                    ),
                    leading: data[itemIndex].userImage == null
                        ? SizedBox(height: 0)
                        : CircleAvatar(
                            radius: 20,
                            backgroundColor: roleColor(data[itemIndex].userRole),
                            child: CircleAvatar(
                              radius: 18,
                              backgroundImage: CachedNetworkImageProvider(
                                data[itemIndex].userImage,
                              ),
                            ),
                          ),
                    isThreeLine: true,
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          data[itemIndex].content,
                          style: TextStyle(),
                          maxLines: 3,
                          overflow: TextOverflow.ellipsis,
                        ),
                        Align(alignment: Alignment.centerRight, child: TimeAgo(time: data[itemIndex].createdAt))
                      ],
                    ),
                    onTap: () {
                      Navigator.of(context).pushNamed("/ask/forum/thread", arguments: data[itemIndex].id);
                    },
                    trailing: Icon(Icons.chevron_right),
                  );
                }
                return Divider(
                  height: 0.0,
                );
              },
              semanticIndexCallback: (Widget widget, int localIndex) {
                if (localIndex.isEven) {
                  return localIndex ~/ 2;
                }
                return null;
              },
              childCount: math.max(0, data.length * 2 - 1),
            ),
          );
  }
}


import 'package:anylearn/screens/ask_cat.dart';
import 'package:flutter/material.dart';

class AskHeader extends StatelessWidget {
  final String title;
  final String type;
  final String route;

  const AskHeader({Key key, this.title, this.type, this.route}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.fromLTRB(20.0, 10.0, 20.0, 10.0),
      decoration: BoxDecoration(
        color: Colors.grey[100],
      ),
      child: Row(
        children: [
          Expanded(
            child: Text(title, style: TextStyle(fontSize: 14.0, fontWeight: FontWeight.bold)),
          ),
          InkWell(
            child: Text("XEM THÊM", style: TextStyle(color: Colors.blue, fontSize: 12.0)),
            onTap: () {
              if (type != null) {
                Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                  return AskCatScreen(
                    type: type,
                  );
                }));
              } else if (route != null) {
                Navigator.of(context).pushNamed(route);
              }
            },
          )
        ],
      ),
    );
  }
}


import 'dart:math' as math;

import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import '../../dto/article_dto.dart';
import '../../dto/const.dart';
import '../../widgets/youtube_image.dart';

class AskList extends StatelessWidget {
  final List<ArticleDTO> data;

  const AskList({Key key, this.data}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    final height = width * 0.5625;
    final imgHeight = height - 32;
    return SliverList(
      delegate: SliverChildBuilderDelegate(
        (context, index) {
          final itemIndex = index ~/ 2;
          if (index.isEven) {
             return InkWell(
              onTap: () {
                Navigator.of(context).pushNamed("/article", arguments: data[itemIndex].id);
              },
              child: Card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      height: imgHeight,
                      width: double.infinity,
                      child: _articleImg(data[itemIndex]),
                    ),
                    Container(padding: EdgeInsets.all(15), child: Text(data[itemIndex].title, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),)),
                    data[itemIndex].shortContent == null
                        ? SizedBox(height: 0)
                        : Container(
                            padding: EdgeInsets.only(left: 15, right: 15, bottom: 15),
                            child: Text(data[itemIndex].shortContent),
                          ),
                  ],
                ),
              ),
            );
          }
          return Divider(
            height: 0.0,
          );
        },
        semanticIndexCallback: (Widget widget, int localIndex) {
          if (localIndex.isEven) {
            return localIndex ~/ 2;
          }
          return null;
        },
        childCount: math.max(0, data.length * 2 - 1),
      ),
    );
  }

  Widget _buildTypeIcon(ArticleDTO _data) {
    if (_data.image != null) {
      return CachedNetworkImage(imageUrl: _data.image);
    }
    switch (_data.type) {
      case "video":
        return YoutubeImage(link: _data.video);
        break;
      case "read":
        return Icon(
          Icons.chrome_reader_mode,
          size: 32.0,
        );
        break;
      case "forum":
        return Icon(
          Icons.question_answer,
          size: 32.0,
        );
        break;
      default:
        return Icon(
          MdiIcons.cube,
          size: 32.0,
        );
    }
  }

   Widget _articleImg(ArticleDTO articleDTO) {
    if (articleDTO.type == MyConst.ASK_TYPE_VIDEO) {
      return YoutubeImage(
        link: articleDTO.video,
        fit: BoxFit.cover,
      );
    }
    return articleDTO.image == null
        ? SizedBox(height: 0)
        : CachedNetworkImage(
            imageUrl: articleDTO.image,
            fit: BoxFit.cover,
          );
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:anylearn/customs/custom_carousel.dart';
import 'package:anylearn/screens/webview.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';

import '../../dto/article_dto.dart';
import '../../widgets/text2lines.dart';
import '../../widgets/time_ago.dart';

class ContentRead extends StatelessWidget {
  final ArticleDTO data;

  const ContentRead({Key key, this.data}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return ListView(
      children: [
        data.image == null
            ? SizedBox(
                height: 0,
              )
            : CachedNetworkImage(imageUrl: data.image),
        Padding(
          padding: EdgeInsets.only(top: 15.0),
          child: Text2Lines(
            text: data.title,
            fontSize: 16.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        Html(
          data: data.content,
          shrinkWrap: true,
         onLinkTap: (String url, _, __, ___) {
            Navigator.of(context).push(MaterialPageRoute(
                builder: (context) => WebviewScreen(
                      url: url,
                    )));
          },
        ),
        Container(alignment: Alignment.topRight, child: TimeAgo(time: data.createdAt)),
        Divider(),
        Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
          Padding(
            padding: EdgeInsets.fromLTRB(15.0, 15.0, 15.0, 10.0),
            child: Text(
              "Các bài liên quan",
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          CustomCarousel(items: data.related, builderFunction: _itemSlider, height: 170.0),
        ]),
      ],
    );
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    double width = MediaQuery.of(context).size.width;
    width = width - width / 3;
    return InkWell(
      onTap: () {
        Navigator.of(context).pushNamed("/article", arguments: item.id);
      },
      child: Card(
        child: Container(
          alignment: Alignment.topLeft,
          width: width,
          child: Column(
            children: [
              Container(
                height: cardHeight * 2 / 3,
                width: double.infinity,
                child: ClipRRect(
                  borderRadius: BorderRadius.only(topLeft: Radius.circular(7.0), topRight: Radius.circular(7.0)),
                  child: item.image != null && item.image.isNotEmpty
                      ? CustomCachedImage(url: item.image)
                      : Icon(Icons.broken_image),
                ),
              ),
              Container(
                alignment: Alignment.topLeft,
                padding: EdgeInsets.all(15.0),
                child: Text(
                  item.title ?? "",
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:youtube_player_flutter/youtube_player_flutter.dart';

import '../../customs/custom_carousel.dart';
import '../../dto/article_dto.dart';
import '../../widgets/text2lines.dart';
import '../../widgets/time_ago.dart';
import '../../widgets/youtube_image.dart';

class ContentVideo extends StatefulWidget {
  final ArticleDTO data;
  const ContentVideo({Key key, this.data}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _ContentVideo();
}

class _ContentVideo extends State<ContentVideo> {
  YoutubePlayerController _controller;

  @override
  void initState() {
    _controller = YoutubePlayerController(
        initialVideoId: YoutubePlayer.convertUrlToId(widget.data.video), flags: YoutubePlayerFlags());
    super.initState();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return YoutubePlayerBuilder(
      player: YoutubePlayer(
        controller: _controller,
      ),
      builder: (context, player) => ListView(
        children: [
          player,
          Padding(
            padding: EdgeInsets.only(top: 15.0),
            child: Text2Lines(
              text: widget.data.title,
              fontSize: 16.0,
              fontWeight: FontWeight.bold,
            ),
          ),
          widget.data.shortContent == null
              ? SizedBox(height: 0)
              : Padding(
                  padding: EdgeInsets.only(top: 15.0),
                  child: Text(
                    widget.data.shortContent,
                  ),
                ),
          // Text(data.title),
          Container(
            alignment: Alignment.topRight,
            child: TimeAgo(
              time: widget.data.createdAt,
            ),
          ),
          Divider(),

          Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
            Padding(
              padding: EdgeInsets.fromLTRB(15.0, 15.0, 15.0, 10.0),
              child: Text(
                "Các bài liên quan",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
            CustomCarousel(items: widget.data.related, builderFunction: _itemSlider, height: 170.0),
          ]),
        ],
      ),
    );
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    double width = MediaQuery.of(context).size.width;
    width = width - width / 3;
    return InkWell(
      onTap: () {
        Navigator.of(context).pushNamed("/article", arguments: item.id);
      },
      child: Card(
        child: Container(
          alignment: Alignment.topLeft,
          width: width,
          child: Column(
            children: [
              Container(
                height: cardHeight * 2 / 3,
                width: double.infinity,
                child: ClipRRect(
                    borderRadius: BorderRadius.only(topLeft: Radius.circular(7.0), topRight: Radius.circular(7.0)),
                    child: YoutubeImage(
                      link: item.video,
                      fit: BoxFit.cover,
                    )),
              ),
              Container(
                alignment: Alignment.topLeft,
                padding: EdgeInsets.all(15.0),
                child: Text(
                  item.title ?? "",
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/article/article_bloc.dart';
import '../blocs/article/article_blocs.dart';
import '../blocs/auth/auth_blocs.dart';
import '../dto/article_dto.dart';
import '../dto/user_dto.dart';
import '../main.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import '../widgets/loading_widget.dart';
import 'ask/ask_body.dart';
import 'loading.dart';

class AskScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AskScreen();
}

class _AskScreen extends State<AskScreen> {
  ArticleHomeDTO data;
  UserDTO _user;
  AuthBloc _authBloc;
  ArticleBloc _articleBloc;

  @override
  void didChangeDependencies() {
    _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(ArticleIndexEvent());
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthBloc, AuthState>(
      bloc: _authBloc,
      builder: (context, state) {
        if (state is AuthSuccessState) {
          _user = state.user;
        }
        if (state is AuthInProgressState) {
          return LoadingScreen();
        }
        return Scaffold(
          appBar: BaseAppBar(
            title: "Học & Hỏi",
          ),
          body: RefreshIndicator(
            onRefresh: () async {
              _articleBloc..add(ArticleIndexEvent());
            },
            child: BlocBuilder(
                bloc: _articleBloc,
                builder: (context, state) {
                  if (state is ArticleIndexSuccessState) {
                    data = state.result;
                  }
                  return data == null
                      ? LoadingWidget()
                      : AskBody(
                          data: data,
                          user: _user,
                          articleBloc: _articleBloc,
                        );
                }),
          ),
          floatingActionButton: FloatingActionButtonHome(),
          floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
          bottomNavigationBar: BottomNav(
            route: BottomNav.ASK_INDEX,
            user: user,
          ),
        );
      },
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/article/article_blocs.dart';
import '../dto/article_dto.dart';
import '../dto/const.dart';
import '../main.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import '../widgets/loading_widget.dart';
import 'ask/ask_cat_body.dart';

class AskCatScreen extends StatefulWidget {
  final type;

  const AskCatScreen({Key key, this.type}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _AskCatScreen();
}

class _AskCatScreen extends State<AskCatScreen> {
  ArticlePagingDTO data;

  ArticleBloc _articleBloc;
  int page = 1;

  @override
  void didChangeDependencies() {
    _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(ArticleTypeEvent(type: widget.type, page: page));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: BaseAppBar(
        title: widget.type == MyConst.ASK_TYPE_READ ? "Đọc để học" : "Xem để học",
      ),
      body: RefreshIndicator(
        onRefresh: () async {
          setState(() {
            page = 1;
          });
          _articleBloc..add(ArticleTypeEvent(type: widget.type, page: page));
        },
        child: BlocBuilder(
            bloc: _articleBloc,
            builder: (context, state) {
              if (state is ArticleTypeSuccessState) {
                data = state.result;
              }
              return data == null
                  ? LoadingWidget()
                  : AskCatBody(
                      articleBloc: _articleBloc,
                      data: data,
                      type: widget.type,
                    );
            }),
      ),
      floatingActionButton: FloatingActionButtonHome(),
      floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
      bottomNavigationBar: BottomNav(
        route: BottomNav.ASK_INDEX,
        user: user,
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:validators/validators.dart';

import '../blocs/article/article_bloc.dart';
import '../blocs/article/article_blocs.dart';
import '../dto/article_dto.dart';
import '../dto/const.dart';
import '../widgets/loading_widget.dart';
import 'ask/content_read.dart';
import 'ask/content_video.dart';

class AskArticleScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AskArticleScreen();
}

class _AskArticleScreen extends State<AskArticleScreen> {
  ArticleDTO data;
  ArticleBloc _articleBloc;
  int id;

  @override
  void didChangeDependencies() {
    try {
      id = int.parse(ModalRoute.of(context).settings.arguments);
    } catch (e) {
      id = ModalRoute.of(context).settings.arguments;
    }

    _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(ArticlePageEvent(id: id));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double imageHeight = width - 80;
    return Scaffold(
      appBar: AppBar(),
      body: RefreshIndicator(
        onRefresh: () async {
          _articleBloc..add(ArticlePageEvent(id: id));
        },
        child: BlocBuilder(
            bloc: _articleBloc,
            builder: (context, state) {
              if (state is ArticlePageSuccessState) {
                data = state.result;
                if (data.type == MyConst.ASK_TYPE_VIDEO && data.video != null) {}
              }
              return data == null
                  ? LoadingWidget()
                  : Container(
                      padding: EdgeInsets.all(15),
                      child: data.type == MyConst.ASK_TYPE_VIDEO ? ContentVideo(data: data) : ContentRead(data: data),
                    );
            }),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/article/article_blocs.dart';
import '../dto/const.dart';
import '../dto/user_dto.dart';
import '../widgets/gradient_button.dart';

class AskFormScreen extends StatefulWidget {
  final UserDTO user;
  final int askId;
  final ArticleBloc askBloc;
  final String type;

  AskFormScreen({this.user, this.askId, this.askBloc, this.type});

  @override
  State<StatefulWidget> createState() => _AskFormScreen();
}

class _AskFormScreen extends State<AskFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _contentController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Gửi " + _buildText(widget.type)),
        centerTitle: false,
      ),
      body: BlocListener<ArticleBloc, ArticleState>(
        bloc: widget.askBloc,
        listener: (context, state) {
          if (state is AskCreateSuccessState) {
            ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                content: Text("Đã gửi thành công."),
              )).closed.then((value) {
                Navigator.of(context).pop(true);
              });
          }
          if (state is AskCreateFailState) {
            ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                content: Text(state.error.toString()),
              ));
          }
        },
        child: Container(
          padding: EdgeInsets.all(8),
          child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  widget.type == MyConst.ASK_QUESTION
                      ? TextFormField(
                          controller: _titleController,
                          decoration: InputDecoration(
                            labelText: "Tiêu đề",
                          ),
                        )
                      : SizedBox(
                          height: 0,
                        ),
                  Padding(
                    padding: const EdgeInsets.only(top: 15, bottom: 10),
                    child: Text("Nội dung " + _buildText(widget.type)),
                  ),
                  TextField(
                    controller: _contentController,
                    minLines: 5,
                    maxLines: 8,
                  ),
                  (widget.type == MyConst.ASK_COMMENT || widget.type == MyConst.ASK_QUESTION)
                      ? SizedBox(
                          height: 0,
                        )
                      : Padding(
                          padding: const EdgeInsets.only(top: 15, bottom: 10),
                          child: Text("Nếu bạn đã trả lời, trả lời mới sẽ cập nhật nội dung trả lời cũ."),
                        ),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.only(top: 8.0, bottom: 8.0),
                    child: BlocBuilder<ArticleBloc, ArticleState>(
                        bloc: widget.askBloc,
                        builder: (context, state) {
                          if (state is AskCreateLoadingState) {
                            return Container(width: 50.0, child: CircularProgressIndicator());
                          }
                          return GradientButton(
                            height: 48,
                            title: "Gửi " + _buildText(widget.type),
                            function: () {
                              _submit();
                            },
                          );
                        }),
                  ),
                ],
              )),
        ),
      ),
    );
  }

  void _submit() async {
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();
      widget.askBloc.add(AskCreateEvent(
        askId: widget.askId,
        title: widget.type == MyConst.ASK_QUESTION ? _titleController.text : "",
        type: widget.type,
        user: widget.user,
        content: _contentController.text,
      ));
    }
  }

  String _buildText(String type) {
    switch (type) {
      case MyConst.ASK_QUESTION:
        return "câu hỏi";
      case MyConst.ASK_ANSWER:
        return "trả lời";
      case MyConst.ASK_COMMENT:
        return "bình luận";
    }
  }
}


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/article/article_bloc.dart';
import '../blocs/article/article_blocs.dart';
import '../blocs/auth/auth_blocs.dart';
import '../dto/ask_paging_dto.dart';
import '../dto/const.dart';
import '../dto/user_dto.dart';
import '../main.dart';
import '../themes/role_color.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import '../widgets/loading_widget.dart';
import '../widgets/search_icon.dart';
import '../widgets/time_ago.dart';
import 'ask_form.dart';

class AskForumScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AskForumScreen();
}

class _AskForumScreen extends State<AskForumScreen> {
  AskPagingDTO data;
  ArticleBloc _articleBloc;
  UserDTO _user;
  AuthBloc _authBloc;

  @override
  void didChangeDependencies() {
    _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(AskIndexEvent());
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthSuccessState) {
          _user = state.user;
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Hỏi để học"),
          centerTitle: false,
          actions: [
            SearchIcon(screen: "ask"),
            IconButton(
                icon: Icon(Icons.add),
                onPressed: () async {
                  if (_user == null) {
                    Navigator.of(context).pushNamed("/login");
                  } else {
                    final result = await Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                      return AskFormScreen(
                        user: _user,
                        askBloc: _articleBloc,
                        askId: 0,
                        type: MyConst.ASK_QUESTION,
                      );
                    }));
                    if (result == true) {
                      _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(AskIndexEvent());
                    }
                  }
                })
          ],
        ),
        body: RefreshIndicator(
          onRefresh: () async {
            _articleBloc..add(AskIndexEvent());
          },
          child: BlocBuilder(
              bloc: _articleBloc,
              builder: (context, state) {
                if (state is AskIndexSuccessState) {
                  data = state.data;
                }
                return data == null
                    ? LoadingWidget()
                    : Container(
                        child: ListView.separated(
                            itemBuilder: (context, index) {
                              return ListTile(
                                title: Text(
                                  data.data[index].title,
                                  style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue, fontSize: 20),
                                ),
                                leading: data.data[index].userImage == null
                                    ? SizedBox(height: 0)
                                    : CircleAvatar(
                                        radius: 20,
                                        backgroundColor: roleColor(data.data[index].userRole),
                                        child: CircleAvatar(
                                          radius: 18,
                                          backgroundImage: CachedNetworkImageProvider(
                                            data.data[index].userImage,
                                          ),
                                        ),
                                      ),
                                isThreeLine: true,
                                subtitle: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      data.data[index].content,
                                      style: TextStyle(),
                                      maxLines: 3,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                    Align(
                                        alignment: Alignment.centerRight,
                                        child: TimeAgo(time: data.data[index].createdAt))
                                  ],
                                ),
                                onTap: () {
                                  Navigator.of(context).pushNamed("/ask/forum/thread", arguments: data.data[index].id);
                                },
                                trailing: Icon(Icons.chevron_right),
                              );
                            },
                            separatorBuilder: (context, index) {
                              return Divider();
                            },
                            itemCount: data.data.length),
                      );
              }),
        ),
        floatingActionButton: FloatingActionButtonHome(),
        floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
        bottomNavigationBar: BottomNav(
          route: BottomNav.ASK_INDEX,
          user: user,
        ),
      ),
    );
  }
}


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/article/article_bloc.dart';
import '../blocs/article/article_blocs.dart';
import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_blocs.dart';
import '../dto/ask_dto.dart';
import '../dto/ask_thread_dto.dart';
import '../dto/const.dart';
import '../dto/user_dto.dart';
import '../main.dart';
import '../themes/role_color.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import '../widgets/gradient_button.dart';
import '../widgets/loading_widget.dart';
import '../widgets/time_ago.dart';
import 'ask_form.dart';

class AskForumThreadScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AskForumThreadScreen();
}

class _AskForumThreadScreen extends State<AskForumThreadScreen> {
  AskThreadDTO data;
  ArticleBloc _articleBloc;
  int askId;
  UserDTO _user;
  AuthBloc _authBloc;

  @override
  void didChangeDependencies() {
    final args = ModalRoute.of(context).settings.arguments;
    askId = int.tryParse(args.toString());
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthSuccessState) {
          _user = state.user;
          _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(AskThreadEvent(askId: askId, token: _user.token));
        }
        if (state is AuthFailState) {
          _articleBloc = BlocProvider.of<ArticleBloc>(context)..add(AskThreadEvent(askId: askId, token: ""));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Hỏi để học"),
        ),
        body: RefreshIndicator(
          onRefresh: () async {
            _articleBloc..add(AskThreadEvent(askId: askId, token: _user == null ? "" : _user.token));
          },
          child: BlocListener<ArticleBloc, ArticleState>(
            bloc: _articleBloc,
            listener: (context, state) {
              if (state is AskVoteSuccessState) {
                _articleBloc..add(AskThreadEvent(askId: askId, token: _user.token));
              }
              if (state is AskSelectSuccessState) {
                _articleBloc..add(AskThreadEvent(askId: askId, token: _user.token));
              }
            },
            child: BlocBuilder(
                bloc: _articleBloc,
                builder: (context, state) {
                  if (state is AskThreadSuccessState) {
                    data = state.data;
                  }
                  return data == null
                      ? LoadingWidget()
                      : Container(
                          child: ListView(
                              children: [_questionBox(data.question)] + [_answerInput()] + _answersBox(data.answers)));
                }),
          ),
        ),
        floatingActionButton: FloatingActionButtonHome(),
        floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
        bottomNavigationBar: BottomNav(
          route: BottomNav.ASK_INDEX,
          user: user,
        ),
      ),
    );
  }

  Widget _questionBox(AskDTO question) {
    return Container(
        // padding: EdgeInsets.only(top: 10.0),
        child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
      Container(
        padding: const EdgeInsets.all(8.0),
        child: ListTile(
          contentPadding: EdgeInsets.all(0),
          leading: Container(
              // margin: EdgeInsets.only(right: 8),
              // width: 40.0,
              // height: 40.0,
              child: question.userImage == null
                  ? Icon(Icons.account_box)
                  : CircleAvatar(
                      radius: 22,
                      backgroundColor: roleColor(question.userRole),
                      child: CircleAvatar(
                        radius: 20,
                        backgroundImage: CachedNetworkImageProvider(
                          question.userImage,
                        ),
                      ))),
          title: Text(
            question.username,
            style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue),
          ),
          subtitle: Row(
            crossAxisAlignment: CrossAxisAlignment.end,
            children: [
              Text("Đã hỏi ", style: TextStyle(fontSize: 12, fontStyle: FontStyle.italic)),
              TimeAgo(time: question.createdAt),
            ],
          ),
        ),
      ),
      Row(children: [
        Padding(
          padding: const EdgeInsets.only(left: 15.0, right: 15.0),
          child: Text(question.title, style: TextStyle(fontWeight: FontWeight.bold)),
        ),
      ]),
      Padding(
        padding: const EdgeInsets.all(15.0),
        child: Text(
          question.content,
        ),
      ),
      // Divider(),
    ]));
  }

  List<Widget> _answersBox(List<AskDTO> answers) {
    List<Widget> list = [];
    list.add(Container(
      width: double.infinity,
      decoration: BoxDecoration(
        color: Colors.grey[200],
        border: Border(
            // bottom: BorderSide(color: Colors.grey, width: 1.0),
            // top: BorderSide(color: Colors.grey[400], width: 1.0),
            ),
      ),
      padding: const EdgeInsets.all(10.0),
      child: data.answers.length > 0
          ? Text(
              "Có ${data.answers.length} câu trả lời",
              style: TextStyle(
                fontWeight: FontWeight.bold,
              ),
            )
          : Text("Chưa có câu trả lời."),
    ));
    answers.forEach((ans) {
      list.add(
        Container(
          padding: const EdgeInsets.only(left: 8.0, right: 8.0),
          child: Card(
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  ListTile(
                    contentPadding: EdgeInsets.all(0),
                    leading: Container(
                        // margin: EdgeInsets.only(right: 8),
                        // width: 40.0,
                        // height: 40.0,
                        child: ans.userImage == null
                            ? Icon(Icons.account_box)
                            : CircleAvatar(
                                radius: 20,
                                backgroundColor: roleColor(ans.userRole),
                                child: CircleAvatar(
                                  radius: 18,
                                  backgroundImage: CachedNetworkImageProvider(
                                    ans.userImage,
                                  ),
                                ),
                              )),
                    title: Text(
                      ans.username,
                      style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue),
                    ),
                    subtitle: Row(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        Text("Đã trả lời ", style: TextStyle(fontSize: 12, fontStyle: FontStyle.italic)),
                        TimeAgo(time: ans.createdAt),
                      ],
                    ),
                  ),
                  Container(
                    padding: EdgeInsets.only(left: 15.0, right: 15.0, bottom: 5.0),
                    child: Text(
                      ans.content,
                    ),
                  ),
                  Container(
                    child: Row(children: [
                      Expanded(
                        child: FlatButton.icon(
                          padding: EdgeInsets.all(0),
                          icon: Icon(
                            Icons.thumb_up,
                            color: ans.myVote == MyConst.ASK_VOTE_LIKE ? Colors.blue : Colors.grey[600],
                          ),
                          onPressed: () async {
                            if (_user == null) {
                              Navigator.of(context).pushNamed("/login");
                            } else {
                              if (ans.myVote != MyConst.ASK_VOTE_LIKE) {
                                _articleBloc
                                  ..add(AskVoteEvent(askId: ans.id, type: MyConst.ASK_VOTE_LIKE, token: _user.token));
                              }
                            }
                          },
                          label: Text(ans.like.toString()),
                        ),
                      ),
                      Expanded(
                        child: FlatButton.icon(
                            padding: EdgeInsets.all(0),
                            onPressed: () async {
                              if (_user == null) {
                                Navigator.of(context).pushNamed("/login");
                              } else {
                                if (ans.myVote != MyConst.ASK_VOTE_DISLIKE) {
                                  _articleBloc
                                    ..add(AskVoteEvent(
                                        askId: ans.id, type: MyConst.ASK_VOTE_DISLIKE, token: _user.token));
                                }
                              }
                            },
                            label: Text(ans.unlike.toString()),
                            icon: Icon(
                              Icons.thumb_down,
                              color: ans.myVote == MyConst.ASK_VOTE_DISLIKE ? Colors.red : Colors.grey[600],
                            )),
                      ),
                      Expanded(
                        child: FlatButton.icon(
                          padding: EdgeInsets.all(0),
                          onPressed: () async {
                            if (_user == null) {
                              Navigator.of(context).pushNamed("/login");
                            } else {
                              bool result = await Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                                return AskFormScreen(
                                  user: _user,
                                  askBloc: _articleBloc,
                                  askId: ans.id,
                                  type: MyConst.ASK_COMMENT,
                                );
                              }));
                              if (result != null && result) {
                                _articleBloc = BlocProvider.of<ArticleBloc>(context)
                                  ..add(AskThreadEvent(askId: askId, token: _user.token));
                              }
                            }
                          },
                          label: Text(ans.comments.length.toString()),
                          icon: Icon(Icons.insert_comment, color: Colors.grey[600]),
                        ),
                      ),
                      (_user != null && data != null && data.question.userId == _user.id)
                          ? Expanded(
                              child: FlatButton(
                                padding: EdgeInsets.all(0),
                                onPressed: () async {
                                  if (_user == null) {
                                    Navigator.of(context).pushNamed("/login");
                                  } else {
                                    _articleBloc..add(AskSelectEvent(askId: ans.id, token: _user.token));
                                  }
                                },
                                child: ans.selectedAnswer
                                    ? Icon(Icons.check_circle_outline, color: Colors.green)
                                    : Text(
                                        "Chọn",
                                        style: TextStyle(color: Colors.grey[600]),
                                      ),
                              ),
                            )
                          : SizedBox(
                              height: 0,
                            ),
                    ]),
                  ),
                ],
              ),
            ),
          ),
        ),
      );

      if (ans.comments.length > 0) {
        list.add(
          Container(
            // color: Colors.grey[200],
            padding: EdgeInsets.only(left: 50.0, right: 10.0),
            // child: Expanded(
            child: Column(
              children: ans.comments.map((comment) {
                return Card(
                  child: Container(
                      padding: EdgeInsets.only(left: 10),
                      decoration: BoxDecoration(
                        color: Colors.grey[50],
                        border: Border(bottom: BorderSide(color: Colors.grey[200])),
                      ),
                      child: ListTile(
                        leading: Container(
                            // margin: EdgeInsets.only(right: 8),
                            // width: 40.0,
                            // height: 40.0,
                            child: comment.userImage == null
                                ? Icon(Icons.account_box)
                                : CircleAvatar(
                                    radius: 18,
                                    backgroundColor: roleColor(comment.userRole),
                                    child: CircleAvatar(
                                      radius: 16,
                                      backgroundImage: CachedNetworkImageProvider(
                                        comment.userImage,
                                      ),
                                    ),
                                  )),
                        contentPadding: EdgeInsets.all(0),
                        isThreeLine: false,
                        title: Text(comment.username),
                        subtitle: Text(comment.content),
                      )),
                );
              }).toList(),
            ),
            // ),
          ),
        );
      }
    });
    return list;
  }

  Widget _answerInput() {
    return Container(
      padding: EdgeInsets.all(10),
      child: Column(
        children: [
          Container(
            width: double.infinity,
            child: GradientButton(
              title: "Trả lời",
              // height: 48.0,
              function: () async {
                if (_user == null) {
                  Navigator.of(context).pushNamed("/login");
                } else {
                  bool result = await Navigator.of(context).push(MaterialPageRoute(builder: (context) {
                    return AskFormScreen(
                      user: _user,
                      askBloc: _articleBloc,
                      askId: data.question.id,
                      type: MyConst.ASK_ANSWER,
                    );
                  }));
                  if (result != null && result) {
                    _articleBloc = BlocProvider.of<ArticleBloc>(context)
                      ..add(AskThreadEvent(askId: askId, token: _user.token));
                  }
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:anylearn/screens/contract_sign.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_masked_text/flutter_masked_text.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:validators/validators.dart' as validator;

import '../blocs/auth/auth_blocs.dart';
import '../dto/contract.dart';
import '../dto/user_dto.dart';
import '../widgets/gradient_button.dart';
import '../widgets/loading_widget.dart';

class ContractSchoolScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ContractSchoolScreen();
}

class _ContractSchoolScreen extends State<ContractSchoolScreen> {
  UserDTO _user;
  AuthBloc _authBloc;
  ContractDTO _contract = ContractDTO();
  bool openedForm = false;
  bool _agreedToc = true;

  final _formKey = GlobalKey<FormState>();
  final dateMask = new MaskedTextController(mask: '0000-00-00');
  final dobMask = new MaskedTextController(mask: '0000-00-00');

  @override
  void didChangeDependencies() {
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Quản lý hợp đồng"),
        centerTitle: false,
      ),
      body: BlocListener(
          bloc: _authBloc,
          listener: (context, state) {
            if (state is AuthContractSuccessState) {
              setState(() {
                openedForm = false;
                // _authBloc..add(AuthContractLoadEvent(token: _user.token, contractId: 0));
              });
              _authBloc..add(AuthContractLoadEvent(token: _user.token, contractId: 0));
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text("Hợp đông mới đã được tạo. Vui lòng xem lại và thực hiện kí hợp đồng để xác nhận."),
                ));
            }
            if (state is AuthContractFailState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(content: Text(state.error)));
            }
          },
          child: BlocBuilder(
            bloc: BlocProvider.of<AuthBloc>(context),
            builder: (context, state) {
              if (state is AuthSuccessState) {
                _user = state.user;
                _authBloc..add(AuthContractLoadEvent(token: _user.token, contractId: 0));
              }

              if (state is AuthContractLoadSuccessState) {
                _contract = state.contract;
              }
              return _user == null
                  ? LoadingWidget()
                  : Container(
                      padding: EdgeInsets.all(15),
                      child: ListView(children: [
                        ListTile(
                          leading: Icon(MdiIcons.fileCertificateOutline),
                          title: Text("Trạng thái hợp đồng của tài khoản"),
                          subtitle:
                              _user.isSigned == 0 ? Text("CHƯA CÓ HỢP ĐỒNG HIỆU LỰC") : _signedStatus(_user.isSigned),
                          trailing: _user.isSigned == 99 ? Icon(Icons.search) : Text(""),
                          onTap: () {
                            if (_user.isSigned == 99) {
                              Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => ContractSignScreen(user: _user, contractId: -1)));
                            }
                          },
                        ),
                        _contract != null && (_contract.status == 1 || _contract.status == 10)
                            ? ListTile(
                                shape: Border(
                                  top: BorderSide(color: Colors.grey[300]),
                                ),
                                leading: Icon(Icons.edit_notifications_outlined),
                                title: Text("Đang có hợp đồng chờ xử lí"),
                                subtitle: _signedStatus(_contract.status),
                                trailing: _contract.status == 1 ? Text("KÝ") : Text("XEM"),
                                onTap: () async {
                                  bool result = await Navigator.of(context).push(MaterialPageRoute(
                                      builder: (context) => ContractSignScreen(user: _user, contractId: _contract.id)));
                                  if (result) {
                                    _authBloc..add(AuthCheckEvent());
                                  }
                                },
                              )
                            : Text(""),
                        ListTile(
                          shape: Border(
                            top: BorderSide(color: Colors.grey[300]),
                          ),
                          leading: Icon(MdiIcons.certificate),
                          trailing: Icon(Icons.chevron_right),
                          title: Text("Cập nhật chứng chỉ"),
                          onTap: () {
                            Navigator.of(context).pushNamed("/account/docs", arguments: _user.token);
                          },
                        ),
                        GradientButton(
                          title: "TẠO HỢP ĐỒNG MỚI",
                          height: 40.0,
                          function: () {
                            setState(() {
                              openedForm = true;
                              if (_contract == null) {
                                _contract = new ContractDTO();
                              }
                              _contract.commission = _user.commissionRate.toString();
                              dateMask.text = _contract.certDate ?? "";
                            });
                          },
                        ),
                        openedForm == false
                            ? Container()
                            : Form(
                                key: _formKey,
                                child: Column(
                                  children: <Widget>[
                                    Divider(),
                                    TextFormField(
                                      initialValue: _contract.commission,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.commission = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3 || double.tryParse(value) == null) {
                                          return "Là một con số phập phân, ví dụ 0.2";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Phần trăm doanh thu của ${_user.name} (số thập phân)",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.certId ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.certId = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Số DKKD không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Số Đăng ký kinh doanh",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.certDate = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (DateTime.tryParse(value) == null) {
                                          return "Ngày không hợp lệ, nhập năm-tháng-ngày(yyyy-mm-dd)";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      controller: dateMask,
                                      decoration: InputDecoration(
                                        hintText: "yyyy-mm-dd",
                                        labelText: "Ngày cấp DKKD (yyyy-mm-dd)",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.tax ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.tax = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Mã số thuế không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Mã số thuế",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.ref ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.ref = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Người đại diện",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.refTitle ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.refTitle = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Chức vụ Người đại diện",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.address ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.address = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Địa chỉ không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Địa chỉ",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.email ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.email = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (!validator.isEmail(value)) {
                                          return "Email không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Email",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankName ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankName = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Ngân hàng",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankBranch ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankBranch = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Chi nhánh ngân hàng",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankNo ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankNo = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "STK Ngân hàng",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankAccount ?? "",
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankAccount = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Ngân hàng - Người thụ hưởng",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(left: 15.0, top: 0),
                                      child: CheckboxListTile(
                                        dense: true,
                                        controlAffinity: ListTileControlAffinity.leading,
                                        value: _agreedToc,
                                        onChanged: (value) => setState(() {
                                          // if (!_agreedToc) {
                                          //   showDialog(
                                          //       context: context,
                                          //       child: AlertDialog(
                                          //         scrollable: true,
                                          //         title: Text("Điều khoản sử dụng"),
                                          //         content: Html(
                                          //           data: _toc,
                                          //           shrinkWrap: true,
                                          //         ),
                                          //         actions: <Widget>[
                                          //           FlatButton(
                                          //             onPressed: () => Navigator.pop(context),
                                          //             child: Text("Đã đọc và đồng ý".toUpperCase()),
                                          //           )
                                          //         ],
                                          //       ));
                                          // }
                                          _agreedToc = value;
                                        }),
                                        title: Text.rich(TextSpan(text: "Tôi đồng ý với ", children: [
                                          TextSpan(
                                            text: "Điều khoản sử dụng",
                                            style: TextStyle(color: Colors.red),
                                          ),
                                        ])),
                                      ),
                                    ),
                                    Container(
                                        padding: EdgeInsets.only(top: 15, bottom: 30),
                                        width: double.infinity,
                                        child: GradientButton(
                                          color: Colors.green,
                                          colorSub: Colors.greenAccent,
                                          height: 40,
                                          title: "LƯU HỢP ĐỒNG MỚI",
                                          function: () {
                                            if (!_agreedToc) {
                                              showDialog(
                                                context: context,
                                                builder: (context) => AlertDialog(
                                                  contentPadding: EdgeInsets.all(5),
                                                  scrollable: true,
                                                  title: Text(
                                                    "Chưa đồng ý điều khoản sử dụng.",
                                                    style: TextStyle(fontSize: 14),
                                                  ),
                                                  content: Text(
                                                      "Bạn vui lòng tick chọn đồng ý với điều khoản sử dụng của chúng tôi. Cảm ơn."),
                                                  actions: <Widget>[
                                                    FlatButton(
                                                      onPressed: () => Navigator.pop(context),
                                                      child: Text("Tôi sẽ đọc".toUpperCase()),
                                                    )
                                                  ],
                                                ),
                                              );
                                            }
                                            if (_formKey.currentState.validate()) {
                                              _formKey.currentState.save();
                                              _authBloc
                                                ..add(AuthContractSaveEvent(token: _user.token, contract: _contract));
                                            }
                                          },
                                        )),
                                  ],
                                ),
                              ),
                      ]),
                    );
            },
          )),
    );
  }

  Widget _signedStatus(int status) {
    switch (status) {
      case 1:
        return Text("MỚI TẠO / CHỜ BẠN KÝ", style: TextStyle(color: Colors.blue));
      case 10:
        return Text("BẠN ĐÃ KÝ / CHỜ CÔNG TY", style: TextStyle(color: Colors.blue));
      case 99:
        return Text("CÔNG TY ĐÃ DUYỆT / HOÀN TẤT", style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold));
      case 0:
        return Text("ĐÃ BỊ HỦY", style: TextStyle(color: Colors.blue));
      default:
        return Text("");
    }
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:overlay_support/overlay_support.dart';

import '../blocs/auth/auth_blocs.dart';
import '../dto/contract.dart';
import '../dto/user_dto.dart';
import '../widgets/loading_widget.dart';

class ContractSignScreen extends StatefulWidget {
  final UserDTO user;
  final int contractId;

  const ContractSignScreen({Key key, this.user, this.contractId}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _ContractSignScreen();
}

class _ContractSignScreen extends State<ContractSignScreen> {
  AuthBloc _authBloc;
  ContractDTO _contract;

  @override
  void initState() {
     _authBloc = BlocProvider.of<AuthBloc>(context)
      ..add(AuthContractLoadForSignEvent(
        token: widget.user.token,
        contractId: widget.contractId,
      ));
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("XEM/KÝ hợp đồng"),
        centerTitle: false,
      ),
      body: BlocListener(
        bloc: BlocProvider.of<AuthBloc>(context),
        listener: (context, state) {
          if (state is AuthContractSignedSuccessState) {
            toast("Bạn đã ký thành công, anyLEARN sẽ kiểm tra và phản hồi trong thời gian sớm nhất.");
            Navigator.of(context).pop(true);
          }
          if (state is AuthContractSignedFailState) {
            toast(state.error.toString());
          }
        },
        child: BlocBuilder(
            bloc: BlocProvider.of<AuthBloc>(context),
            builder: (context, state) {
              if (state is AuthContractLoadForSignSuccessState) {
                print(state.contract);
                _contract = state.contract;
              }
              return _contract == null
                  ? LoadingWidget()
                  : ListView(
                      children: [
                        _contract.status == 1
                            ? Container(
                                padding: EdgeInsets.all(15),
                                child: ElevatedButton(
                                    style: ButtonStyle(
                                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                                          RoundedRectangleBorder(borderRadius: BorderRadius.circular(18))),
                                      backgroundColor: MaterialStateProperty.all<Color>(Colors.green[600]),
                                    ),
                                    onPressed: () {
                                      _authBloc
                                        ..add(AuthContractSignEvent(
                                            token: widget.user.token, contractId: widget.contractId));
                                    },
                                    child: Text("TÔI ĐÃ ĐỌC VÀ ĐỒNG Ý KÝ HỢP ĐỒNG")),
                              )
                            : Container(),
                        Html(
                          data: _contract.template,
                          shrinkWrap: true,
                        ),
                        _contract.status == 1
                            ? Container(
                                padding: EdgeInsets.all(15),
                                child: ElevatedButton(
                                    style: ButtonStyle(
                                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(
                                          RoundedRectangleBorder(borderRadius: BorderRadius.circular(18))),
                                      backgroundColor: MaterialStateProperty.all<Color>(Colors.green[600]),
                                    ),
                                    onPressed: () {
                                      _authBloc
                                        ..add(AuthContractSignEvent(
                                            token: widget.user.token, contractId: widget.contractId));
                                    },
                                    child: Text("TÔI ĐÃ ĐỌC VÀ ĐỒNG Ý KÝ HỢP ĐỒNG")),
                              )
                            : Container(),
                      ],
                    );
            }),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_masked_text/flutter_masked_text.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:validators/validators.dart' as validator;

import '../blocs/auth/auth_blocs.dart';
import '../dto/contract.dart';
import '../dto/user_dto.dart';
import '../widgets/gradient_button.dart';
import '../widgets/loading_widget.dart';
import 'contract_sign.dart';

class ContractTeacherScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ContractTeacherScreen();
}

class _ContractTeacherScreen extends State<ContractTeacherScreen> {
  UserDTO _user;
  AuthBloc _authBloc;
  ContractDTO _contract = ContractDTO();
  bool openedForm = false;
  bool _agreedToc = true;

  final _formKey = GlobalKey<FormState>();
  final dateMask = new MaskedTextController(mask: '0000-00-00');
  final dobMask = new MaskedTextController(mask: '0000-00-00');

  @override
  void didChangeDependencies() {
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Quản lý hợp đồng"),
        centerTitle: false,
      ),
      body: BlocListener(
          bloc: _authBloc,
          listener: (context, state) {
            if (state is AuthContractSuccessState) {
              setState(() {
                openedForm = false;
                // _authBloc..add(AuthContractLoadEvent(token: _user.token, contractId: 0));
              });
              _authBloc..add(AuthContractLoadEvent(token: _user.token, contractId: 0));
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text("Hợp đông mới đã được tạo. Vui lòng xem lại và thực hiện kí hợp đồng để xác nhận."),
                ));
            }
            if (state is AuthContractFailState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(content: Text(state.error)));
            }
          },
          child: BlocBuilder(
            bloc: BlocProvider.of<AuthBloc>(context),
            builder: (context, state) {
              if (state is AuthSuccessState) {
                _user = state.user;
                _authBloc..add(AuthContractLoadEvent(token: _user.token, contractId: 0));
              }

              if (state is AuthContractLoadSuccessState) {
                _contract = state.contract;
              }
              return _user == null
                  ? LoadingWidget()
                  : Container(
                      padding: EdgeInsets.all(15),
                      child: ListView(children: [
                        ListTile(
                          leading: Icon(MdiIcons.fileCertificateOutline),
                          title: Text("Trạng thái hợp đồng của tài khoản"),
                          subtitle:
                              _user.isSigned == 0 ? Text("CHƯA CÓ HỢP ĐỒNG HIỆU LỰC") : _signedStatus(_user.isSigned),
                          trailing: _user.isSigned == 99 ? Icon(Icons.search) : Text(""),
                          onTap: () {
                            if (_user.isSigned == 99) {
                              Navigator.of(context).push(MaterialPageRoute(
                                  builder: (context) => ContractSignScreen(user: _user, contractId: -1)));
                            }
                          },
                        ),
                        _contract != null && (_contract.status == 1 || _contract.status == 10)
                            ? ListTile(
                                shape: Border(
                                  top: BorderSide(color: Colors.grey[300]),
                                ),
                                leading: Icon(Icons.edit_notifications_outlined),
                                title: Text("Đang có hợp đồng chờ xử lí"),
                                subtitle: _signedStatus(_contract.status),
                                trailing: _contract.status == 1 ? Text("KÝ") : Text("XEM"),
                                onTap: () async {
                                  bool result = await Navigator.of(context).push(MaterialPageRoute(
                                      builder: (context) => ContractSignScreen(user: _user, contractId: _contract.id)));
                                  if (result) {
                                    _authBloc..add(AuthCheckEvent());
                                  }
                                },
                              )
                            : Text(""),
                        ListTile(
                          shape: Border(
                            top: BorderSide(color: Colors.grey[300]),
                          ),
                          leading: Icon(MdiIcons.certificate),
                          trailing: Icon(Icons.chevron_right),
                          title: Text("Cập nhật chứng chỉ"),
                          onTap: () {
                            Navigator.of(context).pushNamed("/account/docs", arguments: _user.token);
                          },
                        ),
                        GradientButton(
                          title: "TẠO HỢP ĐỒNG MỚI",
                          height: 40.0,
                          function: () {
                            setState(() {
                              openedForm = true;
                              if (_contract == null) {
                                _contract = new ContractDTO();
                              }
                              _contract.commission = _user.commissionRate.toString();
                              dateMask.text = _contract.certDate ?? "";
                              dobMask.text = _contract.dob ?? "";
                            });
                          },
                        ),
                        openedForm == false
                            ? Container()
                            : Form(
                                key: _formKey,
                                child: Column(
                                  children: <Widget>[
                                    Divider(),
                                    TextFormField(
                                      initialValue: _user.commissionRate.toString(),
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.commission = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3 || double.tryParse(value) == null) {
                                          return "Là một con số phập phân, ví dụ 0.2";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Phần trăm doanh thu của đối tác (số thập phân)",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.certId,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.certId = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 9) {
                                          return "CMND không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "CMND",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.certDate = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (DateTime.tryParse(value) == null) {
                                          return "Ngày không hợp lệ, nhập năm-tháng-ngày(yyyy-mm-dd)";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      controller: dateMask,
                                      decoration: InputDecoration(
                                        hintText: "yyyy-mm-dd",
                                        labelText: "Ngày cấp CMND",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.certPlace,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.certPlace = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Nơi cấp CMND không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Nơi cấp CMND",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.dob = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (DateTime.tryParse(value) == null) {
                                          return "Ngày không hợp lệ, nhập năm-tháng-ngày(yyyy-mm-dd)";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      controller: dobMask,
                                      decoration: InputDecoration(
                                        hintText: "yyyy-mm-dd",
                                        labelText: "Ngày sinh",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.dob,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.dobPlace = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Nơi sinh";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Nơi sinh",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.address,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.address = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Địa chỉ không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Địa chỉ",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.email,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.email = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (!validator.isEmail(value)) {
                                          return "Email không hợp lệ";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Email",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankName,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankName = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Ngân hàng",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankBranch,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankBranch = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Chi nhánh ngân hàng",
                                        // contentPadding: EdgeInsets.all(5.0),
                                        // labelStyle: TextStyle(fontSize: 14.0),
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankNo,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankNo = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "STK Ngân hàng",
                                      ),
                                    ),
                                    TextFormField(
                                      initialValue: _contract.bankAccount,
                                      onSaved: (value) {
                                        setState(() {
                                          _contract.bankAccount = value;
                                        });
                                      },
                                      validator: (value) {
                                        if (value.length < 3) {
                                          return "Vui lòng nhập";
                                        }
                                        _formKey.currentState.save();
                                        return null;
                                      },
                                      decoration: InputDecoration(
                                        labelText: "Ngân hàng - Người thụ hưởng",
                                      ),
                                    ),
                                    Padding(
                                      padding: const EdgeInsets.only(left: 15.0, top: 0),
                                      child: CheckboxListTile(
                                        dense: true,
                                        controlAffinity: ListTileControlAffinity.leading,
                                        value: _agreedToc,
                                        onChanged: (value) => setState(() {
                                          // if (!_agreedToc) {
                                          //   showDialog(
                                          //       context: context,
                                          //       child: AlertDialog(
                                          //         scrollable: true,
                                          //         title: Text("Điều khoản sử dụng"),
                                          //         content: Html(
                                          //           data: _toc,
                                          //           shrinkWrap: true,
                                          //         ),
                                          //         actions: <Widget>[
                                          //           FlatButton(
                                          //             onPressed: () => Navigator.pop(context),
                                          //             child: Text("Đã đọc và đồng ý".toUpperCase()),
                                          //           )
                                          //         ],
                                          //       ));
                                          // }
                                          _agreedToc = value;
                                        }),
                                        title: Text.rich(TextSpan(text: "Tôi đồng ý với ", children: [
                                          TextSpan(
                                            text: "Điều khoản sử dụng",
                                            style: TextStyle(color: Colors.red),
                                          ),
                                        ])),
                                      ),
                                    ),
                                    Container(
                                        padding: EdgeInsets.only(top: 15, bottom: 30),
                                        width: double.infinity,
                                        child: GradientButton(
                                          color: Colors.green,
                                          colorSub: Colors.greenAccent,
                                          height: 40,
                                          title: "LƯU HỢP ĐỒNG MỚI",
                                          function: () {
                                            if (!_agreedToc) {
                                              showDialog(
                                                context: context,
                                                builder: (context) => AlertDialog(
                                                  contentPadding: EdgeInsets.all(5),
                                                  scrollable: true,
                                                  title: Text(
                                                    "Chưa đồng ý điều khoản sử dụng.",
                                                    style: TextStyle(fontSize: 14),
                                                  ),
                                                  content: Text(
                                                      "Bạn vui lòng tick chọn đồng ý với điều khoản sử dụng của chúng tôi. Cảm ơn."),
                                                  actions: <Widget>[
                                                    FlatButton(
                                                      onPressed: () => Navigator.pop(context),
                                                      child: Text("Tôi sẽ đọc".toUpperCase()),
                                                    )
                                                  ],
                                                ),
                                              );
                                            }
                                            if (_formKey.currentState.validate()) {
                                              _formKey.currentState.save();
                                              _authBloc
                                                ..add(AuthContractSaveEvent(token: _user.token, contract: _contract));
                                            }
                                          },
                                        )),
                                  ],
                                ),
                              ),
                      ]),
                    );
            },
          )),
    );
  }

  Widget _signedStatus(int status) {
    switch (status) {
      case 1:
        return Text("MỚI TẠO / CHỜ BẠN KÝ", style: TextStyle(color: Colors.blue));
      case 10:
        return Text("BẠN ĐÃ KÝ / CHỜ CÔNG TY", style: TextStyle(color: Colors.blue));
      case 99:
        return Text("CÔNG TY ĐÃ DUYỆT / HOÀN TẤT", style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold));
      case 0:
        return Text("ĐÃ BỊ HỦY", style: TextStyle(color: Colors.blue));
      default:
        return Text("");
    }
  }
}

import 'dart:io';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_masked_text/flutter_masked_text.dart';
// import 'package:html_editor/html_editor.dart';
import 'package:image_picker/image_picker.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/course/course_blocs.dart';
import '../customs/feedback.dart';
import '../dto/const.dart';
import '../dto/item_dto.dart';
import '../dto/user_dto.dart';
import '../widgets/gradient_button.dart';
import '../widgets/loading_widget.dart';

class CourseFormScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _CourseFormScreen();
}

class _CourseFormScreen extends State<CourseFormScreen> {
  // GlobalKey<HtmlEditorState> keyEditor = GlobalKey();
  final _formKey = GlobalKey<FormState>();
  final dateMask = new MaskedTextController(mask: '0000-00-00');
  final timeStartMask = new MaskedTextController(mask: '00:00');
  final timeEndMask = new MaskedTextController(mask: '00:00');
  AuthBloc _authBloc;
  CourseBloc _courseBloc;
  ItemDTO _itemDTO;
  int editId;
  UserDTO _user;
  final ImagePicker _imagePicker = ImagePicker();

  @override
  void didChangeDependencies() {
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    _courseBloc = BlocProvider.of<CourseBloc>(context);

    super.didChangeDependencies();
  }

  @override
  void initState() {
    super.initState();
    _itemDTO = new ItemDTO(
      type: MyConst.ITEM_COURSE,
    );
  }

  @override
  void dispose() {
    _itemDTO = null;
    editId = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    editId = ModalRoute.of(context).settings.arguments;
    double width = MediaQuery.of(context).size.width;
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
        if (state is AuthSuccessState) {
          if (state.user.updateDoc == 0) {
            Navigator.of(context).popAndPushNamed("/account/docs", arguments: state.user.token);
          }
          if (state.user.isSigned < MyConst.CONTRACT_SIGNED) {
            Navigator.of(context).popAndPushNamed("/contract/" + state.user.role);
          }
          _user = state.user;
          if (editId != null && editId > 0) {
            _courseBloc..add(LoadCourseEvent(id: editId, token: _user.token));
          }
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Thông tin khóa học"),
          centerTitle: false,
          actions: <Widget>[
            IconButton(
                icon: Icon(Icons.save),
                onPressed: () async {
                  if (_formKey.currentState.validate()) {
                    _formKey.currentState.save();
                    _itemDTO.content = ""; // await keyEditor.currentState.getText();
                    _courseBloc..add(SaveCourseEvent(item: _itemDTO, token: _user.token));
                  }
                })
          ],
        ),
        body: BlocListener<CourseBloc, CourseState>(
          bloc: _courseBloc,
          listener: (context, state) {
            if (state is CourseFailState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text(state.error.toString()),
                ));
            }
            if (state is CourseSaveSuccessState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text("Lưu khóa học thành công."),
                ));
              _itemDTO = new ItemDTO(
                type: MyConst.ITEM_COURSE,
              );
              Navigator.of(context).popUntil(ModalRoute.withName("/"));
              Navigator.of(context).pushNamed("/course/list");
            }
            if (state is UploadImageSuccessState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text("Cập nhật hình ảnh thành công."),
                ));
              _itemDTO.image = state.url;
            }
          },
          child: BlocBuilder<CourseBloc, CourseState>(
            bloc: _courseBloc,
            builder: (context, state) {
              if (state is CourseLoadSuccess) {
                _itemDTO = state.item;
                dateMask.text = _itemDTO.dateStart;
                timeStartMask.text = _itemDTO.timeStart;
                timeEndMask.text = _itemDTO.timeEnd;
              }
              return (editId == null || (editId > 0 && _itemDTO.id != null))
                  ? CustomFeedback(
                      user: _user,
                      child: Form(
                          key: _formKey,
                          child: ListView(
                            children: [
                              Container(
                                padding: EdgeInsets.all(10),
                                child: _itemDTO == null || _itemDTO.id == null
                                    ? Container(
                                        child: Text(
                                        "Sẽ cập nhật được ảnh đại diện khóa học sau khi tạo thành công",
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.grey,
                                        ),
                                      ))
                                    : _imageBox(width / 2),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  validator: (String value) {
                                    if (value.length < 3) {
                                      return "Cần nhập tên khóa học tối thiểu 3 kí tự";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  initialValue: _itemDTO.title != null ? _itemDTO.title : "",
                                  onChanged: (value) {
                                    setState(() {
                                      _itemDTO.title = value;
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Tên khóa học",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  onChanged: (value) {
                                    setState(() {
                                      if (value != "") {
                                        _itemDTO.priceOrg = int.parse(value);
                                      }
                                    });
                                  },
                                  initialValue: _itemDTO.priceOrg != null ? _itemDTO.priceOrg.toString() : "",
                                  decoration: InputDecoration(
                                    labelText: "Học phí gốc",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  validator: (String value) {
                                    if (value == "") {
                                      return "Chưa nhập học phí khóa học";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  initialValue: _itemDTO.price != null ? _itemDTO.price.toString() : "",
                                  onChanged: (value) {
                                    setState(() {
                                      if (value != "") {
                                        _itemDTO.price = int.parse(value);
                                      }
                                    });
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Học phí",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  validator: (String value) {
                                    if (value == "") {
                                      return "Chưa nhập ngày diễn ra";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  onChanged: (value) {
                                    setState(() {
                                      _itemDTO.dateStart = value;
                                    });
                                  },
                                  controller: dateMask,
                                  decoration: InputDecoration(
                                    labelText: "Ngày diễn ra (yyyy-MM-dd)",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  onChanged: (value) {
                                    setState(() {
                                      _itemDTO.timeStart = value;
                                    });
                                  },
                                  controller: timeStartMask,
                                  validator: (String value) {
                                    if (value == "") {
                                      return "Chưa nhập giờ bắt đầu";
                                    }
                                    _formKey.currentState.save();
                                    return null;
                                  },
                                  decoration: InputDecoration(
                                    labelText: "Giờ bắt đầu (HH:mm)",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  onChanged: (value) {
                                    setState(() {
                                      _itemDTO.timeEnd = value;
                                    });
                                  },
                                  controller: timeEndMask,
                                  decoration: InputDecoration(
                                    labelText: "Giờ kết thúc",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  onChanged: (value) {
                                    setState(() {
                                      _itemDTO.location = value;
                                    });
                                  },
                                  initialValue: _itemDTO.location ?? "",
                                  decoration: InputDecoration(
                                    labelText: "Địa điểm/Room online",
                                  ),
                                ),
                              ),
                              Container(
                                padding: EdgeInsets.only(left: 15, right: 15),
                                child: TextFormField(
                                  maxLines: 3,
                                  onChanged: (value) {
                                    setState(() {
                                      _itemDTO.shortContent = value;
                                    });
                                  },
                                  initialValue: _itemDTO.shortContent ?? "",
                                  decoration: InputDecoration(
                                    labelText: "Giới thiệu ngắn",
                                  ),
                                ),
                              ),
                              Padding(
                                padding: EdgeInsets.only(left: 15, right: 15, top: 10),
                                child: Text("Nội dung khóa học vui lòng cập nhật từ website"),
                              ),
                              // Container(
                              //   padding: EdgeInsets.all(15),
                              //   child: HtmlEditor(
                              //     // hint: "Nội dung khóa học",
                              //     value: _itemDTO.content ?? "",
                              //     key: keyEditor,
                              //     height: 400,
                              //     showBottomToolbar: true,
                              //   ),

                              // ),
                              Padding(
                                padding: EdgeInsets.all(15),
                                child: GradientButton(
                                  height: 48,
                                  title: "Lưu khóa học",
                                  function: () {
                                    _submit();
                                  },
                                ),
                              ),
                            ],
                          )),
                    )
                  : LoadingWidget();
            },
          ),
        ),
      ),
    );
  }

  void _submit() async {
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();
      _itemDTO.content = ""; //await keyEditor.currentState.getText();
      _courseBloc.add(SaveCourseEvent(item: _itemDTO, token: _user.token));
    }
  }

  Widget _imageBox(double size) {
    return Container(
        height: size,
        width: size,
        alignment: Alignment.bottomRight,
        decoration: _itemDTO.image != null
            ? BoxDecoration(
                image: DecorationImage(
                  image: CachedNetworkImageProvider(_itemDTO.image),
                  fit: BoxFit.scaleDown,
                ),
              )
            : null,
        child: BlocBuilder(
          bloc: _courseBloc,
          builder: (context, state) {
            if (state is UploadImageInprogressState) {
              return LoadingWidget();
            }
            return IconButton(
              icon: Icon(Icons.camera_alt),
              iconSize: 28.0,
              color: Colors.grey,
              onPressed: () {
                _getImage();
              },
            );
          },
        ));
  }

  Future _getImage() async {
    final PickedFile image = await _imagePicker.getImage(
      source: ImageSource.gallery,
    );
    if (image != null) {
      _courseBloc.add(CourseUploadImageEvent(token: _user.token, image: File(image.path), itemId: _itemDTO.id));
    }
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/course/course_blocs.dart';
import '../customs/feedback.dart';
import '../dto/user_courses_dto.dart';
import '../dto/user_dto.dart';
import '../widgets/loading_widget.dart';
import 'account/course_list_tab.dart';

class CourseListScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _AccountCalendarScreen();
}

class _AccountCalendarScreen extends State<CourseListScreen> with TickerProviderStateMixin {
  TabController _tabController;
  AuthBloc _authBloc;
  CourseBloc _courseBloc;
  UserCoursesDTO _data;
  UserDTO _user;

  @override
  void didChangeDependencies() {
    _tabController = new TabController(vsync: this, length: 2, initialIndex: 0);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    _courseBloc = BlocProvider.of<CourseBloc>(
        context); //CourseBloc(itemRepository: RepositoryProvider.of<ItemRepository>(context));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
        if (state is AuthSuccessState) {
          _user = state.user;
          _courseBloc..add(ListCourseEvent(token: _user.token));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          centerTitle: false,
          actions: <Widget>[
            IconButton(
                icon: Icon(Icons.add),
                onPressed: () {
                  Navigator.of(context).pushNamed("/course/form");
                }),
          ],
          title: const Text("Khóa học của bạn"),
          bottom: TabBar(controller: _tabController, tabs: [
            Tab(child: Text("Đang mở")),
            Tab(child: Text("Đã xong")),
          ]),
        ),
        body: Padding(
          padding: const EdgeInsets.only(top: 10, bottom: 10),
          child: BlocListener<CourseBloc, CourseState>(
            bloc: _courseBloc,
            listener: (context, state) {
              if (state is CourseFailState) {
                 ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                  content: Text(state.error.toString()),
                ));
              }
              if (state is CourseSaveSuccessState) {
                _courseBloc..add(ListCourseEvent(token: _user.token));
              }
              if (state is CourseUserStatusSuccessState) {
                _courseBloc..add(ListCourseEvent(token: _user.token));
              }
            },
            child: BlocBuilder<CourseBloc, CourseState>(
                bloc: _courseBloc,
                builder: (context, state) {
                  if (state is CourseListSuccessState) {
                    _data = state.data;
                  }
                  return _data == null
                      ? TabBarView(
                          controller: _tabController,
                          children: [LoadingWidget(), Text("")],
                        )
                      : CustomFeedback(
                          user: _user,
                          child: TabBarView(controller: _tabController, children: [
                            CourseList(
                              list: _data.open,
                              hasMenu: true,
                              courseBloc: _courseBloc,
                              user: _user,
                            ),
                            CourseList(
                              list: _data.close,
                              hasMenu: false,
                            ),
                          ]));
                }),
          ),
        ),
      ),
    );
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:anylearn/dto/class_registered_user.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/course/course_blocs.dart';
import '../dto/course_registered_params_dto.dart';
import '../widgets/loading_widget.dart';

class CourseRegisteredScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _CourseRegisteredScreen();
}

class _CourseRegisteredScreen extends State<CourseRegisteredScreen> {
  CourseBloc _courseBloc;
  List<ClassRegisteredUserDTO> users;

  @override
  void didChangeDependencies() {
    final CourseRegisteredPramsDTO params = ModalRoute.of(context).settings.arguments;
    if (params == null) {
      Navigator.of(context).pop();
    }
    _courseBloc = BlocProvider.of<CourseBloc>(context)
      ..add(RegisteredUsersEvent(token: params.token, itemId: params.itemId));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: false,
        title: const Text("Thành viên đăng ký khóa học"),
      ),
      body: Padding(
        padding: const EdgeInsets.only(top: 10, bottom: 10),
        child: BlocListener<CourseBloc, CourseState>(
          bloc: _courseBloc,
          listener: (context, state) {},
          child: BlocBuilder<CourseBloc, CourseState>(
              bloc: _courseBloc,
              builder: (context, state) {
                if (state is RegisteredUsersSuccessState) {
                  users = state.users;
                }
                return users == null
                    ? LoadingWidget()
                    : ListView.separated(
                        itemBuilder: (context, index) {
                          return ListTile(
                            leading: users[index].image == null
                                ? Icon(Icons.account_circle)
                                : Container(width: 50, child: CustomCachedImage(url: users[index].image)),
                            title: Text(users[index].name +
                                (users[index].name != users[index].child ? " [" + users[index].child + "]" : "")),
                          //  subtitle: Text(users[index].phone),
                          );
                        },
                        separatorBuilder: (context, index) => Divider(),
                        itemCount: users.length);
              }),
        ),
      ),
    );
  }
}


import 'dart:io';

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/transaction/transaction_blocs.dart';
import '../customs/feedback.dart';
import '../dto/const.dart';
import '../dto/transaction_config_dto.dart';
import '../dto/user_dto.dart';
import '../models/transaction_repo.dart';
import '../widgets/bank_info.dart';
import '../widgets/loading_widget.dart';
import 'transaction/deposit_list.dart';

class DepositScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _DepositScreen();
}

class _DepositScreen extends State<DepositScreen> {
  final _formKey = GlobalKey<FormState>();
  final _amountInput = TextEditingController();
  final _moneyFormat = NumberFormat("###,###,###", "vi_VN");
  final _dateFormat = DateFormat("HH:mm dd/MM/yyyy");
  final voucherController = TextEditingController();

  String _suggestText = "Nhập số tiền cần nhập hoặc chọn nhanh từ danh sách phía dưới";
  TransactionBloc _transBloc;
  AuthBloc _authBloc;
  TransactionConfigDTO config;
  var _paymentSelect = "atm";
  UserDTO user;

  @override
  void didChangeDependencies() {
    final transRepo = RepositoryProvider.of<TransactionRepository>(context);
    _transBloc = TransactionBloc(transactionRepository: transRepo);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  void dispose() {
    _amountInput.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
        if (state is AuthSuccessState) {
          user = state.user;
          _transBloc.add(LoadTransactionPageEvent(type: MyConst.TRANS_TYPE_DEPOSIT, token: user.token));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Nạp tiền vào tài khoản"),
          centerTitle: false,
        ),
        body: BlocProvider<TransactionBloc>(
          create: (BuildContext context) => _transBloc,
          child: BlocListener<TransactionBloc, TransactionState>(
            listener: (BuildContext context, TransactionState state) {
              if (state is TransactionDepositeSaveSuccessState) {
                _transBloc..add(LoadTransactionPageEvent(type: MyConst.TRANS_TYPE_DEPOSIT, token: user.token));
                if (_paymentSelect == MyConst.PAYMENT_VOUCHER) {
                  _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
                  Scaffold.of(context)
                    ..hideCurrentSnackBar()
                    ..showSnackBar(new SnackBar(
                      content: Text("Nhập voucher thành công."),
                      duration: Duration(seconds: 2),
                    ));
                } else {
                  Scaffold.of(context)
                    ..hideCurrentSnackBar()
                    ..showSnackBar(new SnackBar(
                      content: Text("Gửi lệnh nạp tiền thành công. Vui lòng kiểm tra bước tiếp theo."),
                      duration: Duration(seconds: 1),
                    )).closed.then((value) => showDialog(
                        context: context,
                        builder: (context) {
                          return BankInfo(bankDTO: config.depositBank, phone: user.phone);
                        }));
                }
              }
              if (state is TransactionSaveFailState) {
                Scaffold.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(new SnackBar(
                    content: Text(state.error.toString()),
                  ));
              }
            },
            child: BlocBuilder<TransactionBloc, TransactionState>(builder: (context, state) {
              if (state is TransactionConfigSuccessState) {
                config = state.configs;
              }
              return config == null
                  ? LoadingWidget()
                  : CustomFeedback(
                      user: user,
                      child: (Platform.isIOS && user != null && !user.enableIosTrans)
                          ? Container(
                              height: 200,
                              width: double.infinity,
                              padding: EdgeInsets.all(15),
                              child: Text("CHỨC NĂNG KHÔNG HỖ TRỢ"),
                            )
                          : Form(
                              key: _formKey,
                              child: Container(
                                  padding: EdgeInsets.all(8.0),
                                  child: ListView(
                                    children: <Widget>[
                                      Card(
                                        child: Container(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Row(children: [
                                            Expanded(
                                              child: Text.rich(
                                                TextSpan(
                                                  text: "SỐ DƯ: ",
                                                  style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                                  children: [
                                                    TextSpan(
                                                        text: _moneyFormat.format(user.walletM),
                                                        style: TextStyle(
                                                            color: Colors.green,
                                                            fontWeight: FontWeight.bold,
                                                            fontSize: 16.0)),
                                                  ],
                                                ),
                                              ),
                                            ),
                                            Text.rich(
                                              TextSpan(
                                                  text: "GIAO DỊCH",
                                                  style: TextStyle(color: Colors.blue),
                                                  recognizer: TapGestureRecognizer()
                                                    ..onTap = () {
                                                      Navigator.of(context).pushNamed("/transaction");
                                                    }),
                                            ),
                                          ]),
                                        ),
                                      ),
                                      Card(
                                        child: Container(
                                            padding: const EdgeInsets.all(8.0),
                                            child: Column(crossAxisAlignment: CrossAxisAlignment.stretch, children: [
                                              TextFormField(
                                                controller: _amountInput,
                                                style: TextStyle(fontSize: 32.0, fontWeight: FontWeight.bold),
                                                onChanged: (value) {
                                                  setState(() {
                                                    _suggestText = _buildSuggestText(value, config);
                                                  });
                                                },
                                                validator: (String value) {
                                                  if (value.isEmpty && _paymentSelect != "voucher") {
                                                    return "Bạn chưa nhập số tiền muốn nạp";
                                                  }
                                                  if (int.tryParse(value) < 0) {
                                                    return "Số tiền không đúng";
                                                  }
                                                  _formKey.currentState.save();
                                                  return null;
                                                },
                                                decoration: InputDecoration(
                                                    hintText: "Nhập số tiền cần nạp",
                                                    hintStyle: TextStyle(
                                                      fontSize: 20.0,
                                                      fontWeight: FontWeight.normal,
                                                    ),
                                                    icon: Text(
                                                      "VND",
                                                      style: TextStyle(fontWeight: FontWeight.bold),
                                                    )),
                                              ),
                                              Padding(
                                                padding: const EdgeInsets.all(8.0),
                                                child: Text(
                                                  _suggestText,
                                                  style: TextStyle(fontSize: 12.0),
                                                ),
                                              ),
                                            ])),
                                      ),
                                      _buildSuggestInputs(context, config),
                                      Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: Text(
                                          "Phương thức thanh toán".toUpperCase(),
                                          style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                        ),
                                      ),
                                      RadioListTile(
                                        dense: true,
                                        title: Text(
                                          "Tôi có Voucher",
                                          style: TextStyle(fontWeight: FontWeight.bold),
                                        ),
                                        subtitle: Column(children: [
                                          Text("Nhập mã voucher và nhấn nút Nạp để nhận ưu đãi của bạn"),
                                          _paymentSelect != MyConst.PAYMENT_VOUCHER
                                              ? SizedBox(height: 0)
                                              : Container(
                                                  child: TextFormField(
                                                    controller: voucherController,
                                                    decoration: InputDecoration(
                                                      hintText: "Nhập voucher của bạn",
                                                    ),
                                                  ),
                                                )
                                        ]),
                                        value: MyConst.PAYMENT_VOUCHER,
                                        groupValue: _paymentSelect,
                                        onChanged: (value) {
                                          setState(() {
                                            _paymentSelect = MyConst.PAYMENT_VOUCHER;
                                          });
                                        },
                                      ),
                                      Divider(),
                                      RadioListTile(
                                        dense: true,
                                        title: Text(
                                          "Chuyển khoản ngân hàng",
                                          style: TextStyle(fontWeight: FontWeight.bold),
                                        ),
                                        subtitle: Text(
                                            "Thông tin chuyển khoản sẽ được gửi tới quý khách hàng ngay khi xác nhận nạp tiền."),
                                        value: MyConst.PAYMENT_ATM,
                                        groupValue: _paymentSelect,
                                        onChanged: (value) {
                                          setState(() {
                                            _paymentSelect = MyConst.PAYMENT_ATM;
                                          });
                                        },
                                      ),
                                      Divider(),
                                      RadioListTile(
                                        dense: true,
                                        title: Text.rich(TextSpan(
                                            text: "Đổi điểm.",
                                            style: TextStyle(fontWeight: FontWeight.bold),
                                            children: [
                                              TextSpan(
                                                  text: " Bạn đang có: ",
                                                  style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.normal)),
                                              TextSpan(
                                                  text: _moneyFormat.format(user.walletC),
                                                  style: TextStyle(color: Colors.orange)),
                                              TextSpan(
                                                  text: " điểm",
                                                  style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.normal)),
                                            ])),
                                        subtitle: Text("Bạn sẽ được chuyển sang trang đổi điểm."),
                                        value: "walletc",
                                        groupValue: _paymentSelect,
                                        onChanged: (value) {
                                          Navigator.of(context).pushNamed("/exchange");
                                        },
                                      ),
                                      Container(
                                        margin: EdgeInsets.only(top: 15.0),
                                        decoration: BoxDecoration(
                                          gradient: LinearGradient(
                                              colors: [Colors.blue, Colors.lightBlueAccent, Colors.blue]),
                                          borderRadius: BorderRadius.circular(10.0),
                                        ),
                                        height: 40.0,
                                        child: FlatButton(
                                            onPressed: () {
                                              if (_formKey.currentState.validate()) {
                                                _formKey.currentState.save();
                                                if (_paymentSelect == MyConst.PAYMENT_VOUCHER) {
                                                  _transBloc
                                                    ..add(SaveDepositEvent(
                                                        token: user.token,
                                                        amount: voucherController.text,
                                                        payment: _paymentSelect));
                                                } else {
                                                  showDialog(
                                                      context: context,
                                                      builder: (context) {
                                                        return AlertDialog(
                                                          content: Text(
                                                              "Bạn đang gửi lệnh nạp ${_moneyFormat.format(int.parse(_amountInput.text))} vào Tài khoản tiền."),
                                                          actions: <Widget>[
                                                            FlatButton(
                                                                onPressed: () {
                                                                  Navigator.of(context).pop();
                                                                },
                                                                child: Text("Nhập lại")),
                                                            RaisedButton(
                                                              color: Colors.blue,
                                                              onPressed: () {
                                                                _transBloc
                                                                  ..add(SaveDepositEvent(
                                                                      token: user.token,
                                                                      amount: _amountInput.text,
                                                                      payment: _paymentSelect));
                                                                Navigator.of(context).pop();
                                                              },
                                                              child: Text("Nạp tiền"),
                                                            )
                                                          ],
                                                        );
                                                      });
                                                }
                                              }
                                            },
                                            child: Text(
                                              "NẠP TIỀN",
                                              style: TextStyle(fontSize: 16.0, color: Colors.white),
                                            )),
                                      ),
                                      Divider(
                                        thickness: 0,
                                        height: 20.0,
                                        color: Colors.transparent,
                                      ),
                                      Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: Text(
                                          "Lịch sử nạp tiền gần đây".toUpperCase(),
                                          style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                        ),
                                      ),
                                      new DepositList(
                                        list: config.lastTransactions,
                                        configBank: config.depositBank,
                                        phone: user.phone,
                                      ),
                                      config.lastTransactions.length > 0
                                          ? Center(
                                              child: Text.rich(
                                                TextSpan(
                                                    text: "TOÀN BỘ GIAO DỊCH",
                                                    style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
                                                    recognizer: TapGestureRecognizer()
                                                      ..onTap = () {
                                                        Navigator.of(context).pushNamed("/transaction");
                                                      }),
                                              ),
                                            )
                                          : SizedBox(height: 0)
                                    ],
                                  )),
                            ),
                    );
              // );
            }),
          ),
        ),
      ),
    );
  }

  Widget _buildSuggestInputs(BuildContext context, TransactionConfigDTO config) {
    double width = MediaQuery.of(context).size.width / 6;
    double height = (config.suggests.length / config.suggestInputColumn).ceilToDouble() * width;
    return Container(
      padding: EdgeInsets.only(top: 15),
      height: height,
      child: GridView.count(
        childAspectRatio: 3.0,
        crossAxisCount: config.suggestInputColumn,
        // mainAxisSpacing: 10.0,
        // crossAxisSpacing: 10.0,
        children: config.suggests
            .map(
              (e) => InkWell(
                onTap: () {
                  _amountInput.text = e.toString();
                  setState(() {
                    _suggestText = _buildSuggestText(e.toString(), config);
                  });
                },
                child: Card(
                  child: Container(
                    alignment: Alignment.center,
                    child: Text(
                      _moneyFormat.format(e),
                      style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: e == config.vipFee ? Colors.redAccent : Colors.blueAccent),
                    ),
                  ),
                ),
              ),
            )
            .toList(),
      ),
    );
  }

  String _buildSuggestText(String value, TransactionConfigDTO config) {
    String suggestText = "";
    final input = int.parse(value);
    DateTime vipStart = DateTime.now();
    if (user.expire > 0) {
      DateTime userVipExpire = new DateTime.fromMillisecondsSinceEpoch(user.expire * 1000);
      if (userVipExpire.isAfter(DateTime.now())) {
        vipStart = userVipExpire;
      }
    }
    suggestText = "Bạn sẽ nạp " + _moneyFormat.format(input);
    if (input == 0) {
      suggestText = "Nhập số tiền cần nhập hoặc chọn nhanh từ danh sách phía dưới";
    } else if (user.walletM < config.vipFee && input < config.vipFee - user.walletM) {
      suggestText += ". Hãy nạp thêm " +
          _moneyFormat.format(config.vipFee - input) +
          " để được tài khoản VIP đến ngày " +
          _dateFormat.format(vipStart.add(new Duration(days: config.vipDays)));
    } else {
      int totalVipDay = (input / (config.vipFee / config.vipDays)).ceil();
      suggestText +=
          " Thời hạn VIP của bạn sẽ đến ngày " + _dateFormat.format(vipStart.add(new Duration(days: totalVipDay)));
    }
    return suggestText;
  }
}



import '../widgets/appbar.dart';
import 'package:flutter/material.dart';

class DevelopingScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: BaseAppBar(
        title: "Đang hoàn thiện",
        screen: "account",
        hasBack: true,
      ),
      body: Container(
        alignment: Alignment.center,
        child: Text("Trang này đang được hoàn thiện."),
      ),
    );
  }

}

import 'dart:async';
import 'dart:io';
import 'dart:ui' as ui;

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';

const directoryName = 'Signature';

class DrawScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _DrawScreen();
}

class _DrawScreen extends State<DrawScreen> {
  GlobalKey<SignatureState> signatureKey = GlobalKey();
  var image;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Signature(key: signatureKey),
      persistentFooterButtons: <Widget>[
        FlatButton(
          child: Text('Ký lại', style: TextStyle(color: Colors.red)),
          onPressed: () {
            signatureKey.currentState.clearPoints();
          },
        ),
        RaisedButton(
          color: Colors.blue,
          child: Text('Lưu chữ ký'),
          onPressed: () async {
            // setRenderedImage(context);
            ui.Image renderedImage = await signatureKey.currentState.rendered;
            setState(() {
              image = renderedImage;
            });
            File file = await getImage(context);
            Navigator.of(context).pop(file);
          },
        )
      ],
    );
  }

  setRenderedImage(BuildContext context) async {
    ui.Image renderedImage = await signatureKey.currentState.rendered;

    setState(() {
      image = renderedImage;
    });

    // showImage(context);
  }

  Future<File> getImage(BuildContext context) async {
    var pngBytes = await image.toByteData(format: ui.ImageByteFormat.png);
    final directory = await getApplicationDocumentsDirectory();
    String path = directory.path;
    await Directory('$path/$directoryName').create(recursive: true);
    final file = File('$path/$directoryName/${formattedDate()}.png')..writeAsBytesSync(pngBytes.buffer.asInt8List());
    return file;
  }

  String formattedDate() {
    // DateTime dateTime = DateTime.now();
    // String dateTimeString = 'Signature'
    return '_my_Signature';
  }
}

class Signature extends StatefulWidget {
  Signature({Key key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return SignatureState();
  }
}

class SignatureState extends State<Signature> {
  // [SignatureState] responsible for receives drag/touch events by draw/user
  // @_points stores the path drawn which is passed to
  // [SignaturePainter]#contructor to draw canvas
  List<Offset> _points = <Offset>[];

  Future<ui.Image> get rendered {
    // [CustomPainter] has its own @canvas to pass our
    // [ui.PictureRecorder] object must be passed to [Canvas]#contructor
    // to capture the Image. This way we can pass @recorder to [Canvas]#contructor
    // using @painter[SignaturePainter] we can call [SignaturePainter]#paint
    // with the our newly created @canvas
    ui.PictureRecorder recorder = ui.PictureRecorder();
    Canvas canvas = Canvas(recorder);
    SignaturePainter painter = SignaturePainter(points: _points);
    var size = context.size;
    painter.paint(canvas, size);
    return recorder.endRecording().toImage(size.width.floor(), size.height.floor());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        child: GestureDetector(
          onPanUpdate: (DragUpdateDetails details) {
            setState(() {
              RenderBox _object = context.findRenderObject();
              Offset _locationPoints = _object.localToGlobal(details.globalPosition);
              final _newLocationPoint = Offset(_locationPoints.dx, _locationPoints.dy - 155);
              _points = new List.from(_points)..add(_newLocationPoint);
            });
          },
          onPanEnd: (DragEndDetails details) {
            setState(() {
              _points.add(null);
            });
          },
          child: CustomPaint(
            painter: SignaturePainter(points: _points),
            size: Size.infinite,
          ),
        ),
      ),
    );
  }

  // clearPoints method used to reset the canvas
  // method can be called using
  //   key.currentState.clearPoints();
  void clearPoints() {
    setState(() {
      _points.clear();
    });
  }
}

class SignaturePainter extends CustomPainter {
  // [SignaturePainter] receives points through constructor
  // @points holds the drawn path in the form (x,y) offset;
  // This class responsible for drawing only
  // It won't receive any drag/touch events by draw/user.
  List<Offset> points = <Offset>[];

  SignaturePainter({this.points});
  @override
  void paint(Canvas canvas, Size size) {
    var paint = Paint()
      ..color = Colors.blue
      ..strokeCap = StrokeCap.round
      ..strokeWidth = 5.0;

    for (int i = 0; i < points.length - 1; i++) {
      if (points[i] != null && points[i + 1] != null) {
        canvas.drawLine(points[i], points[i + 1], paint);
      }
    }
  }

  @override
  bool shouldRepaint(SignaturePainter oldDelegate) {
    return oldDelegate.points != points;
  }
}


import 'package:anylearn/dto/event_dto.dart';
import 'package:anylearn/widgets/calendar_box.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

class DayEvents extends StatelessWidget {
  final EventDTO eventToday;

  const DayEvents({Key key, this.eventToday}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          decoration: eventToday.image != null
              ? BoxDecoration(
                  image: DecorationImage(
                    image:CachedNetworkImageProvider(eventToday.image),
                    fit: BoxFit.cover,
                    colorFilter: new ColorFilter.mode(
                      Colors.black.withOpacity(0.2),
                      BlendMode.dstATop,
                    ),
                  ),
                )
              : null,
          child: ListTile(
            trailing: Icon(Icons.arrow_right),
            leading: eventToday.time == null ? Icon(Icons.calendar_today) :CalendarBox(text: eventToday.time, fontSize: 12.0),
            title: Text(
              eventToday.title,
              style: TextStyle(color: Colors.black),
            ),
            subtitle: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
              Text(
                eventToday.author,
                style: TextStyle(color: Colors.black87),
              ),
              eventToday.content != null ? Text(
                eventToday.content,
                style: TextStyle(color: Colors.black87),
                maxLines: 2,
                softWrap: true,
                overflow: TextOverflow.ellipsis,
              ) : Text(""),
            ]),
            onTap: () {
              Navigator.of(context).pushNamed("/pdp", arguments: eventToday.itemId);
            },
          ),
        ),
        Divider(height: 5.0, thickness: 1.0, color: Colors.grey[100]),
      ],
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:table_calendar/table_calendar.dart';

import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_blocs.dart';
import '../blocs/event/event_bloc.dart';
import '../blocs/event/event_blocs.dart';
import '../customs/feedback.dart';
import '../dto/user_dto.dart';
import '../models/page_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import 'event/day_events.dart';

class EventScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _EventScreen();
}

class _EventScreen extends State<EventScreen> with TickerProviderStateMixin {
  CalendarController _calendarController;
  AnimationController _animationController;
  EventBloc _eventBloc;
  AuthBloc _authBloc;
  UserDTO _user;

  Map<DateTime, List> _events;
  List _selectedEvents;

  @override
  void didChangeDependencies() {
    final PageRepository pageRepository = RepositoryProvider.of<PageRepository>(context);
    _eventBloc = EventBloc(pageRepository: pageRepository)..add(LoadEventEvent(month: DateTime.now()));
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  void initState() {
    super.initState();
    _calendarController = CalendarController();
    _animationController = AnimationController(vsync: this, duration: const Duration(milliseconds: 400));
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    _calendarController.dispose();
    super.dispose();
  }

  void _onDaySelected(DateTime day, List events) {
    setState(() {
      _selectedEvents = events;
    });
  }

  void _onVisibleDaysChanged(DateTime first, DateTime last, CalendarFormat format) {
    _selectedEvents = null;
    _events = null;
    _eventBloc..add(LoadEventEvent(month: first));
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AuthBloc, AuthState>(
        bloc: _authBloc,
        builder: (context, state) {
          if (state is AuthSuccessState) {
            _user = state.user;
          }

          return Scaffold(
            appBar: BaseAppBar(
              title: "Lịch đào tạo & Sự kiện",
              user: _user ?? null,
            ),
            body: BlocProvider<EventBloc>(
              create: (context) => _eventBloc,
              child: BlocBuilder<EventBloc, EventState>(builder: (context, state) {
                if (state is EventSuccessState) {
                  _events = state.data;
                  _selectedEvents =
                      _selectedEvents ?? _events[DateTime.parse(DateFormat('yyyy-MM-dd').format(DateTime.now()))];
                }
                return CustomFeedback(
                  user: _user,
                  child: Column(
                    mainAxisSize: MainAxisSize.max,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      _buildTableCalendarWithBuilders(),
                      Expanded(child: _buildEventList()),
                    ],
                  ),
                );
              }),
            ),
          );
        });
  }

  Widget _buildTableCalendarWithBuilders() {
    return TableCalendar(
      calendarController: _calendarController,
      events: _events,
      initialCalendarFormat: CalendarFormat.month,
      formatAnimation: FormatAnimation.slide,
      startingDayOfWeek: StartingDayOfWeek.monday,
      availableGestures: AvailableGestures.all,
      availableCalendarFormats: const {
        CalendarFormat.month: '',
        CalendarFormat.week: '',
      },
      calendarStyle: CalendarStyle(
        outsideDaysVisible: false,
        weekendStyle: TextStyle().copyWith(color: Colors.blue[800]),
        holidayStyle: TextStyle().copyWith(color: Colors.blue[800]),
      ),
      daysOfWeekStyle: DaysOfWeekStyle(
        weekendStyle: TextStyle().copyWith(color: Colors.blue[600]),
      ),
      headerStyle: HeaderStyle(
        centerHeaderTitle: true,
        formatButtonVisible: false,
      ),
      builders: CalendarBuilders(
        selectedDayBuilder: (context, date, _) {
          return FadeTransition(
            opacity: Tween(begin: 0.0, end: 1.0).animate(_animationController),
            child: Container(
              margin: const EdgeInsets.all(4.0),
              padding: const EdgeInsets.only(top: 5.0, left: 6.0),
              color: Colors.green[300],
              width: 100,
              height: 100,
              child: Text(
                '${date.day}',
                style: TextStyle().copyWith(fontSize: 16.0),
              ),
            ),
          );
        },
        todayDayBuilder: (context, date, _) {
          return Container(
            margin: const EdgeInsets.all(4.0),
            padding: const EdgeInsets.only(top: 5.0, left: 6.0),
            width: 100,
            height: 100,
            child: Text(
              '${date.day}',
              style: TextStyle().copyWith(fontSize: 16.0),
            ),
          );
        },
        markersBuilder: (context, date, events, holidays) {
          final children = <Widget>[];

          if (events.isNotEmpty) {
            children.add(
              Positioned(right: 1, bottom: 1, child: _buildEventsMarker(date, events)),
            );
          }

          return children;
        },
      ),
      onDaySelected: (date, events) {
        _onDaySelected(date, events);
        _animationController.forward(from: 0.0);
      },
      onVisibleDaysChanged: _onVisibleDaysChanged,
    );
  }

  Widget _buildEventsMarker(DateTime date, List events) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 300),
      decoration: BoxDecoration(
        shape: BoxShape.rectangle,
        color: _calendarController.isSelected(date)
            ? Colors.red[500]
            : _calendarController.isToday(date) ? Colors.red[500] : Colors.blue[400],
      ),
      width: 16.0,
      height: 16.0,
      child: Center(
        child: Text(
          '${events.length}',
          style: TextStyle().copyWith(
            color: Colors.white,
            fontSize: 12.0,
          ),
        ),
      ),
    );
  }

  Widget _buildEventList() {
    return ListView(
      children: _selectedEvents == null
          ? []
          : _selectedEvents
              .map((event) => DayEvents(
                    eventToday: event,
                  ))
              .toList(),
    );
  }
}


import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/transaction/transaction_blocs.dart';
import '../dto/const.dart';
import '../dto/transaction_config_dto.dart';
import '../dto/user_dto.dart';
import '../models/transaction_repo.dart';
import '../widgets/loading_widget.dart';
import 'transaction/exchange_list.dart';

class ExchangeScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ExchangeScreen();
}

class _ExchangeScreen extends State<ExchangeScreen> {
  final _formKey = GlobalKey<FormState>();
  final _amountInput = TextEditingController();
  final _ammountMInput = TextEditingController();
  final _moneyFormat = NumberFormat("###,###,###", "vi_VN");
  TransactionBloc _transBloc;
  UserDTO user;
  TransactionConfigDTO config;
  int max;

  @override
  void didChangeDependencies() {
    final transRepo = RepositoryProvider.of<TransactionRepository>(context);
    _transBloc = TransactionBloc(transactionRepository: transRepo);
    BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
        if (state is AuthSuccessState) {
          user = state.user;
          _transBloc.add(LoadTransactionPageEvent(type: MyConst.TRANS_TYPE_EXCHANGE, token: user.token));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Đổi điểm sang tài khoản tiền"),
          centerTitle: false,
        ),
        body: BlocProvider<TransactionBloc>(
          create: (BuildContext context) => _transBloc,
          child: BlocListener<TransactionBloc, TransactionState>(
            listener: (BuildContext context, TransactionState state) {
              if (state is TransactionExchangeSaveSuccessState) {
                BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
                _amountInput.clear();
                _ammountMInput.clear();
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text("Gửi lệnh đổi điểm thành công"),
                    duration: Duration(seconds: 2),
                  )).closed.then((value) {
                    Navigator.of(context).pop();
                  });
              }
              if (state is TransactionSaveFailState) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text(state.error + "| Có lỗi khi lưu, vui lòng thử lại"),
                    duration: Duration(seconds: 2),
                  ));
              }
            },
            child: BlocBuilder<TransactionBloc, TransactionState>(
              builder: (context, state) {
                if (state is TransactionConfigSuccessState) {
                  config = state.configs;
                  max = user.walletC.floor();
                }
                return config == null
                    ? LoadingWidget()
                    : Form(
                        key: _formKey,
                        child: Container(
                            padding: EdgeInsets.all(8.0),
                            child: ListView(
                              children: <Widget>[
                                Card(
                                  child: Container(
                                    padding: const EdgeInsets.all(8.0),
                                    child: Row(children: [
                                      Expanded(
                                          child: Text.rich(
                                        TextSpan(
                                          text: "Số điểm: ".toUpperCase(),
                                          style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                          children: [
                                            TextSpan(
                                                text: _moneyFormat.format(user.walletC),
                                                style: TextStyle(
                                                    color: Colors.orange, fontWeight: FontWeight.bold, fontSize: 16.0)),
                                          ],
                                        ),
                                      )),
                                      Text.rich(
                                        TextSpan(
                                            text: "Lịch sử điểm".toUpperCase(),
                                            style: TextStyle(color: Colors.blue),
                                            recognizer: TapGestureRecognizer()
                                              ..onTap = () {
                                                Navigator.of(context).pushNamed("/transaction", arguments: 1);
                                              }),
                                      ),
                                    ]),
                                  ),
                                ),
                                Container(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.stretch,
                                    children: [
                                      TextFormField(
                                        controller: _amountInput,
                                        style: TextStyle(fontSize: 32.0, fontWeight: FontWeight.bold),
                                        keyboardType: TextInputType.number,
                                        onChanged: (value) {
                                          setState(() {
                                            _ammountMInput.text = (int.parse(value) * config.rate).toString();
                                          });
                                        },
                                        validator: (String value) {
                                          if (value.isEmpty) {
                                            return "Bạn chưa nhập số điểm muốn rút";
                                          }
                                          if (int.parse(value) > max) {
                                            return "Bạn được rút tối đa $max điểm";
                                          }
                                          _formKey.currentState.save();
                                          return null;
                                        },
                                        decoration: InputDecoration(
                                            hintText: "Nhập số điểm muốn rút",
                                            hintStyle: TextStyle(
                                              fontSize: 20.0,
                                              fontWeight: FontWeight.normal,
                                            ),
                                            icon: Text(
                                              "ĐIỂM",
                                              style: TextStyle(fontWeight: FontWeight.bold),
                                            )),
                                      ),
                                      TextFormField(
                                        readOnly: true,
                                        controller: _ammountMInput,
                                        style: TextStyle(fontSize: 24.0, fontWeight: FontWeight.bold),
                                        keyboardType: TextInputType.number,
                                        decoration: InputDecoration(
                                            hintText: "Số tiền quy đổi rút được",
                                            hintStyle: TextStyle(
                                              fontSize: 16.0,
                                              fontWeight: FontWeight.normal,
                                            ),
                                            icon: Text(
                                              "VND",
                                              style: TextStyle(fontWeight: FontWeight.bold),
                                            )),
                                      ),
                                    ],
                                  ),
                                ),
                                Container(
                                  margin: EdgeInsets.only(top: 15.0),
                                  decoration: BoxDecoration(
                                    gradient:
                                        LinearGradient(colors: [Colors.blue, Colors.lightBlueAccent, Colors.blue]),
                                    borderRadius: BorderRadius.circular(10.0),
                                  ),
                                  height: 40.0,
                                  child: FlatButton(
                                      onPressed: () {
                                        if (_formKey.currentState.validate()) {
                                          _formKey.currentState.save();
                                          // showDialog(
                                          //   context: context,
                                          //   builder: (context) {
                                          //     return AlertDialog(
                                          //       content: Text("Chức năng đổi điểm tạm thời chưa hỗ trợ."),
                                          //     );
                                          //   },
                                          // );
                                          _transBloc.add(SaveExchangeEvent(
                                            amount: int.parse(_amountInput.text),
                                            token: user.token,
                                          ));
                                        }
                                      },
                                      child: Text(
                                        "Đổi điểm".toUpperCase(),
                                        style: TextStyle(fontSize: 16.0, color: Colors.white),
                                      )),
                                ),
                                Divider(
                                  thickness: 0,
                                  height: 20.0,
                                  color: Colors.transparent,
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text(
                                    "Lịch sử đổi điểm gần đây".toUpperCase(),
                                    style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                  ),
                                ),
                                ExchangeList(list: config.lastTransactions),
                              ],
                            )),
                      );
              },
            ),
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import '../blocs/transaction/transaction_blocs.dart';
import '../dto/foundation_dto.dart';
import '../models/transaction_repo.dart';
import 'account/transaction_list.dart';
import 'ask/ask_list.dart';
import 'loading.dart';

class FoundationScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _FoundationScreen();
}

class _FoundationScreen extends State<FoundationScreen> with TickerProviderStateMixin {
  final formatMoney = NumberFormat("###,###,###", "vi_VN");
  TransactionBloc _transBloc;
  FoundationDTO data;
  TabController _tabController;

  @override
  void didChangeDependencies() {
    final transRepo = RepositoryProvider.of<TransactionRepository>(context);
    _transBloc = TransactionBloc(transactionRepository: transRepo);

    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    return RefreshIndicator(
      onRefresh: () async {
        _transBloc..add(LoadFoundationEvent());
      },
      child: BlocProvider<TransactionBloc>(
          create: (BuildContext context) => _transBloc..add(LoadFoundationEvent()),
          child: BlocBuilder<TransactionBloc, TransactionState>(builder: (context, state) {
            if (state is FoundationLoadingState) {
              return LoadingScreen();
            }
            if (state is FoundationSuccessState) {
              data = state.value;
              if (_tabController == null) {
                _tabController = new TabController(
                    vsync: this,
                    length: data.enableIosTrans ? 2 : 1,
                    initialIndex: ModalRoute.of(context).settings.arguments ?? 0);
              }

              return Scaffold(
                appBar: AppBar(
                  title: Text("anyLEARN Foundation"),
                  centerTitle: false,
                  actions: [
                    IconButton(
                        icon: Icon(Icons.refresh),
                        onPressed: () {
                          _transBloc..add(LoadFoundationEvent());
                        })
                  ],
                  bottom: PreferredSize(
                    child: Column(
                      children: [
                        Container(
                            alignment: Alignment.center,
                            padding: EdgeInsets.all(10.0),
                            width: double.infinity,
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  MdiIcons.handHeart,
                                  color: Colors.pinkAccent,
                                  size: 30,
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(left: 10),
                                  child: Text(
                                    formatMoney.format(data.value),
                                    style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 30.0),
                                  ),
                                ),
                              ],
                            )),
                        TabBar(
                            controller: _tabController,
                            tabs: data.enableIosTrans
                                ? [Tab(child: Text("Đóng góp")), Tab(child: Text("Điểm tin"))]
                                : [Tab(child: Text("Điểm tin"))]),
                      ],
                    ),
                    preferredSize: Size.fromHeight(100.0),
                  ),
                ),
                body: TabBarView(
                  controller: _tabController,
                  children: data.enableIosTrans
                      ? [
                          TransactionList(
                            transactions: data.history,
                            tab: "wallet_c",
                          ),
                          CustomScrollView(slivers: <Widget>[AskList(data: data.news)]),
                        ]
                      : [
                          CustomScrollView(slivers: <Widget>[AskList(data: data.news)]),
                        ],
                ),
              );
            }
            return LoadingScreen();
          })),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:intl/intl.dart';

import '../blocs/home/home_blocs.dart';
import '../models/page_repo.dart';
import 'loading.dart';

class GuideScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _GuideScreen();
}

class _GuideScreen extends State<GuideScreen> {
  HomeBloc _homeBloc;

  @override
  void didChangeDependencies() {
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    _homeBloc = HomeBloc(pageRepository: pageRepo);
    final path = ModalRoute.of(context).settings.arguments;
    if (path == null) {
      Navigator.of(context).pop();
    }
    _homeBloc..add(LoadGuideEvent(path: path));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width - 10;
    return BlocProvider<HomeBloc>(
      create: (context) => _homeBloc,
      child: BlocListener<HomeBloc, HomeState>(
        listener: (context, state) {
          if (state is GuideFailState) {
            Navigator.of(context).pop();
          }
        },
        child: BlocBuilder(
            bloc: _homeBloc,
            builder: (context, state) {
              if (state is GuideLoadSuccessState) {
                return Scaffold(
                  appBar: AppBar(),
                  body: ListView(children: [
                    Container(
                      padding: EdgeInsets.only(left:15, right: 15.0, bottom: 15),
                      child: Html(
                        data: state.doc.content,
                        shrinkWrap: true,
                      ),
                    ),
                    Divider(),
                    Container(
                      alignment: Alignment.topRight,
                      padding: EdgeInsets.only(right: 15.0, bottom: 15),
                      child: Text(
                        " Cập nhật cuối: " + DateFormat("hh:mm dd/MM/yyyy").format(state.doc.lastUpdate),
                        style: TextStyle(fontStyle: FontStyle.italic, fontSize: 10.0),
                      ),
                    ),
                  ]),
                );
              }
              return LoadingScreen();
            }),
      ),
    );
  }
}


import 'package:badges/badges.dart';
import 'package:flutter/material.dart';

import '../../dto/user_dto.dart';
import '../../main.dart';
import '../../widgets/account_icon.dart';
import '../../widgets/foundation_icon.dart';
import '../../widgets/notification_icon.dart';
import '../webview.dart';
import 'home_top_icons.dart';

class HomeAppBar extends StatefulWidget {
  final UserDTO user;

  const HomeAppBar({Key key, this.user}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _HomeAppBar();
}

class _HomeAppBar extends State<HomeAppBar> {
  @override
  Widget build(BuildContext context) {
    double statusHeight = MediaQuery.of(context).padding.top; //iOS = 44 & Android = 22
    return SliverAppBar(
      expandedHeight: 185 - (statusHeight - 24),
      title: Image.asset(
        "assets/images/logo.png",
        height: 24.0,
      ),
      centerTitle: false,
      floating: false,
      pinned: true,
      actions: <Widget>[
        // AddCourseIcon(),
        // SearchIcon(),
        widget.user == null || !widget.user.enableIosTrans
            ? Text("")
            : Container(
                child: Badge(
                  position: BadgePosition.topEnd(top: 5, end: 5),
                  showBadge: widget.user.cartcount > 0,
                  badgeContent: Text(
                    widget.user.cartcount.toString(),
                    style: TextStyle(color: Colors.white),
                  ),
                  child: IconButton(
                      icon: Icon(Icons.shopping_cart),
                      onPressed: () {
                        Navigator.of(context).push(MaterialPageRoute(
                            builder: (context) => WebviewScreen(
                                  url: config.webUrl + "cart",
                                  token: widget.user.token,
                                )));
                      }),
                ),
              ),
        FoundationIcon(),
        NotificationIcon(
          user: widget.user,
        ),
        AccountIcon(
          user: widget.user,
        ),
      ],
      flexibleSpace: LayoutBuilder(
        builder: (context, bc) {
          return FlexibleSpaceBar(
            centerTitle: false,
            background: new ClipRect(
              child: new Container(
                child: Container(
                    margin: EdgeInsets.fromLTRB(30.0, 90.0, 30.0, 5.0),
                    child: HomeTopIcons(
                      user: widget.user,
                    )),
                decoration: new BoxDecoration(
                  image: DecorationImage(
                      image: AssetImage(
                        "assets/images/bg.png",
                      ),
                      fit: BoxFit.cover),
                ),
              ),
            ),
          );
        },
      ),
    );
  }
}


import 'dart:collection';

import 'package:youtube_player_flutter/youtube_player_flutter.dart';

import '../../dto/home_dto.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:flutter/material.dart';

import '../../customs/custom_cached_image.dart';

class HomeBanner extends StatefulWidget {
  final List<HomeBannerDTO> banners;
  final double ratio;

  const HomeBanner({Key key, this.banners, this.ratio}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _HomeBanner();
}

class _HomeBanner extends State<HomeBanner> {
  Map<String, YoutubePlayerController> _controllers = new HashMap();
  @override
  void initState() {
    widget.banners.forEach((banner) {
      if (banner.route == "video") {
        _controllers.putIfAbsent(
            banner.arg,
            () => YoutubePlayerController(
                initialVideoId: YoutubePlayer.convertUrlToId(banner.arg), flags: YoutubePlayerFlags()));
      }
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width - 80;
    final height = width * widget.ratio;
    return SliverToBoxAdapter(
      child: Container(
        margin: EdgeInsets.only(top:15.0),
        child: CarouselSlider(
          options: CarouselOptions(
            initialPage: 0,
            enlargeCenterPage: true,
            height: height,
            autoPlay: true,
            autoPlayInterval: Duration(seconds: 3),
          ),
          items: _imageSliders(context),
        ),
      ),
    );
  }

  List<Widget> _imageSliders(BuildContext context) {
    return this
        .widget
        .banners
        .map((banner) => Container(
              child: Container(
                margin: EdgeInsets.only(top: 5.0, bottom: 5.0),
                child: ClipRRect(
                  borderRadius: BorderRadius.all(Radius.circular(7.0)),
                  child: _buildBanner(context, banner),
                ),
              ),
            ))
        .toList();
  }

  Widget _buildBanner(BuildContext context, HomeBannerDTO banner) {
    if (banner.route == "video") {
      return YoutubePlayerBuilder(
        player: YoutubePlayer(
          controller: _controllers[banner.arg],
        ),
        builder: (context, player) => Container(
          child: player,
        ),
      );
    } else {
      return InkWell(
        child: CustomCachedImage(url: banner.file),
        onTap: () {
          if (banner.route.isNotEmpty) {
            return Navigator.of(context).pushNamed(banner.route, arguments: banner.arg);
          }
        },
      );
    }
  }
}


import 'package:flutter/material.dart';

class ExitConfirm extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: new Text('Xác nhận!'),
      content: new Text('Bạn có chắc là muốn thoát và đóng Ứng dụng?'),
      actions: <Widget>[
        new FlatButton(
          onPressed: () => Navigator.of(context).pop(true),
          child: new Text('Thoát'),
        ),
        new RaisedButton(
          color: Colors.blue,
          onPressed: () => Navigator.of(context).pop(false),
          child: new Text('Ở lại', style: TextStyle(color: Colors.white),),
        ),
      ],
    );
  }
}


import 'package:flutter/material.dart';

import '../../dto/feature_data_dto.dart';

class FeatureIcon extends StatelessWidget {
  final FeatureDataDTO featureData;
  final double iconSize;

  const FeatureIcon({Key key, this.iconSize: 40.0, this.featureData}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return FlatButton(
      padding: EdgeInsets.all(0.0),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          featureData.icon != null
              ? (featureData.iconBg != null
                  ? Container(
                      padding: EdgeInsets.all(8.0),
                      decoration: BoxDecoration(
                        image: DecorationImage(
                          image: AssetImage("assets/icons/bg/" + featureData.iconBg + ".png"),
                          fit: BoxFit.cover,
                        ),
                      ),
                      child: Icon(
                        featureData.icon,
                        size: (iconSize - 15.0),
                        color: Colors.white,
                      ),
                    )
                  : Icon(
                      featureData.icon,
                      size: iconSize,
                      color: featureData.iconColor ?? Colors.grey[800],
                    ))
              : Container(
                  height: iconSize,
                  width: iconSize,
                  child: Image.network(
                    featureData.iconImage,
                    fit: BoxFit.cover,
                  )),
          Container(
            padding: EdgeInsets.only(top: 5.0),
            alignment: Alignment.center,
            child: Text(
              featureData.title,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
              style: TextStyle(fontSize: 10.0, color: Colors.grey[800]),
            ),
          ),
        ],
      ),
      onPressed: () {
        Navigator.of(context).pushNamed(featureData.route, arguments: featureData.routeParam);
      },
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';

import '../../dto/feature_data_dto.dart';

class FeatureIcon2 extends StatelessWidget {
  final FeatureDataDTO featureData;
  final double iconSize;

  const FeatureIcon2({Key key, this.iconSize: 40.0, this.featureData}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return TextButton(
      child: Container(
        padding: EdgeInsets.all(10.0),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(10),
          color: featureData.bg,
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Icon(
              featureData.icon,
              size: iconSize,
              color: Colors.white,
            ),
            Expanded(
              child: Container(
                alignment: Alignment.center,
                child: Text(
                  featureData.title,
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(fontSize: 14.0, color: Colors.white, fontWeight: FontWeight.bold),
                ),
              ),
            ),
          ],
        ),
      ),
      onPressed: () {
        Navigator.of(context).pushNamed(featureData.route, arguments: featureData.routeParam);
      },
    );
  }
}


import 'package:flutter/material.dart';

import '../../dto/feature_data_dto.dart';
import 'feature_icon2.dart';

class FeatureList extends StatelessWidget {
  final List<FeatureDataDTO> features;

  const FeatureList({Key key, this.features}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width / 2;
    return SliverPadding(
        padding: EdgeInsets.only(bottom: 10.0),
        sliver: SliverGrid(
          gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
            maxCrossAxisExtent: width,
            childAspectRatio: 2.8,
          ),
          delegate: SliverChildBuilderDelegate(
            (BuildContext context, int index) {
              return Container(
                alignment: Alignment.center,
                child: FeatureIcon2(
                  featureData: features[index],
                ),
              );
            },
            childCount: features.length,
          ),
        ));
  }
}


import 'dart:math';

import '../../dto/const.dart';
import '../../widgets/youtube_image.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

import '../../dto/article_dto.dart';

class HomeArticleTabs extends StatefulWidget {
  final List<ArticleDTO> articles;
  final List<ArticleDTO> videos;

  const HomeArticleTabs({Key key, this.articles, this.videos}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _HomeArticleTabs();
}

class _HomeArticleTabs extends State<HomeArticleTabs> with TickerProviderStateMixin {
  TabController _tabController;
  Map<String, List<ArticleDTO>> data;

  @override
  void didChangeDependencies() {
    _tabController =
        new TabController(vsync: this, length: 2, initialIndex: ModalRoute.of(context).settings.arguments ?? 0);
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
        child: DefaultTabController(
      length: 2,
      child: Container(
        height: max(widget.articles.length * 130.0, widget.videos.length * 130.0),
        child: Column(
          children: [
            TabBar(
              labelColor: Colors.blue,
              labelStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
              unselectedLabelColor: Colors.black54,
              tabs: [
                Tab(
                  text: "Đọc để Học",
                ),
                Tab(
                  text: "Xem để học",
                ),
              ],
            ),
            // create widgets for each tab bar here
            Expanded(
              child: TabBarView(
                children: [
                  // first tab bar view widget
                  Container(
                    child: Column(
                      children: widget.articles
                          .map((item) => ListTile(
                                contentPadding: EdgeInsets.all(5),
                                onTap: () => Navigator.of(context).pushNamed("/article", arguments: item.id),
                                leading: Container(
                                  height: 80,
                                  width: 80,
                                  child: _articleImg(item),
                                ),
                                trailing: Icon(Icons.chevron_right),
                                title: Text(
                                  item.title,
                                  maxLines: 2,
                                  style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue),
                                ),
                                subtitle: Text(
                                  item.shortContent ?? "",
                                  maxLines: 3,
                                ),
                              ))
                          .toList(),
                    ),
                  ),

                  // second tab bar viiew widget
                  Container(
                    child: Column(
                      children: widget.videos
                          .map(
                            (item) => ListTile(
                              contentPadding: EdgeInsets.all(5),
                              onTap: () => Navigator.of(context).pushNamed("/article", arguments: item.id),
                              leading: Container(
                                height: 80,
                                width: 80,
                                child: _articleImg(item),
                              ),
                              title: Text(
                                item.title,
                                maxLines: 2,
                                style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue),
                              ),
                              subtitle: Text(
                                item.shortContent ?? "",
                                maxLines: 3,
                              ),
                            ),
                          ).toList(),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    ));
  }

  Widget _articleImg(ArticleDTO articleDTO) {
    if (articleDTO.type == MyConst.ASK_TYPE_VIDEO) {
      return YoutubeImage(
        link: articleDTO.video,
        fit: BoxFit.cover,
      );
    }
    return articleDTO.image == null
        ? Image.asset(
            "assets/images/logo_app.jpg",
            fit: BoxFit.contain,
          )
        : CachedNetworkImage(
            imageUrl: articleDTO.image,
            fit: BoxFit.cover,
          );
  }
}


import 'dart:math' as math;

import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

import '../../dto/article_dto.dart';
import '../../dto/const.dart';
import '../../widgets/youtube_image.dart';

class HomeArticles extends StatelessWidget {
  final List<ArticleDTO> articles;

  const HomeArticles({Key key, this.articles}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    final height = width * 0.5625;
    final imgHeight = height - 32;
    return SliverList(
      delegate: SliverChildBuilderDelegate(
        (context, index) {
          final int itemIndex = index ~/ 2;
          if (index.isEven) {
            return InkWell(
              onTap: () {
                Navigator.of(context).pushNamed("/article", arguments: articles[itemIndex].id);
              },
              child: Card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      height: imgHeight,
                      width: double.infinity,
                      child: _articleImg(articles[itemIndex]),
                    ),
                    Container(padding: EdgeInsets.all(15), child: Text(articles[itemIndex].title, style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),)),
                    articles[itemIndex].shortContent == null
                        ? SizedBox(height: 0)
                        : Container(
                            padding: EdgeInsets.only(left: 15, right: 15, bottom: 15),
                            child: Text(articles[itemIndex].shortContent),
                          ),
                  ],
                ),
              ),
            );
          }
          return Divider(
            height: 10,
            color: Colors.transparent,
          );
        },
        childCount: math.max(0, articles.length * 2 - 1),
        semanticIndexCallback: (Widget widget, int localIndex) {
          if (localIndex.isEven) {
            return localIndex ~/ 2;
          }
          return null;
        },
      ),
    );
  }

  Widget _articleImg(ArticleDTO articleDTO) {
    if (articleDTO.type == MyConst.ASK_TYPE_VIDEO) {
      return YoutubeImage(
        link: articleDTO.video,
        fit: BoxFit.cover,
      );
    }
    return articleDTO.image == null
        ? Image.asset("assets/images/logo_app.jpg", fit: BoxFit.contain,)
        : CachedNetworkImage(
            imageUrl: articleDTO.image,
            fit: BoxFit.cover,
          );
  }
}


import 'package:anylearn/screens/home/home_category.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../blocs/home/home_blocs.dart';
import '../../dto/home_dto.dart';
import '../../dto/user_dto.dart';
import '../../widgets/article_event.dart';
import '../../widgets/loading_widget.dart';
import '../../widgets/promotions.dart';
import 'banner.dart';
import 'features.dart';
import 'home_classes.dart';
import 'quote.dart';
import 'search_box.dart';

bool canShowPopup = true;

class HomeBody extends StatefulWidget {
  final UserDTO user;
  final HomeDTO homeData;
  final HomeBloc homeBloc;

  HomeBody({Key key, this.user, this.homeData, this.homeBloc}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _HomeBody();
}

class _HomeBody extends State<HomeBody> {
  List<HomeClassesDTO> homeClasses = [];
  List<HomeClassesDTO> homeClasses2 = [];
  @override
  void initState() {
    super.initState();
    int classLength = widget.homeData.homeClasses.length;
    if (classLength <= 1) {
      homeClasses = widget.homeData.homeClasses;
    } else {
      widget.homeData.homeClasses.asMap().forEach((key, value) {
        if (key < classLength / 2) {
          homeClasses.add(value);
        } else {
          homeClasses2.add(value);
        }
      });
    }
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      if (widget.homeData.config.ignorePopupVersion != widget.homeData.config.popup.version &&
          widget.homeData.config.popup.image != null &&
          widget.homeData.config.popup.image != "" &&
          canShowPopup) {
        final width = MediaQuery.of(context).size.width;
        final height = width;
        await showDialog<String>(
            context: context,
            builder: (BuildContext context) {
              bool showPopupChecked = false;
              return SimpleDialog(
                contentPadding: EdgeInsets.all(5),
                children: [
                  InkWell(
                    onTap: () {
                      if (widget.homeData.config.popup.route != null) {
                        Navigator.of(context).pop();
                        Navigator.of(context).pushNamed(widget.homeData.config.popup.route,
                            arguments: widget.homeData.config.popup.args);
                      }
                    },
                    child: Container(
                        width: double.infinity,
                        height: height,
                        child: CachedNetworkImage(
                          imageUrl: widget.homeData.config.popup.image,
                          fit: BoxFit.fitWidth,
                          placeholder: (context, url) => Container(
                            alignment: Alignment.center,
                            child: CircularProgressIndicator(),
                          ),
                        )),
                  ),
                  Row(
                    children: [
                      Expanded(child: StatefulBuilder(builder: (BuildContext context, StateSetter setState) {
                        return CheckboxListTile(
                          value: showPopupChecked,
                          onChanged: (bool value) {
                            setState(() {
                              if (value) {
                                widget.homeBloc
                                  ..add(UpdatePopupVersionEvent(version: widget.homeData.config.popup.version));
                              } else {
                                widget.homeBloc..add(UpdatePopupVersionEvent(version: 0));
                              }
                              showPopupChecked = value;
                            });
                          },
                          title: Text("Không xem lại"),
                          dense: true,
                          contentPadding: EdgeInsets.all(0),
                          controlAffinity: ListTileControlAffinity.leading,
                        );
                      })),
                      TextButton(
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                          child: const Text("OK"))
                    ],
                  )
                ],
              );
            });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.grey[200],
      child: CustomScrollView(
        slivers: <Widget>[
          new HomeBanner(
            banners: widget.homeData.homeBanner,
            ratio: widget.homeData.config.bannerRatio ?? 0.5625,
          ),
          SliverToBoxAdapter(child: SearchBox()),
          FeatureList(features: widget.homeData.featuresIcons),
          SliverToBoxAdapter(
            child: Container(
              padding: EdgeInsets.fromLTRB(15.0, 0.0, 20.0, 15.0),
              child: BlocBuilder<HomeBloc, HomeState>(
                bloc: BlocProvider.of<HomeBloc>(context),
                builder: (context, state) {
                  if (state is QuoteSuccessState) {
                    return HomeQuote(quote: state.quote);
                  } else {
                    return LoadingWidget();
                  }
                },
              ),
            ),
          ),
          new HomeCategory(
            categories: widget.homeData.categories,
          ),
          new Promotions(
            hotItems: widget.homeData.promotions,
          ),
          new HomeClasses(
            blocks: homeClasses,
          ),
          new HomeArticleEvent(
            hotItems: widget.homeData.events,
            title: "CÁC SỰ KIỆN SẮP XẢY RA",
          ),
          new HomeClasses(
            blocks: homeClasses2,
          ),
          new HomeArticleEvent(
            hotItems: widget.homeData.articles,
            title: "ĐỌC VÀ HỌC",
          ),
        ],
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_html/shims/dart_ui_real.dart';

import '../../customs/custom_cached_image.dart';
import '../../customs/custom_carousel.dart';
import '../../dto/home_dto.dart';

class HomeCategory extends StatelessWidget {
  final List<CategoryDTO> categories;

  HomeCategory({Key key, this.categories}) : super(key: key);
  double width;

  @override
  Widget build(BuildContext context) {
    width = MediaQuery.of(context).size.width;
    width = width * 2 / 3 - 10;
    return SliverToBoxAdapter(
      child: Container(
        margin: EdgeInsets.only(bottom: 10),
        color: Colors.grey[200],
        child: Column(children: [
          Padding(
            padding: EdgeInsets.fromLTRB(20.0, 0.0, 20.0, 10.0),
            child: Row(
              children: <Widget>[
                Expanded(
                  child: Text(
                    "CÁC CHUYÊN MỤC",
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
              ],
            ),
          ),
          CustomCarousel(
            items: categories,
            builderFunction: _itemSlider,
            height: width / 3 * 2,
            width: width,
          ),
        ]),
      ),
    );
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    final boxWidth = width;
    final imageWH = (boxWidth - 40) / 2;
    return Container(
      width: boxWidth,
      child: Card(
          child: Container(
        padding: EdgeInsets.all(10),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              item.title,
              style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green[600]),
            ),
            Container(
              margin: EdgeInsets.only(top: 10),
              child: Row(
                children: List<Widget>.from(item.items.map((e) => InkWell(
                      onTap: () {
                        Navigator.of(context).pushNamed("/pdp", arguments: e.id);
                      },
                      child: Container(
                        width: imageWH,
                        height: imageWH,
                        margin: EdgeInsets.only(right: 5),
                        decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey[200]), borderRadius: BorderRadius.circular(5)),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(10),
                          // borderRadius: BorderRadius.circular(8.0),
                          child: e.image != null ? CustomCachedImage(url: e.image) : Icon(Icons.broken_image),
                        ),
                      ),
                    ))).toList(),
              ),
            )
          ],
        ),
      )),
    );
  }
}


import 'package:anylearn/widgets/item_card.dart';
import 'package:flutter/material.dart';
import 'package:flutter_html/shims/dart_ui_real.dart';

import '../../customs/custom_cached_image.dart';
import '../../customs/custom_carousel.dart';
import '../../dto/home_dto.dart';
import '../../widgets/price_box.dart';
import '../../widgets/rating.dart';

class HomeClasses extends StatelessWidget {
  final List<HomeClassesDTO> blocks;

  HomeClasses({Key key, this.blocks}) : super(key: key);
  double width;

  @override
  Widget build(BuildContext context) {
    width = MediaQuery.of(context).size.width;
    width = width * 2 / 5 - 10;
    return SliverToBoxAdapter(
      child: Container(
          color: Colors.grey[200],
          child: Column(
              children: blocks
                  .map(
                    (block) => Container(
                      padding: EdgeInsets.only(bottom: 20.0),
                      child: Column(children: [
                        Padding(
                          padding: EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 10.0),
                          child: Row(
                            children: <Widget>[
                              Expanded(
                                child: Text(
                                  block.title.toUpperCase(),
                                  style: TextStyle(fontWeight: FontWeight.bold),
                                ),
                              ),
                            ],
                          ),
                        ),
                        CustomCarousel(
                          items: block.classes,
                          builderFunction: _itemSlider,
                          height: width + 150,
                          width: width,
                        ),
                      ]),
                    ),
                  )
                  .toList())),
    );
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    return Container(
      child: InkWell(
        onTap: () {
          Navigator.of(context).pushNamed("/pdp", arguments: item.id);
        },
        child: Container(
          width: width,
          child: ItemCard(
            item: item,
            width: width,
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';

import '../../dto/const.dart';
import '../../dto/feature_data_dto.dart';
import '../../dto/user_dto.dart';
import '../../models/default_feature_data.dart';
import 'feature_icon.dart';

class HomeTopIcons extends StatelessWidget {
  final UserDTO user;

  const HomeTopIcons({Key key, this.user}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    List<FeatureDataDTO> icons =
        defaultHomeFeatures(user == null ? MyConst.ROLE_GUEST : user.role, user == null ? null : user.id);
    return Container(
      padding: EdgeInsets.only(top: 10.0, bottom: 10.0),
      child: Row(
        children: icons?.map((e) {
          return Expanded(
            child: FeatureIcon(
              featureData: e,
              iconSize: 32.0,
            ),
          );
        }).toList(),
      ),
    );
  }
}


import 'package:anylearn/dto/quote_dto.dart';
import 'package:flutter/material.dart';

class HomeQuote extends StatelessWidget {
  final QuoteDTO quote;

  const HomeQuote({Key key, this.quote}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      child: Stack(
        children: [
          Container(
            padding: EdgeInsets.only(top: 15.0, bottom: 15.0),
            child: Container(
              padding: EdgeInsets.all(20.0),
              height: 80.0,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(10.0),
                image: DecorationImage(image: AssetImage("assets/images/quote-bg.png"), fit: BoxFit.cover),
              ),
              child: Text.rich(
                TextSpan(
                  text: quote.text,
                  style: TextStyle(fontSize: 12, color: Colors.white),
                  children: [
                    TextSpan(
                        text: " " + quote.author,
                        style: TextStyle(fontStyle: FontStyle.italic, fontSize: 11, color: Colors.pink[50]))
                  ],
                ),
                textAlign: TextAlign.justify,
              ),
            ),
          ),
          Positioned(
            top: 0,
            left: 10.0,
            child: Container(
              width: 33.0,
              height: 27.0,
              child: Image.asset("assets/images/quote-top.png"),
            ),
          ),
          Positioned(
            right: 10.0,
            bottom: 0,
            child: Container(
              width: 33.0,
              height: 27.0,
              child: Image.asset("assets/images/quote-bottom.png"),
            ),
          ),
        ],
      ),
    );
  }
}


import '../../dto/user_dto.dart';
import 'package:flutter/material.dart';

import '../../customs/custom_search_delegate.dart';

class SearchBox extends StatelessWidget {
  final searchController = TextEditingController();
  final UserDTO user;

  SearchBox({Key key, this.user}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 120,
      padding: EdgeInsets.only(left: 20, right: 20, top: 10, bottom: 10),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.only(bottom: 10.0),
            child: Text.rich(TextSpan(
                text: "Tìm kiếm Trường học và Chuyên gia hàng đầu\n Khóa học Offline và Online",
              ), textAlign: TextAlign.center, style: TextStyle(color: Colors.grey[600]),),
          ),
          Container(
            decoration: BoxDecoration(
              boxShadow: [
                BoxShadow(
                  color: Colors.grey.withOpacity(0.5),
                  spreadRadius: 5,
                  blurRadius: 20,
                ),
              ],
            ),
            margin: const EdgeInsets.only(right: 20.0, left: 20.0),
            child: TextFormField(
              controller: searchController,
              onTap: () {
                showSearch(context: context, delegate: CustomSearchDelegate(screen: ""), query: searchController.text);
              },
              onFieldSubmitted: (value) {
                showSearch(context: context, delegate: CustomSearchDelegate(screen: ""), query: value);
              },
              decoration: InputDecoration(
                  filled: true,
                  fillColor: Colors.white,
                  contentPadding: const EdgeInsets.symmetric(vertical: 5.0, horizontal: 20),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(30),
                    borderSide: BorderSide(color: Colors.transparent, width: 0),
                  ),
                  focusedBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(30),
                    borderSide: BorderSide(color: Colors.transparent, width: 0),
                  ),
                  hintText: "Hôm nay bạn muốn học gì ?",
                  hintStyle: TextStyle(color: Colors.grey),
                  suffixIcon: Icon(
                    Icons.search,
                    color: Colors.green[600],
                  )

                  // onPressed: () {
                  //   showSearch(context: context, delegate: CustomSearchDelegate(screen: ""), query: searchController.text);
                  // },
                  // ),
                  ),
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:anylearn/dto/feature_data_dto.dart';
import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import 'feature_icon.dart';

class WalletCard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Card(
      child: Column(
        children: <Widget>[
          Container(
            alignment: Alignment.centerLeft,
            child: Text(
              "Tài khoản của tôi",
              style: TextStyle(fontSize: 12.0),
            ),
            padding: EdgeInsets.all(10.0),
            decoration: const BoxDecoration(border: Border(bottom: BorderSide(width: 0.1))),
          ),
          Container(
            padding: EdgeInsets.only(top: 10.0, bottom: 10.0),
            child: Row(
              children: [
                Expanded(
                  child: FeatureIcon(
                    featureData: FeatureDataDTO(icon: Icons.input , title: "Nạp tiền", route: "/deposit", iconColor: Colors.green),
                    iconSize: 24.0,
                  ),
                ),
                Expanded(
                  child: FeatureIcon(
                    featureData:
                        FeatureDataDTO(icon: Icons.monetization_on, title: "Rút tiền", route: "/withdraw", iconColor: Colors.purple),
                    iconSize: 24.0,
                  ),
                ),
                Expanded(
                  child: FeatureIcon(
                    featureData: FeatureDataDTO(icon: MdiIcons.gift , title: "Điểm", route: "/exchange", iconColor: Colors.orange),
                    iconSize: 24.0,
                  ),
                ),
                Expanded(
                  child: FeatureIcon(
                    featureData: FeatureDataDTO(icon: Icons.receipt, title: "Giao dịch", route: "/transaction", iconColor: Colors.blue),
                    iconSize: 24.0,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:anylearn/dto/item_dto.dart';
import 'package:anylearn/widgets/calendar_box.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'dart:math' as math;

import 'package:intl/intl.dart';

class WeekCourses extends StatelessWidget {
  final List<ItemDTO> monthCourses;
  final DateFormat _formatDate = DateFormat("dd/MM");

  WeekCourses({Key key, this.monthCourses}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return SliverList(
      delegate: SliverChildBuilderDelegate(
        (context, index) {
          final int itemIndex = index ~/ 2;
          if (index.isEven) {
            final width = MediaQuery.of(context).size.width;
            final imgH = (width - 40) / 3;
            final imgW = (width - 40) / 3;
            return Container(
              padding: EdgeInsets.fromLTRB(20, 10, 20, 10),
              child: InkWell(
                onTap: () {
                  Navigator.of(context).pushNamed("/pdp", arguments: monthCourses[itemIndex].id);
                },
                child: Stack(children: [
                  Container(
                      margin: EdgeInsets.only(top: imgH / 4, left: 10),
                      child: ConstrainedBox(
                        constraints: new BoxConstraints(
                          minHeight: imgH * 3 / 4 + 15,
                        ),
                        child: Card(
                          elevation: 0.5,
                          child: Container(
                              width: double.infinity,
                              padding: EdgeInsets.only(left: imgW, top: 5, right: 10, bottom: 5),
                              child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                                Text(
                                  monthCourses[itemIndex].title,
                                  style: TextStyle(fontWeight: FontWeight.w500),
                                  maxLines: 2,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                monthCourses[itemIndex].shortContent != null
                                    ? Text(
                                        monthCourses[itemIndex].shortContent,
                                        maxLines: 2,
                                        style: TextStyle(color: Colors.grey),
                                        overflow: TextOverflow.ellipsis,
                                      )
                                    : Text(""),
                              ])),
                        ),
                      )),
                  Container(
                    width: imgW,
                    height: imgH,
                    decoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.2),
                          spreadRadius: 2,
                          blurRadius: 10,
                          offset: Offset(0, 3), // changes position of shadow
                        ),
                      ],
                    ),
                    child: monthCourses[itemIndex].image != null && monthCourses[itemIndex].image.isNotEmpty
                        ? ClipRRect(
                            borderRadius: BorderRadius.circular(8.0),
                            child: monthCourses[itemIndex].image != null
                                ? CustomCachedImage(url: monthCourses[itemIndex].image)
                                : Icon(Icons.broken_image),
                          )
                        : SizedBox(
                            height: 60,
                            child: Icon(
                              Icons.school,
                              size: 60,
                              color: Colors.grey,
                            ),
                          ),
                  ),
                ]),
              ),
            );

            // return ListTile(
            //   isThreeLine: true,
            //   // dense: true,
            //   leading: monthCourses[itemIndex].image != null
            //       ? Container(
            //         padding: EdgeInsets.all(0),
            //           // width: 120,
            //           height: 120,
            //           child: CachedNetworkImage(
            //             imageUrl: monthCourses[itemIndex].image,
            //             fit: BoxFit.contain,
            //           ),
            //         )
            //       : CalendarBox(
            //           fontSize: 12.0, text: _formatDate.format(DateTime.parse(monthCourses[itemIndex].dateStart))),
            //   onTap: () {
            //     Navigator.of(context).pushNamed("/pdp", arguments: monthCourses[itemIndex].id);
            //   },
            //   title: Text(
            //     monthCourses[itemIndex].title,
            //     style: TextStyle(
            //       fontWeight: FontWeight.bold,
            //     ),
            //     maxLines: 2,
            //     overflow: TextOverflow.ellipsis,
            //   ),
            //   // trailing: Icon(Icons.chevron_right),
            //   subtitle: monthCourses[itemIndex].shortContent != null
            //       ? Text(monthCourses[itemIndex].shortContent, maxLines: 2, overflow: TextOverflow.ellipsis)
            //       : Text(""),
            // );
          }
          return Divider(
            height: 0,
            color: Colors.grey[200],
          );
        },
        childCount: math.max(0, monthCourses.length * 2 - 1),
        semanticIndexCallback: (Widget widget, int localIndex) {
          if (localIndex.isEven) {
            return localIndex ~/ 2;
          }
          return null;
        },
      ),
    );
  }
}


import 'package:flutter/material.dart';

class WeekCourseHeader extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: Padding(
        padding: EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 10.0),
        child: Row(
          children: <Widget>[
            Expanded(
              child: Text(
                "Khóa học sắp diễn ra",
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
            Expanded(
              child: Align(
                alignment: Alignment.centerRight,
                child: InkWell(
                  onTap: () {
                    Navigator.of(context).pushNamed("/event");
                  },
                  child: Text(
                    "KHÓA HỌC KHÁC",
                    style: TextStyle(
                      color: Colors.blue,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/home/home_blocs.dart';
import '../customs/feedback.dart';
import '../dto/home_dto.dart';
import '../dto/quote_dto.dart';
import '../main.dart';
import '../models/page_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import '../widgets/intro.dart';
import 'home/exit_confirm.dart';
import 'home/home_body.dart';
import 'loading.dart';

class HomeScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _HomeScreen();
}

class _HomeScreen extends State<HomeScreen> {
  AuthBloc _authBloc;
  HomeBloc _homeBloc;
  QuoteDTO _quote;
  String _role;
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    _homeBloc = HomeBloc(pageRepository: pageRepo);
    checkFirstSeen();
  }

  HomeDTO homeData;
  Future<bool> _willExit() async {
    return await showDialog(context: context, builder: (context) => new ExitConfirm());
  }

  Future checkFirstSeen() async {
    int version = 6;
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int _seen = (prefs.getInt('intro_seen') ?? version);

    if (_seen <= version) {
      await prefs.setInt('intro_seen', version + 1);
      setState(() {
        canShowPopup = false;
      });
      Navigator.of(context).push(new MaterialPageRoute(builder: (context) => new IntroScreen()));
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
        onWillPop: _willExit,
        child: BlocBuilder<AuthBloc, AuthState>(
          bloc: _authBloc,
          builder: (context, state) {
            if (state is AuthSuccessState) {
              user = state.user;
              _homeBloc.add(LoadHomeEvent(user: user));
            }
            if (state is AuthFailState) {
              user = null;
              _homeBloc.add(LoadHomeEvent(user: user));
            }

            return BlocProvider<HomeBloc>(
              create: (context) => _homeBloc, //..add(LoadHomeEvent(role: _role)),
              child: BlocBuilder<HomeBloc, HomeState>(builder: (context, state) {
                if (state is HomeSuccessState) {
                  homeData = state.data;
                  _homeBloc.add(LoadQuoteEvent(url: homeData.config.quoteUrl));
                }
                return homeData != null
                    ? Scaffold(
                        appBar: BaseAppBar(
                          screen: "home",
                          user: user,
                          hasBack: false,
                          title: "",
                        ),
                        body: RefreshIndicator(
                          child: CustomFeedback(
                              user: user,
                              child: HomeBody(
                                user: user,
                                homeData: homeData,
                                homeBloc: _homeBloc,
                              )),
                          onRefresh: _reloadPage,
                        ),
                        floatingActionButton: FloatingActionButtonHome(
                          isHome: true,
                        ),
                        floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
                        bottomNavigationBar: BottomNav(
                          route: BottomNav.HOME_INDEX,
                          user: user,
                        ),
                      )
                    : LoadingScreen();
              }),
            );
          },
        ));
  }

  Future<void> _reloadPage() async {
    _homeBloc..add(LoadHomeEvent(user: user));
  }
}


import 'package:flutter/material.dart';
import 'package:photo_view/photo_view.dart';
import 'package:photo_view/photo_view_gallery.dart';

class ImageViewScreen extends StatefulWidget {
  ImageViewScreen({
    this.loadingBuilder,
    this.backgroundDecoration,
    this.minScale,
    this.maxScale,
    this.initialIndex,
    this.imageText,
    @required this.galleryItems,
    this.scrollDirection = Axis.horizontal,
  }) : pageController = PageController(initialPage: initialIndex);

  final LoadingBuilder loadingBuilder;
  final Decoration backgroundDecoration;
  final dynamic minScale;
  final dynamic maxScale;
  final int initialIndex;
  final PageController pageController;
  final List<String> galleryItems;
  final Axis scrollDirection;
  final String imageText;

  @override
  State<StatefulWidget> createState() {
    return _ImageViewScreen();
  }
}

class _ImageViewScreen extends State<ImageViewScreen> {
  int currentIndex;

  @override
  void initState() {
    currentIndex = widget.initialIndex;
    super.initState();
  }

  void onPageChanged(int index) {
    setState(() {
      currentIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: Container(
        decoration: widget.backgroundDecoration,
        constraints: BoxConstraints.expand(
          height: MediaQuery.of(context).size.height,
        ),
        child: Stack(
          alignment: Alignment.bottomRight,
          children: <Widget>[
            PhotoViewGallery.builder(
              scrollPhysics: const BouncingScrollPhysics(),
              builder: _buildItem,
              itemCount: widget.galleryItems.length,
              loadingBuilder: widget.loadingBuilder,
              backgroundDecoration: widget.backgroundDecoration,
              pageController: widget.pageController,
              onPageChanged: onPageChanged,
              scrollDirection: widget.scrollDirection,
            ),
            Container(
              padding: const EdgeInsets.all(20.0),
              child: Text(
                "${widget.imageText} ${currentIndex + 1}",
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 17.0,
                  decoration: null,
                ),
              ),
            )
          ],
        ),
      ),
    );
  }

  PhotoViewGalleryPageOptions _buildItem(BuildContext context, int index) {
    final String item = widget.galleryItems[index];
    return PhotoViewGalleryPageOptions(
      imageProvider: NetworkImage(item),
      initialScale: PhotoViewComputedScale.contained,
      minScale: PhotoViewComputedScale.contained * (0.5 + index / 10),
      maxScale: PhotoViewComputedScale.covered * 1.1,
      heroAttributes: PhotoViewHeroAttributes(tag: index),
    );
  }
}


import 'package:anylearn/blocs/course/course_blocs.dart';
import 'package:anylearn/dto/item_user_action.dart';
import 'package:anylearn/widgets/loading_widget.dart';
import 'package:anylearn/widgets/rating.dart';
import 'package:anylearn/widgets/time_ago.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

class ItemRatingScreen extends StatefulWidget {
  final int itemId;

  const ItemRatingScreen({Key key, this.itemId}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _ItemRatingScreen();
}

class _ItemRatingScreen extends State<ItemRatingScreen> {
  CourseBloc _courseBloc;
  List<ItemUserAction> data;
  @override
  void didChangeDependencies() {
    _courseBloc = BlocProvider.of<CourseBloc>(context)..add(ReviewLoadEvent(itemId: widget.itemId));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Các đánh giá của khóa học"),
        centerTitle: false,
      ),
      body: BlocBuilder(
          bloc: _courseBloc,
          builder: (context, state) {
            if (state is ReviewLoadSuccessState) {
              data = state.data;
            }
            return data == null
                ? LoadingWidget()
                : ListView.separated(
                    itemBuilder: (context, index) {
                      return ListTile(
                        leading: Container(
                          width: 50,
                          child: data[index].userImage == null
                              ? Icon(Icons.account_circle)
                              : CachedNetworkImage(imageUrl: data[index].userImage),
                        ),
                        title: Container(
                            child: RatingBox(
                          score: double.parse(data[index].value),
                          alignment: "start",
                        )),
                        trailing: TimeAgo(time: data[index].createdAt),
                        isThreeLine: true,
                        subtitle: Text.rich(TextSpan(
                            text: data[index].userName,
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.blue,
                            ),
                            children: [
                              TextSpan(
                                  text: data[index].extraValue == null ? "" : "\n" + data[index].extraValue,
                                  style: TextStyle(
                                    fontWeight: FontWeight.normal,
                                    color: Colors.black54,
                                  ))
                            ])),
                      );
                    },
                    separatorBuilder: (context, index) {
                      return Divider();
                    },
                    itemCount: data.length,
                  );
          }),
    );
  }
}


import 'package:anylearn/widgets/user_quick_profile.dart';
import 'package:flutter/material.dart';

import '../../dto/items_dto.dart';
import '../../widgets/item_card.dart';
import '../../widgets/sliver_banner.dart';
import '../teacher/teacher_filter.dart';

class ItemsBody extends StatefulWidget {
  final ItemsDTO itemsDTO;

  const ItemsBody({Key key, this.itemsDTO}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _ItemsBody();
}

class _ItemsBody extends State<ItemsBody> {
  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width / 2;
    return Container(
      color: Colors.grey[150],
      child: CustomScrollView(
        slivers: <Widget>[
          UserQuickProfile(user: widget.itemsDTO.user,),
          TeacherFilter(),
          SliverGrid(
            gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
              maxCrossAxisExtent: width,
              mainAxisSpacing: 0.0,
              crossAxisSpacing: 0.0,
              childAspectRatio: 0.65,
            ),
            delegate: SliverChildBuilderDelegate(
              (BuildContext context, int index) {
                return Container(
                    alignment: Alignment.topCenter,
                    padding: EdgeInsets.all(5),
                   
                    child: InkWell(
                      onTap: () {
                        Navigator.of(context).pushNamed("/pdp",
                            arguments: widget.itemsDTO.items.data[index].id); //data.items[index].id.toString()
                      },
                      child: ItemCard(
                        item: widget.itemsDTO.items.data[index],
                        width: width - 30,
                      ),
                    ));
              },
              childCount: widget.itemsDTO.items.data.length,
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:flutter/material.dart';

class ItemsFilter extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ItemsFilter();
}

class _ItemsFilter extends State<ItemsFilter> {
  String dropdownValue = "newest";
  Map<String, String> options = {
    // 'nameaz': 'Theo tên A-Z',
    // 'nameza': 'Theo tên Z-A',
    // 'course': 'Theo Số lượng Khóa học',
    'newest': 'Mới nhất',
  };

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: Column(
        children: <Widget>[
          Container(
            alignment: Alignment.centerLeft,
            // padding: EdgeInsets.only(left: 15.0),
            padding: const EdgeInsets.symmetric(horizontal: 15.0),
            child: DropdownButton<String>(
              value: dropdownValue,
              icon: Icon(Icons.keyboard_arrow_down),
              iconSize: 24,
              elevation: 16,
              isExpanded: true,
              selectedItemBuilder: (BuildContext context) => _buildSelected(context),
              style: TextStyle(fontWeight: FontWeight.normal, color: Colors.black),
              underline: Container(
                color: Colors.transparent,
              ),
              onChanged: (String newValue) {
                setState(() {
                  dropdownValue = newValue;
                });
              },
              items: _buildList(options),
            ),
          ),
          Divider(
            height: 0.0,
            thickness: 1.0,
            color: Colors.black12,
          ),
        ],
      ),
    );
  }

  List<Widget> _buildSelected(BuildContext context) {
    List<Widget> list = [];
    options.forEach((key, title) {
      list.add(Container(
          margin: EdgeInsets.all(0.0),
          padding: EdgeInsets.all(0.0),
          child: Row(
            children: <Widget>[
              Text("Sắp xếp: "),
              Text(
                title,
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14.0),
              ),
            ],
          )));
    });
    return list;
  }

  List<DropdownMenuItem<String>> _buildList(options) {
    List<DropdownMenuItem<String>> list = [];
    options.forEach((key, title) {
      list.add(
        DropdownMenuItem<String>(
          value: key,
          child: Text(
            title,
            style: TextStyle(
              fontWeight: dropdownValue == key ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ),
      );
    });
    return list;
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/items/items_blocs.dart';
import '../main.dart';
import '../models/page_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import 'items/items_body.dart';
import 'loading.dart';

class ItemsSchoolScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ItemsSchoolScreen();
}

class _ItemsSchoolScreen extends State<ItemsSchoolScreen> {
  ItemsBloc itemsBloc;
  @override
  void didChangeDependencies() {
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    itemsBloc = ItemsBloc(pageRepository: pageRepo);
    final userId = ModalRoute.of(context).settings.arguments;
    itemsBloc..add(ItemsSchoolLoadEvent(id: userId));
    super.didChangeDependencies();
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider<ItemsBloc>(
      create: (context) => itemsBloc,
      child: BlocListener<ItemsBloc, ItemsState>(
        listener: (context, state) {
          if (state is ItemsLoadFailState) {
            Navigator.of(context).popUntil(ModalRoute.withName("/"));
          }
        },
        child: BlocBuilder<ItemsBloc, ItemsState>(
          builder: (context, state) {
            if (state is ItemsSchoolSuccessState) {
              return Scaffold(
                appBar: BaseAppBar(
                  user: user,
                  title: state.data.user.name,
                ),
                body: ItemsBody(
                  itemsDTO: state.data,
                ),
                floatingActionButton: FloatingActionButtonHome(),
                floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
                bottomNavigationBar: BottomNav(
                  route: BottomNav.SCHOOL_INDEX,
                  user: user,
                ),
              );
            }
            return LoadingScreen();
          },
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/items/items_blocs.dart';
import '../main.dart';
import '../models/page_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import 'items/items_body.dart';
import 'loading.dart';

class ItemsTeacherScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _ItemsTeacherScreen();
}

class _ItemsTeacherScreen extends State<ItemsTeacherScreen> {
  ItemsBloc itemsBloc;

  @override
  void didChangeDependencies() {
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    itemsBloc = ItemsBloc(pageRepository: pageRepo);
    final userId = ModalRoute.of(context).settings.arguments;
    itemsBloc..add(ItemsTeacherLoadEvent(id: userId));
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider<ItemsBloc>(
      create: (context) => itemsBloc,
      child: BlocListener<ItemsBloc, ItemsState>(
        listener: (context, state) {
          if (state is ItemsLoadFailState) {
            Navigator.of(context).popUntil(ModalRoute.withName("/"));
          }
        },
        child: BlocBuilder<ItemsBloc, ItemsState>(
          builder: (context, state) {
            if (state is ItemsTeacherSuccessState) {
              return Scaffold(
                appBar: BaseAppBar(
                  user: user,
                  title: state.data.user.name,
                ),
                body: ItemsBody(
                  itemsDTO: state.data,
                ),
                floatingActionButton: FloatingActionButtonHome(),
                floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
                bottomNavigationBar: BottomNav(
                  route: BottomNav.TEACHER_INDEX,
                  user: user,
                ),
              );
            }
            return LoadingScreen();
          },
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';

class LoadingScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(alignment: Alignment.center, child: CircularProgressIndicator()),
    );
  }
}


import 'dart:io';

import 'package:anylearn/dto/login_callback.dart';
// import 'package:device_info/device_info.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_facebook_auth/flutter_facebook_auth.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:sign_in_with_apple/sign_in_with_apple.dart';
import 'package:validators/validators.dart' as validator;

import '../../blocs/login/login_blocs.dart';
import '../../customs/register_curved_paint.dart';

class LoginForm extends StatefulWidget {
  final LoginCallback callback;
  final LoginBloc loginBloc;

  const LoginForm({Key key, this.callback, this.loginBloc}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _LoginForm();
}

class _LoginForm extends State<LoginForm> {
  final _formKey = GlobalKey<FormState>();
  final FocusNode _phoneNode = FocusNode();
  final FocusNode _passwordNode = FocusNode();

  final _phoneController = TextEditingController();
  final _passwordController = TextEditingController();

  bool _checking = false;
  AccessToken _accessToken;

  // static final DeviceInfoPlugin deviceInfoPlugin = DeviceInfoPlugin();
  // Map<String, dynamic> _deviceData = <String, dynamic>{};

  // @override
  // void initState() {
  //   super.initState();
  //   initPlatformState();
  // }

  // Future<void> initPlatformState() async {
  //   Map<String, dynamic> deviceData = <String, dynamic>{};

  //   try {
  //     if (Platform.isAndroid) {
  //     } else if (Platform.isIOS) {
  //       deviceData = _readIosDeviceInfo(await deviceInfoPlugin.iosInfo);
  //       print(deviceData);
  //     }
  //   } on PlatformException {
  //     deviceData = <String, dynamic>{
  //       'Error:': 'Failed to get platform version.'
  //     };
  //   }

  //   if (!mounted) return;

  //   setState(() {
  //     _deviceData = deviceData;
  //   });
  // }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width / 2;
    return BlocListener<LoginBloc, LoginState>(
      bloc: widget.loginBloc,
      listener: (context, state) {
        if (state is LoginFailState) {
          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(SnackBar(
              content: Text(
                '${state.error}',
                maxLines: 2,
              ),
              backgroundColor: Colors.red,
            ));
        }
        if (state is LoginFacebookSuccessState) {
          ScaffoldMessenger.of(context)
            ..hideCurrentSnackBar()
            ..showSnackBar(SnackBar(
              content: Text("Đăng nhập thành công."),
              backgroundColor: Colors.green,
            ));
        }
      },
      child: BlocBuilder<LoginBloc, LoginState>(
        bloc: widget.loginBloc,
        builder: (context, state) {
          return Container(
            child: Form(
              key: _formKey,
              child: ListView(
                children: <Widget>[
                  CustomPaint(
                    child: Container(
                      height: 100.0,
                      alignment: Alignment.bottomRight,
                      padding: EdgeInsets.only(right: width / 4, bottom: 20.0),
                      child: Text(
                        "Đăng nhập",
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 14.0,
                          color: Colors.blue,
                        ),
                      ),
                    ),
                    painter: CustomCurvedPaint(),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0, top: 20.0),
                    child: TextFormField(
                      controller: _phoneController,
                      validator: (String value) {
                        if (value.isEmpty) {
                          return "Số điện thoại không hợp lệ";
                        }
                        _formKey.currentState.save();
                        return null;
                      },
                      focusNode: _phoneNode,
                      textInputAction: TextInputAction.next,
                      onFieldSubmitted: (term) {
                        _fieldFocusChange(context, _phoneNode, _passwordNode);
                      },
                      decoration: InputDecoration(
                        labelText: "Số điện thoại",
                        labelStyle: TextStyle(fontSize: 14.0),
                        prefixIcon: Icon(MdiIcons.phone),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0),
                    child: TextFormField(
                      controller: _passwordController,
                      validator: (String value) {
                        if (value.isEmpty) {
                          return "Vui lòng nhập mật khẩu";
                        }
                        _formKey.currentState.save();
                        return null;
                      },
                      focusNode: _passwordNode,
                      textInputAction: TextInputAction.send,
                      onFieldSubmitted: (value) {
                        _submitForm(context);
                      },
                      decoration: InputDecoration(
                        labelText: "Mật khẩu",
                        prefixIcon: Icon(MdiIcons.lock),
                        labelStyle: TextStyle(fontSize: 14.0),
                      ),
                      obscureText: true,
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(colors: [Colors.blue, Colors.lightBlueAccent, Colors.blue]),
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    height: 48.0,
                    margin: const EdgeInsets.only(left: 40.0, right: 40.0, top: 30.0),
                    child: FlatButton(
                      onPressed: state is! LoginInProgressState
                          ? () {
                              // FocusScope.of(context).requestFocus(new FocusNode());
                              _submitForm(context);
                            }
                          : () {},
                      child: state is! LoginInProgressState
                          ? Text(
                              "Đăng nhập",
                              style: TextStyle(fontSize: 16.0, color: Colors.white),
                            )
                          : CircularProgressIndicator(
                              valueColor: new AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                    ),
                  ),
                  Container(
                    alignment: Alignment.center,
                    padding: EdgeInsets.only(top: 30.0),
                    child: Text.rich(
                      TextSpan(text: "Bạn chưa có tài khoản?", children: [
                        TextSpan(
                            text: " Đăng ký ngay",
                            style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
                            recognizer: TapGestureRecognizer()
                              ..onTap = () {
                                Navigator.of(context).popAndPushNamed("/register", arguments: widget.callback);
                              })
                      ]),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(colors: [Colors.blue, Colors.lightBlueAccent, Colors.blue]),
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    height: 48.0,
                    margin: const EdgeInsets.only(left: 40.0, right: 40.0, top: 30.0),
                    child: FlatButton.icon(
                      icon: Icon(
                        MdiIcons.facebook,
                        color: Colors.white,
                      ),
                      onPressed: state is! LoginInProgressState
                          ? () async {
                              await _loginFacebook();
                            }
                          : () {},
                      label: state is! LoginInProgressState
                          ? Text(
                              "Đăng nhập bằng Facebook",
                              style: TextStyle(fontSize: 16.0, color: Colors.white),
                            )
                          : CircularProgressIndicator(
                              valueColor: new AlwaysStoppedAnimation<Color>(Colors.white),
                            ),
                    ),
                  ),
                  // (Platform.isIOS && double.parse(_deviceData["systemVersion"]) > 12.0)
                  (Platform.isIOS)
                      ? Container(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(colors: [Colors.grey, Colors.grey[400], Colors.grey]),
                            borderRadius: BorderRadius.circular(10.0),
                          ),
                          height: 48.0,
                          margin: const EdgeInsets.only(left: 40.0, right: 40.0, top: 30.0),
                          child: FlatButton.icon(
                            icon: Icon(
                              MdiIcons.apple,
                              color: Colors.white,
                            ),
                            onPressed: state is! LoginInProgressState
                                ? () async {
                                    await _loginApple();
                                  }
                                : () {},
                            label: state is! LoginInProgressState
                                ? Text(
                                    "Đăng nhập bằng Apple",
                                    style: TextStyle(fontSize: 16.0, color: Colors.white),
                                  )
                                : CircularProgressIndicator(
                                    valueColor: new AlwaysStoppedAnimation<Color>(Colors.white),
                                  ),
                          ),
                        )
                      : SizedBox(height: 0),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  void _fieldFocusChange(BuildContext context, FocusNode currentFocus, FocusNode nextFocus) {
    currentFocus.unfocus();
    FocusScope.of(context).requestFocus(nextFocus);
  }

  void _submitForm(BuildContext context) {
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();
      BlocProvider.of<LoginBloc>(context).add(LoginButtonPressedEvent(
        phone: _phoneController.text.trim(),
        password: _passwordController.text.trim(),
      ));
    }
  }

  Future<void> _loginApple() async {
    try {
      setState(() {
        _checking = true;
      });
      final credential = await SignInWithApple.getAppleIDCredential(
        scopes: [
          AppleIDAuthorizationScopes.email,
          AppleIDAuthorizationScopes.fullName,
        ],
        webAuthenticationOptions: WebAuthenticationOptions(
          clientId: 'vn.anylearn.login',
          redirectUri: Uri.parse(
            'https://api.anylearn.vn/api/',
          ),
        ),
      );
      print(credential);
      if (credential != null) {
        Map<String, String> loginData = {
          "name": credential.givenName + " " + credential.familyName,
          "email": credential.email ?? "",
          "picture": "",
          "id": credential.userIdentifier
        };
        widget.loginBloc..add(LoginAppleEvent(data: loginData));
      }
    } catch (e) {
      print(e.message);
    } finally {
      setState(() {
        _checking = false;
      });
    }
  }

  Future<void> _loginFacebook() async {
    try {
      setState(() {
        _checking = true;
      });
      final LoginResult loginResult = await FacebookAuth.instance.login();

      print(loginResult);
      if (loginResult.status == LoginStatus.success) {
        final userData = await FacebookAuth.instance.getUserData();
        print(userData['picture']);
        Map<String, String> loginData = {
          "name": userData['name'],
          "email": userData['email'],
          "picture": userData["picture"]["data"]["url"],
          "id": userData["id"]
        };
        widget.loginBloc..add(LoginFacebookEvent(data: loginData));
      }
    } catch (e) {
      print(e.message);
      switch (e.errorCode) {
        case FacebookAuthErrorCode.OPERATION_IN_PROGRESS:
          print("You have a previous login operation in progress");
          break;
        case FacebookAuthErrorCode.CANCELLED:
          print("login cancelled");
          break;
        case FacebookAuthErrorCode.FAILED:
          print("login failed");
          break;
      }
    } finally {
      setState(() {
        _checking = false;
      });
    }
  }

  // Map<String, dynamic> _readIosDeviceInfo(IosDeviceInfo data) {
  //   return <String, dynamic>{
  //     'name': data.name,
  //     'systemName': data.systemName,
  //     'systemVersion': data.systemVersion,
  //     'model': data.model,
  //     'localizedModel': data.localizedModel,
  //     'identifierForVendor': data.identifierForVendor,
  //     'isPhysicalDevice': data.isPhysicalDevice,
  //     'utsname.sysname:': data.utsname.sysname,
  //     'utsname.nodename:': data.utsname.nodename,
  //     'utsname.release:': data.utsname.release,
  //     'utsname.version:': data.utsname.version,
  //     'utsname.machine:': data.utsname.machine,
  //   };
  // }
}


import 'package:anylearn/dto/login_callback.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/login/login_bloc.dart';
import '../models/user_repo.dart';
import 'login/login_form.dart';

class LoginScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _LoginScreen();
}

class _LoginScreen extends State<LoginScreen> {
  LoginBloc _loginBloc;
  AuthBloc _authBloc;
  bool noticeShow = false;
  LoginCallback callback;
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final userRepository = RepositoryProvider.of<UserRepository>(context);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    _loginBloc = LoginBloc(userRepository: userRepository, authBloc: _authBloc);
    if (ModalRoute.of(context).settings.arguments != null) {
      callback = ModalRoute.of(context).settings.arguments;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Image.asset(
          "assets/images/logo_text.png",
          height: 40.0,
        ),
        elevation: 0.0,
      ),
      body: BlocListener<AuthBloc, AuthState>(
        bloc: _authBloc,
        listener: (context, state) {
          if (state is AuthSuccessState) {
            Navigator.of(context).popUntil(ModalRoute.withName("/"));
            if (callback!= null && callback.routeName != null) {
              Navigator.of(context).pushNamed(callback.routeName, arguments: callback.routeArgs);
            }
          }

          if (!noticeShow && callback != null && callback.message != null) {
             ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                content: Text(callback.message),
              ));
            noticeShow = true;
          }
        },
        child: BlocProvider(
          create: (context) {
            return _loginBloc;
          },
          child: LoginForm(loginBloc: _loginBloc, callback: callback,),
        ),
      ),
    );
  }
}


import 'package:anylearn/screens/webview.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:overlay_support/overlay_support.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/notif/notif_blocs.dart';
import '../dto/notification_dto.dart';
import '../dto/user_dto.dart';
import '../widgets/loading_widget.dart';
import '../widgets/time_ago.dart';

class NotificationScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _NotificationScreen();
}

class _NotificationScreen extends State<NotificationScreen> {
  AuthBloc _authBloc;
  NotifBloc _notifBloc;
  UserDTO _user;
  NotificationPagingDTO _notif;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    _notifBloc = BlocProvider.of<NotifBloc>(context);
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener(
      bloc: _authBloc,
      listener: (BuildContext context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
        if (state is AuthSuccessState) {
          _user = state.user;
          _notifBloc..add(NotifLoadEvent(token: _user.token));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Thông báo"),
          centerTitle: false,
        ),
        body: BlocBuilder(
            bloc: _notifBloc,
            builder: (context, state) {
              if (state is NotifSuccessState) {
                _notif = state.notif;
                return RefreshIndicator(
                    onRefresh: () async {
                      _notifBloc..add(NotifLoadEvent(token: _user.token));
                    },
                    child: _notif.total == 0
                        ? Container(
                            alignment: Alignment.center,
                            child: Text("Bạn chưa có thông báo nào."),
                          )
                        : ListView.separated(
                            itemBuilder: (BuildContext context, int index) {
                              return Container(
                                color: _notif.data[index].read == null ? Colors.blue[50] : Colors.white,
                                child: ListTile(
                                  onTap: () {
                                    _notifBloc..add(NotifReadEvent(token: _user.token, id: _notif.data[index].id));
                                    if (_notif.data[index].extraContent == "copy") {
                                      Clipboard.setData(new ClipboardData(text: _notif.data[index].route));
                                      toast("Đã copy vào bộ nhớ");
                                      _notifBloc..add(NotifLoadEvent(token: _user.token));
                                    } else if (_notif.data[index].extraContent == "url" &&
                                        _notif.data[index].route != null) {
                                      _notifBloc..add(NotifLoadEvent(token: _user.token));
                                      Navigator.of(context).push(MaterialPageRoute(
                                          builder: (context) => WebviewScreen(
                                                url: _notif.data[index].route,
                                              )));
                                    } else if (_notif.data[index].route != null) {
                                      _notifBloc..add(NotifLoadEvent(token: _user.token));
                                      Navigator.of(context).pushNamed(_notif.data[index].route,
                                          arguments: _notif.data[index].extraContent);
                                    }
                                  },
                                  leading: Icon(
                                    _buildIcon(_notif.data[index].type),
                                    size: 30,
                                  ),
                                  contentPadding: EdgeInsets.all(10),
                                  title: Text(_notif.data[index].content),
                                  subtitle: TimeAgo(time: _notif.data[index].createdAt),
                                ),
                              );
                            },
                            separatorBuilder: (BuildContext context, int index) => Divider(
                                  color: Colors.grey,
                                  height: 0,
                                ),
                            itemCount: _notif.data.length));
              }
              return LoadingWidget();
            }),
      ),
    );
  }

  IconData _buildIcon(String type) {
    switch (type) {
      case "new_user":
        return MdiIcons.fire;
      case "new_friend":
        return MdiIcons.accountHeart;
      default:
        return Icons.info_outline;
    }
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../../blocs/auth/auth_blocs.dart';
import '../../blocs/pdp/pdp_blocs.dart';
import '../../dto/pdp_dto.dart';
import '../../dto/user_dto.dart';
import '../../main.dart';
import '../webview.dart';

class CourseConfirm extends StatefulWidget {
  final PdpDTO pdpDTO;
  final UserDTO user;
  final PdpBloc pdpBloc;

  const CourseConfirm({Key key, this.pdpDTO, this.user, this.pdpBloc}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _CourseConfirm();
}

class _CourseConfirm extends State<CourseConfirm> {
  bool hasVoucher = false;
  bool childRegister = false;
  String dropdownValue = "0";
  Map<String, String> options = {"0": "Chọn thành viên"};
  final voucherController = TextEditingController();

  final NumberFormat _moneyFormat = NumberFormat("###,###,###", 'vi_VN');

  @override
  Widget build(Object context) {
    return widget.user.id == widget.pdpDTO.author.id
        ? AlertDialog(
            content: Text("Bạn không thể đăng ký khóa học của chính bạn."),
            actions: <Widget>[
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                },
                child: Text("Đã hiểu"),
              )
            ],
          )
        : SimpleDialog(
            title: Text(
              "Xác nhận đăng ký",
              style: TextStyle(fontSize: 14),
            ),
            titlePadding: EdgeInsets.fromLTRB(15, 15, 15, 0),
            contentPadding: EdgeInsets.all(15),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
            children: <Widget>[
              Text.rich(TextSpan(
                text: "Bạn đang muốn đăng ký khóa học\n",
                style: TextStyle(
                  fontWeight: FontWeight.w300,
                ),
                children: [
                  TextSpan(
                      text: widget.pdpDTO.item.title,
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 15.0,
                        color: Colors.blue,
                      )),
                  TextSpan(
                      text: "\n${widget.pdpDTO.author.role == 'school' ? 'Trường' : 'Giảng viên'}: ",
                      style: TextStyle()),
                  TextSpan(
                      text: widget.pdpDTO.author.name,
                      style: TextStyle(
                        // color: Colors.pink,
                        fontWeight: FontWeight.w400,
                      )),
                  TextSpan(
                      text: "\nHọc phí: ",
                      style: TextStyle(
                        fontWeight: FontWeight.w300,
                      )),
                  TextSpan(
                      text: _moneyFormat.format(widget.pdpDTO.item.price),
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.red,
                      )),
                  TextSpan(
                      text: "\nKhai giảng: ",
                      style: TextStyle(
                        fontWeight: FontWeight.w300,
                      )),
                  TextSpan(
                      text: widget.pdpDTO.item.timeStart +
                          " " +
                          DateFormat('dd/MM').format(DateTime.parse(widget.pdpDTO.item.dateStart)),
                      style: TextStyle(
                        fontWeight: FontWeight.w400,
                        // color: Colors.pink,
                      )),
                ],
              )),
              // Padding(
              //   padding: const EdgeInsets.only(top: 15),
              //   child: Text.rich(TextSpan(text: "Số dư tài khoản: ", children: [
              //     TextSpan(
              //         text: _moneyFormat.format(widget.user.walletM),
              //         style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold)),
              //   ])),
              // ),
              widget.pdpDTO.disableAnypoint
                  ? Container()
                  : Padding(
                      padding: const EdgeInsets.only(top: 15),
                      child: Text.rich(TextSpan(text: "Bạn sẽ nhận được ", children: [
                        TextSpan(
                          text: _moneyFormat.format(widget.pdpDTO.commission),
                          style: TextStyle(color: Colors.orange, fontWeight: FontWeight.bold),
                        ),
                        TextSpan(text: " anyPoint cho giao dịch này.")
                      ])),
                    ),
              !hasVoucher
                  ? TextButton(
                      onPressed: () {
                        setState(() {
                          hasVoucher = true;
                        });
                      },
                      child: Text(
                        "Tôi có mã khuyến mãi",
                        style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
                      ))
                  : Container(
                      padding: EdgeInsets.only(bottom: 5, top: 10),
                      child: Row(children: [
                        Expanded(
                          child: TextFormField(
                            controller: voucherController,
                            decoration: InputDecoration(
                              isDense: true,
                              filled: true,
                              fillColor: Colors.white,
                              contentPadding: const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
                              focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10),
                                borderSide: BorderSide(color: Colors.blue[200], width: 3),
                              ),
                              enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(10),
                                borderSide: BorderSide(color: Colors.grey, width: 1.0),
                              ),
                              hintText: "Mã khuyến mãi khóa học",
                              hintStyle: TextStyle(color: Colors.grey),
                            ),
                          ),
                        ),
                        IconButton(
                            icon: Icon(Icons.close),
                            onPressed: () {
                              setState(() {
                                hasVoucher = false;
                              });
                            })
                      ]),
                    ),
              childRegister
                  ? Row(children: [
                      Expanded(child: _buildChildrenSelector(context, widget.user.children)),
                      IconButton(
                          icon: Icon(Icons.add),
                          onPressed: () async {
                            await Navigator.of(context).pushNamed("/account/children", arguments: widget.user);
                            Navigator.of(context).pop();
                            BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
                          }),
                      IconButton(
                          icon: Icon(Icons.close),
                          onPressed: () {
                            setState(() {
                              childRegister = false;
                            });
                          })
                    ])
                  : TextButton(
                      onPressed: () {
                        setState(() {
                          childRegister = true;
                        });
                      },
                      child: Text(
                        "Tôi muốn đăng ký cho tài khoản con",
                        style: TextStyle(color: Colors.blue),
                      )),
              Container(
                // padding: const EdgeInsets.only(top: 15),
                child: ElevatedButton(
                  style: ButtonStyle(
                      backgroundColor: MaterialStateProperty.all<Color>(Colors.green[600]),
                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(18),
                      ))),
                  onPressed: () {
                    _add2Cart(context, widget.user.token, widget.pdpDTO.item.id, voucherController.text,
                        (dropdownValue != "0" && childRegister ? int.parse(dropdownValue) : 0));
                  },
                  child: Text("XÁC NHẬN"),
                ),
              ),
            ],
          );
  }

  void _add2Cart(BuildContext context, String token, int itemId, String voucher, int childId) {
    String url = config.webUrl + "add2cart?class=$itemId&voucher=$voucher&child=$childId";
    Navigator.of(context).pop();
    Navigator.of(context).push(MaterialPageRoute(
        builder: (context) => WebviewScreen(
              url: url,
              token: token,
            )));
  }

  Widget _buildChildrenSelector(BuildContext context, List<UserDTO> children) {
    children.forEach((child) {
      options[child.id.toString()] = child.name;
    });
    return DropdownButton<String>(
      value: dropdownValue,
      icon: Icon(Icons.keyboard_arrow_down),
      iconSize: 24,
      elevation: 16,
      isExpanded: true,
      selectedItemBuilder: (BuildContext context) => _buildSelected(context),
      style: TextStyle(fontWeight: FontWeight.normal, color: Colors.black),
      underline: Container(
        color: Colors.transparent,
      ),
      onChanged: (String newValue) {
        setState(() {
          dropdownValue = newValue;
        });
      },
      items: _buildList(),
    );
  }

  List<Widget> _buildSelected(BuildContext context) {
    List<Widget> list = [];
    options.forEach((key, title) {
      list.add(Container(
        margin: EdgeInsets.all(5),
        padding: EdgeInsets.all(5),
        child: Text(
          title,
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14.0, color: Colors.blue),
        ),
      ));
    });
    return list;
  }

  List<DropdownMenuItem<String>> _buildList() {
    List<DropdownMenuItem<String>> list = [];
    options.forEach((key, title) {
      list.add(
        DropdownMenuItem<String>(
          value: key,
          child: Text(
            title,
            style: TextStyle(
              fontWeight: dropdownValue == key ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ),
      );
    });
    return list;
  }
}


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:overlay_support/overlay_support.dart';

import '../../blocs/pdp/pdp_blocs.dart';
import '../../dto/user_dto.dart';
import '../../widgets/loading_widget.dart';

class CourseShareScreen extends StatefulWidget {
  final UserDTO user;
  final pdpId;
  final PdpBloc pdpBloc;

  const CourseShareScreen({Key key, this.user, this.pdpBloc, this.pdpId}) : super(key: key);
  @override
  State<StatefulWidget> createState() => _CourseShareScreen();
}

class _CourseShareScreen extends State<CourseShareScreen> {
  List<UserDTO> _friends;
  Map<int, bool> selected = {};
  bool checkAll = false;

  @override
  Widget build(BuildContext context) {
    return StatefulBuilder(
      builder: (context, setState) => Scaffold(
        appBar: AppBar(
          title: Text("Chia sẻ khóa học"),
          centerTitle: false,
          bottom: PreferredSize(
            child: FlatButton(
                onPressed: () {
                  widget.pdpBloc..add(PdpFriendShareEvent(token: widget.user.token, itemId: widget.pdpId, isALL: true));
                },
                child: Text(
                  "GỬI TẤT CẢ",
                  style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                )),
            preferredSize: Size.fromHeight(40),
          ),
          actions: <Widget>[
            RaisedButton.icon(
              color: Colors.blue,
              textColor: Colors.white,
              icon: Icon(Icons.send),
              onPressed: () {
                List<int> ids = [];
                selected.forEach((key, value) {
                  if (value) {
                    ids.add(key);
                  }
                });
                widget.pdpBloc
                  ..add(PdpFriendShareEvent(
                      token: widget.user.token, itemId: widget.pdpId, friendIds: ids, isALL: false));
              },
              label: Text("GỬI"),
            )
          ],
        ),
        body: BlocListener<PdpBloc, PdpState>(
          bloc: widget.pdpBloc,
          listener: (BuildContext context, PdpState state) {
            if (state is PdpShareSuccessState) {
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text("Đã gửi lời mời tới các bạn."),
                )).closed.then((value) {
                  Navigator.of(context).pop();
                });
            }
            if (state is PdpShareFailState) {
              // toast(state.error, duration: Duration(seconds: 3));
              ScaffoldMessenger.of(context)
                ..hideCurrentSnackBar()
                ..showSnackBar(SnackBar(
                  content: Text(state.error),
                ));
            }
          },
          child: BlocBuilder<PdpBloc, PdpState>(
            bloc: widget.pdpBloc..add(PdpFriendLoadEvent(token: widget.user.token)),
            builder: (context, state) {
              if (state is PdpShareFriendListSuccessState) {
                _friends = state.friends;
                for (var i = 0; i < _friends.length; i++) {
                  selected[_friends[i].id] = false;
                }
              }

              return _friends == null
                  ? LoadingWidget()
                  : Container(
                      child: StatefulBuilder(
                        builder: (BuildContext context, void Function(void Function()) setState) {
                          return ListView.separated(
                            itemBuilder: (context, index) => CheckboxListTile(
                              title: Text(_friends[index].name),
                              controlAffinity: ListTileControlAffinity.trailing,
                              value: selected[_friends[index].id],
                              secondary: Container(
                                width: 50,
                                height: 50,
                                child: _friends[index].image == null
                                    ? Icon(
                                        Icons.account_circle,
                                        size: 32,
                                      )
                                    : CachedNetworkImage(imageUrl: _friends[index].image),
                              ),
                              onChanged: (bool value) {
                                setState(() {
                                  selected[_friends[index].id] = value;
                                });
                              },
                            ),
                            separatorBuilder: (context, index) => Divider(),
                            itemCount: _friends.length,
                          );
                        },
                      ),
                    );
            },
          ),
        ),
      ),
    );
  }
}


import 'dart:io';

import 'package:anylearn/widgets/categories_box.dart';
import 'package:expandable/expandable.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:intl/intl.dart';
import 'package:overlay_support/overlay_support.dart';

import '../../blocs/pdp/pdp_blocs.dart';
import '../../customs/custom_cached_image.dart';
import '../../dto/home_dto.dart';
import '../../dto/login_callback.dart';
import '../../dto/pdp_dto.dart';
import '../../dto/user_dto.dart';
import '../../widgets/item_status_icon.dart';
import '../../widgets/price_box.dart';
import '../../widgets/rating.dart';
import '../../widgets/text2lines.dart';
import '../home/home_classes.dart';
import '../item_rating.dart';
import '../webview.dart';
import 'course_confirm.dart';
import 'share_dialog.dart';

class PdpBody extends StatefulWidget {
  final PdpDTO data;
  final UserDTO user;
  final PdpBloc pdpBloc;

  const PdpBody({Key key, this.data, this.user, this.pdpBloc}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _PdpBody();
}

class _PdpBody extends State<PdpBody> {
  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double imageHeight = width - 30 - 50;
    return Container(
      child: CustomScrollView(
        slivers: <Widget>[
          SliverToBoxAdapter(
            child: Container(
              decoration: BoxDecoration(border: Border(bottom: BorderSide(width: 5.0, color: Colors.grey[200]))),
              alignment: Alignment.topLeft,
              padding: EdgeInsets.all(15.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Container(
                    height: imageHeight,
                    child: widget.data.item.image != null
                        ? CustomCachedImage(
                            url: widget.data.item.image,
                            borderRadius: 10.0,
                          )
                        : Icon(Icons.broken_image),
                  ),
                  Container(
                    padding: EdgeInsets.only(top: 15.0),
                    child: Text2Lines(
                      text: widget.data.item.title,
                      fontSize: 18.0,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Padding(
                    padding: EdgeInsets.only(top: 5.0),
                    child: Row(
                      children: <Widget>[
                        Icon(Icons.supervisor_account, color: Colors.black54, size: 14.0),
                        Text(widget.data.author.role == 'school' ? " Trường: " : " Giảng viên: "),
                        Text.rich(
                          TextSpan(
                              text: widget.data.author.name,
                              style: TextStyle(
                                color: Colors.blue,
                              ),
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  Navigator.of(context)
                                      .pushNamed("/items/" + widget.data.author.role, arguments: widget.data.author.id);
                                }),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 10),
                    child: CategoriesBox(categories: widget.data.categories),
                  ),
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: Column(
                          children: [
                            Padding(
                              padding: EdgeInsets.only(top: 5.0),
                              child: Row(
                                children: [
                                  RatingBox(score: widget.data.item.rating),
                                  widget.data.item.rating != null
                                      ? Padding(
                                          padding: EdgeInsets.only(left: 10.0),
                                          child: InkWell(
                                            onTap: () {
                                              Navigator.of(context)
                                                  .push(MaterialPageRoute(builder: (BuildContext context) {
                                                return ItemRatingScreen(itemId: widget.data.item.id);
                                              }));
                                            },
                                            child: Text("XEM ĐÁNH GIÁ", style: TextStyle(color: Colors.blue)),
                                          ),
                                        )
                                      : Text("")
                                ],
                              ),
                            ),
                            Padding(
                              padding: EdgeInsets.only(top: 5.0),
                              child: Row(
                                children: <Widget>[
                                  Icon(Icons.calendar_today, color: Colors.black54, size: 14.0),
                                  Text(" Khai giảng: " +
                                      widget.data.item.timeStart +
                                      " " +
                                      DateFormat('dd/MM').format(DateTime.parse(widget.data.item.dateStart))),
                                  widget.data.numSchedule > 1
                                      ? Text(" (${widget.data.numSchedule} buổi học)")
                                      : SizedBox(height: 1)
                                ],
                              ),
                            ),
                            Padding(
                              padding: EdgeInsets.only(top: 10.0),
                              child: (Platform.isIOS && !widget.data.enableIosTrans)
                                  ? SizedBox(height: 0)
                                  : PriceBox(
                                      price: widget.data.item.price,
                                      orgPrice: widget.data.item.priceOrg,
                                      fontSize: 18.0,
                                      showOrgPrice: true,
                                    ),
                            ),
                          ],
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        mainAxisAlignment: MainAxisAlignment.end,
                        children: [
                          (Platform.isIOS && widget.data.enableIosTrans) &&
                                  (widget.data.item.numCart != null && widget.data.item.numCart > 0)
                              ? ItemFavorStatusItem(
                                  text: widget.data.item.numCart.toString(),
                                  icon: Icons.add_shopping_cart,
                                  color: Colors.green)
                              : SizedBox(height: 0),
                          widget.data.item.numShare != null
                              ? ItemFavorStatusItem(
                                  text: widget.data.item.numShare.toString(), icon: Icons.share, color: Colors.blue)
                              : SizedBox(height: 0),
                          widget.data.item.numFavorite != null && widget.data.item.numFavorite > 0
                              ? ItemFavorStatusItem(
                                  text: widget.data.item.numFavorite.toString(),
                                  icon: Icons.favorite,
                                  color: Colors.red)
                              : SizedBox(height: 0),
                        ],
                      )
                    ],
                  ),
                  Container(
                    margin: EdgeInsets.only(top: 15),
                    child: Row(
                      children: <Widget>[
                        (Platform.isIOS && !widget.data.enableIosTrans)
                            ? SizedBox(
                                height: 0,
                              )
                            : Expanded(
                                child: ElevatedButton(
                                  style: ButtonStyle(
                                      backgroundColor: MaterialStateProperty.all<Color>(Colors.green[600]),
                                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(18),
                                      ))),
                                  onPressed: () {
                                    widget.user != null
                                        ? showDialog(
                                            context: context,
                                            builder: (context) => (!widget.data.item.nolimitTime &&
                                                    DateTime.now().isAfter(DateTime.parse(
                                                        widget.data.item.dateStart + " " + widget.data.item.timeStart)))
                                                ? AlertDialog(
                                                    content: Container(child: Text("Đã quá hạn đăng ký khóa học này.")),
                                                    actions: [
                                                      ElevatedButton(
                                                        onPressed: () {
                                                          Navigator.of(context).pop();
                                                        },
                                                        child: Text("ĐÃ HIỂU"),
                                                      ),
                                                    ],
                                                  )
                                                : CourseConfirm(
                                                    pdpBloc: widget.pdpBloc,
                                                    user: widget.user,
                                                    pdpDTO: widget.data,
                                                  ),
                                          )
                                        : Navigator.of(context).pushNamed('/login',
                                            arguments:
                                                LoginCallback(routeName: "/pdp", routeArgs: widget.data.item.id));
                                  },
                                  child: Row(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [Icon(Icons.app_registration), Text(" ĐĂNG KÝ")]),
                                ),
                              ),
                        BlocListener(
                          bloc: widget.pdpBloc,
                          listener: (BuildContext context, state) {
                            if (state is PdpFavoriteTouchSuccessState) {
                              toast(state.isFav
                                  ? "Đã đánh dấu ưa thích khóa học này."
                                  : "Đã bỏ đánh dấu ưa thích khóa học.");
                              widget.data.isFavorite = state.isFav;
                            }
                          },
                          child: BlocBuilder<PdpBloc, PdpState>(
                            bloc: BlocProvider.of<PdpBloc>(context),
                            builder: (context, state) {
                              return (Platform.isIOS && !widget.data.enableIosTrans)
                                  ? Expanded(
                                      child: ElevatedButton(
                                      onPressed: () {
                                        if (widget.user != null) {
                                          BlocProvider.of<PdpBloc>(context)
                                            ..add(PdpFavoriteTouchEvent(
                                                itemId: widget.data.item.id, token: widget.user.token));
                                        } else {
                                          Navigator.of(context).pushNamed('/login',
                                              arguments:
                                                  LoginCallback(routeName: "/pdp", routeArgs: widget.data.item.id));
                                        }
                                      },
                                      child: Row(mainAxisAlignment: MainAxisAlignment.center, children: [
                                        Icon(
                                          widget.data.isFavorite == true ? Icons.favorite : Icons.favorite_border,
                                          color: widget.data.isFavorite != true ? Colors.red : Colors.white,
                                        ),
                                        Text(
                                          " Quan tâm",
                                          style: TextStyle(
                                              color: widget.data.isFavorite != true ? Colors.red : Colors.white),
                                        )
                                      ]),
                                      style: ButtonStyle(
                                          backgroundColor: MaterialStateProperty.all<Color>(
                                            widget.data.isFavorite == true ? Colors.red : Colors.white,
                                          ),
                                          shape:
                                              MaterialStateProperty.all<RoundedRectangleBorder>(RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(18),
                                          ))),
                                    ))
                                  : IconButton(
                                      onPressed: () {
                                        if (widget.user != null) {
                                          BlocProvider.of<PdpBloc>(context)
                                            ..add(PdpFavoriteTouchEvent(
                                                itemId: widget.data.item.id, token: widget.user.token));
                                        } else {
                                          Navigator.of(context).pushNamed('/login',
                                              arguments:
                                                  LoginCallback(routeName: "/pdp", routeArgs: widget.data.item.id));
                                        }
                                      },
                                      icon: Icon(
                                          widget.data.isFavorite == true ? Icons.favorite : Icons.favorite_border,
                                          color: Colors.red),
                                    );
                            },
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.share),
                          color: Colors.blue,
                          onPressed: () {
                            widget.user != null
                                ? showDialog(
                                    context: context,
                                    builder: (context) => PdpShareDialog(
                                      item: widget.data.item,
                                      user: widget.user,
                                      pdpBloc: widget.pdpBloc,
                                    ),
                                  )
                                : Navigator.of(context).pushNamed('/login',
                                    arguments: LoginCallback(routeName: "/pdp", routeArgs: widget.data.item.id));
                          },
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          SliverToBoxAdapter(
              child: Container(
                  // decoration: BoxDecoration(border: Border(bottom: BorderSide(width: 5.0, color: Colors.grey[100]))),
                  padding: EdgeInsets.all(15.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Text("Thông tin khóa học", style: TextStyle(fontWeight: FontWeight.bold)),
                      widget.data.item.content == null
                          ? Container()
                          : ExpandableNotifier(
                              child: ScrollOnExpand(
                                child: Expandable(
                                  collapsed: Column(
                                    children: [
                                      Text(
                                        widget.data.item.shortContent ?? "",
                                        softWrap: true,
                                        maxLines: 3,
                                        overflow: TextOverflow.ellipsis,
                                      ),
                                      ExpandableButton(
                                        child: Container(
                                          padding: EdgeInsets.fromLTRB(15, 10, 15, 10),
                                          margin: EdgeInsets.only(bottom: 5, top: 10),
                                          decoration: BoxDecoration(
                                            color: Colors.white,
                                            borderRadius: BorderRadius.circular(18),
                                            boxShadow: [
                                              BoxShadow(
                                                color: Colors.grey.withOpacity(0.5),
                                                spreadRadius: 1,
                                                blurRadius: 1,
                                                offset: Offset(0, 2), // changes position of shadow
                                              ),
                                            ],
                                          ),
                                          child: Text(
                                            "XEM THÊM",
                                            style: TextStyle(color: Colors.black),
                                          ),
                                        ),
                                      ),
                                    ],
                                  ),
                                  expanded: Column(children: [
                                    Html(
                                      data: widget.data.item.content ?? "",
                                      shrinkWrap: true,
                                      onLinkTap: (String url, _, __, ___) {
                                        Navigator.of(context).push(MaterialPageRoute(
                                            builder: (context) => WebviewScreen(
                                                  url: url,
                                                )));
                                      },
                                    ),
                                    ExpandableButton(
                                        child: Container(
                                      padding: EdgeInsets.fromLTRB(15, 10, 15, 10),
                                      margin: EdgeInsets.only(bottom: 5, top: 10),
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(18),
                                        boxShadow: [
                                          BoxShadow(
                                            color: Colors.grey.withOpacity(0.5),
                                            spreadRadius: 1,
                                            blurRadius: 1,
                                            offset: Offset(0, 2), // changes position of shadow
                                          ),
                                        ],
                                      ),
                                      child: Text(
                                        "THU GỌN",
                                        style: TextStyle(color: Colors.black),
                                      ),
                                    )),
                                  ]),
                                ),
                              ),
                            ),
                    ],
                  ))),
          HomeClasses(blocks: [HomeClassesDTO(title: "KHOÁ HỌC LIÊN QUAN", classes: widget.data.hotItems.list)])
        ],
      ),
    );
  }
}


import 'package:anylearn/dto/item_dto.dart';
import 'package:anylearn/screens/pdp/course_share.dart';
import 'package:flutter/material.dart';
import 'package:share/share.dart';

class PdpShareDialog extends StatelessWidget {
  final ItemDTO item;
  final user;
  final pdpBloc;

  const PdpShareDialog({Key key, this.item, this.user, this.pdpBloc}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return SimpleDialog(children: <Widget>[
      ListTile(
          title: Text("Chia sẻ tới bạn bè trong cộng đồng"),
          onTap: () {
            Navigator.of(context).pop();
            Navigator.of(context).push(MaterialPageRoute(
                builder: (context) => CourseShareScreen(
                      user: user,
                      pdpBloc: pdpBloc,
                      pdpId: item.id,
                    )));
          }),
      Divider(),
      ListTile(
          title: Text("Chia sẻ ra mạng xã hội"),
          onTap: () {
            Share.share(item.url);
          }),
    ]);
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_blocs.dart';
import '../blocs/pdp/pdp_blocs.dart';
import '../customs/feedback.dart';
import '../dto/pdp_dto.dart';
import '../main.dart';
import '../models/page_repo.dart';
import '../models/transaction_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import 'loading.dart';
import 'pdp/pdp_body.dart';

class PDPScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _PDPScreen();
}

class _PDPScreen extends State<PDPScreen> {
  PdpBloc pdpBloc;
  PdpDTO data;
  int itemId;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    final transRepo = RepositoryProvider.of<TransactionRepository>(context);
    pdpBloc = PdpBloc(pageRepository: pageRepo, transactionRepository: transRepo);
    try {
      itemId = int.parse(ModalRoute.of(context).settings.arguments);
    } catch (e) {
      itemId = ModalRoute.of(context).settings.arguments;
    }
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider<PdpBloc>(
      create: (context) {
        return pdpBloc..add(LoadPDPEvent(id: itemId, token: user == null ? "" : user.token));
      },
      child: Scaffold(
        appBar: BaseAppBar(
          title: "",
          user: user,
        ),
        body: RefreshIndicator(
          onRefresh: () async {
            pdpBloc..add(LoadPDPEvent(id: itemId, token: user == null ? "" : user.token));
          },
          child: BlocListener<PdpBloc, PdpState>(
            listener: (context, state) {
              if (state is PdpFailState) {
                Navigator.of(context).popUntil(ModalRoute.withName("/"));
              }
              if (state is PdpRegisterFailState) {
                // toast(state.error);
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text(state.error),
                  ));
              }
              if (state is PdpRegisterSuccessState) {
                BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    duration: Duration(seconds: 5),
                    content: Text(
                        "Bạn đã đăng ký thành công khóa học. Chúng tôi sẽ gửi thông báo về buổi học trong thời gian sớm nhất."),
                  ));
              }
            },
            child: BlocBuilder<PdpBloc, PdpState>(
              builder: (context, state) {
                if (state is PdpSuccessState) {
                  data = state.data;
                }
                if (state is PdpFavoriteTouchSuccessState) {
                  data.isFavorite = state.isFav;
                }
                return data != null
                    ? CustomFeedback(
                        user: user,
                        child: PdpBody(
                          pdpBloc: pdpBloc,
                          data: data,
                          user: user,
                        ),
                      )
                    : LoadingScreen();
              },
            ),
          ),
        ),
        floatingActionButton: FloatingActionButtonHome(),
        floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
        bottomNavigationBar: BlocBuilder(
          bloc: pdpBloc,
          builder: (context, state) {
            return BottomNav(
                user: user,
                route:
                    data != null && data.author.role == "teacher" ? BottomNav.TEACHER_INDEX : BottomNav.SCHOOL_INDEX);
          },
        ),
      ),
    );
  }
}


import 'package:anylearn/widgets/loading_widget.dart';
// import 'package:barcode_scan/barcode_scan.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:share/share.dart';

import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_event.dart';
import '../blocs/auth/auth_state.dart';
import '../customs/feedback.dart';
import '../dto/user_dto.dart';

class QrCodeScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _QrCodeScreen();
}

class _QrCodeScreen extends State<QrCodeScreen> {
  UserDTO user;
  AuthBloc _authBloc;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double height = MediaQuery.of(context).size.height;
    double qrWidth = width * 2 / 3;
    double textPadding = (width - qrWidth) / 2;
    double qrPadding = (height - qrWidth) / 3;

    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
      },
      child: BlocBuilder(
        bloc: _authBloc,
        builder: (context, state) {
          if (state is AuthSuccessState) {
            user = state.user;
          }
          return user == null
              ? LoadingWidget()
              : Scaffold(
                  appBar: AppBar(
                    title: Text(user.name),
                  ),
                  body: CustomFeedback(
                    user: user,
                    child: Container(
                      alignment: Alignment.center,
                      padding: EdgeInsets.only(top: qrPadding, bottom: 10.0),
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          QrImage(
                            data: user.refLink,
                            version: QrVersions.auto,
                            size: qrWidth,
                            gapless: true,
                            embeddedImage: AssetImage('assets/images/logo_app.jpg'),
                            embeddedImageStyle: QrEmbeddedImageStyle(
                              size: Size(40, 40),
                            ),
                          ),
                          Container(
                            alignment: Alignment.center,
                            padding: EdgeInsets.only(left: textPadding, right: textPadding),
                            child: Text(
                              "Bạn bè có thể kết nối với bạn khi quét mã QR này. Thêm bạn học thêm vui.",
                              textAlign: TextAlign.center,
                            ),
                          ),
                          Expanded(
                            child: Align(
                                alignment: FractionalOffset.bottomCenter,
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: <Widget>[
                                    // MaterialButton(
                                    //   color: Colors.green,
                                    //   onPressed: () => _scan(context),
                                    //   child: Text(
                                    //     "QUÉT QR",
                                    //     style: TextStyle(fontSize: 18.0, color: Colors.white),
                                    //   ),
                                    // ),
                                    MaterialButton(
                                      onPressed: () {
                                        Share.share(user.refLink);
                                      },
                                      child: Text(
                                        "CHIA SẺ MÃ",
                                        style: TextStyle(fontSize: 16.0, color: Colors.blue),
                                      ),
                                    ),
                                  ],
                                )),
                          ),
                        ],
                      ),
                    ),
                  ),
                );
        },
      ),
    );
  }

  // Future _scan(context) async {
  //   var result = await BarcodeScanner.scan(
  //       options: ScanOptions(
  //           restrictFormat: [
  //         BarcodeFormat.qr,
  //       ],
  //           android: AndroidOptions(
  //             useAutoFocus: true,
  //           )));
  // }
}


import 'package:anylearn/widgets/loading_widget.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:overlay_support/overlay_support.dart';

import '../blocs/course/course_blocs.dart';
import '../dto/user_dto.dart';
import '../widgets/gradient_button.dart';

class RatingInputScreen extends StatefulWidget {
  final UserDTO user;
  final itemId;
  final itemTitle;
  final lastRating;

  const RatingInputScreen({Key key, this.user, this.itemId, this.itemTitle, this.lastRating}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _RatingInputScreen();
}

class _RatingInputScreen extends State<RatingInputScreen> {
  CourseBloc _courseBloc;
  int score = 5;
  final max = 5;
  int current = 1;
  final _commentInput = TextEditingController();

  @override
  void didChangeDependencies() {
    _courseBloc = BlocProvider.of<CourseBloc>(context);
    if (widget.lastRating > 0) {
      score = widget.lastRating;
    }
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener(
      bloc: _courseBloc,
      listener: (context, state) {
        if (state is ReviewSubmitSuccessState) {
          toast("Cảm ơn bạn đã gửi nhận xét về khóa học.", duration: Duration(seconds: 3));
          Navigator.of(context).pop(true);
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Đánh giá về khóa học"),
          centerTitle: false,
        ),
        body: Container(
          padding: EdgeInsets.all(15),
          child: Column(crossAxisAlignment: CrossAxisAlignment.stretch, children: [
            Text("Đánh giá của bạn rất quan trọng để chúng tôi cải thiện mỗi ngày."),
            Card(
              child: Container(
                padding: EdgeInsets.all(15),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "Cho điểm " + widget.itemTitle,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Container(
                      child: Row(
                        children: _buildStar(),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            Card(
              child: Container(
                padding: EdgeInsets.all(15),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "Bình luận thêm về " + widget.itemTitle,
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    TextFormField(
                      controller: _commentInput,
                      maxLines: 5,
                      decoration: InputDecoration(
                        hintText: "Hãy chia sẻ thêm cảm nhận của bạn về buổi học nhé.",
                      ),
                    )
                  ],
                ),
              ),
            ),
            BlocBuilder(
                bloc: _courseBloc,
                builder: (context, state) {
                  if (state is ReviewSubmitingState) {
                    return LoadingWidget();
                  }
                  return GradientButton(
                    title: "LƯU NHẬN XÉT",
                    function: () {
                      _courseBloc
                        ..add(ReviewSubmitEvent(
                            token: widget.user.token,
                            itemId: widget.itemId,
                            rating: score,
                            comment: _commentInput.text));
                    },
                  );
                })
          ]),
        ),
      ),
    );
  }

  void _getScore(int _score) {
    setState(() {
      score = _score;
    });
  }

  List<Widget> _buildStar() {
    List<int> scores = [1, 2, 3, 4, 5];
    List<Widget> list = [];

    scores.forEach((_score) {
      list.add(Padding(
        padding: EdgeInsets.all(0.0),
        child: IconButton(
          icon: _score <= score
              ? Icon(
                  Icons.star,
                  size: 32,
                  color: Colors.orange[200],
                )
              : Icon(
                  Icons.star_border,
                  size: 32,
                  color: Colors.grey,
                ),
          onPressed: () {
            _getScore(_score);
          },
        ),
      ));
    });
    return list;
  }
}


import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_html/flutter_html.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';
import 'package:validators/validators.dart' as validator;

import '../blocs/auth/auth_blocs.dart';
import '../blocs/register/register_blocs.dart';
import '../customs/custom_radio.dart';
import '../customs/register_curved_paint.dart';
import '../dto/const.dart';
import '../dto/login_callback.dart';
import '../dto/user_dto.dart';
import '../models/user_repo.dart';

class RegisterScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _RegisterScreen();
}

class _RegisterScreen extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  String _toc = "";
  UserDTO _user = new UserDTO(
    role: MyConst.ROLE_MEMBER,
  );
  String confirmPassword;
  bool _agreedToc = false;

  final FocusNode _focusRef = FocusNode();
  final FocusNode _focusName = FocusNode();
  final FocusNode _focusPhone = FocusNode();
  final FocusNode _focusPass = FocusNode();
  final FocusNode _focusRePass = FocusNode();
  LoginCallback callback;

  RegisterBloc _loginBloc;
  AuthBloc _authBloc;
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final userRepository = RepositoryProvider.of<UserRepository>(context);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    _loginBloc = RegisterBloc(userRepository: userRepository)..add(RegisterFormLoadEvent());
    if (ModalRoute.of(context).settings.arguments != null) {
      callback = ModalRoute.of(context).settings.arguments;
    }
  }

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width / 2;

    return BlocListener<AuthBloc, AuthState>(
      bloc: _authBloc,
      listener: (context, state) {
        if (state is AuthSuccessState) {
          Navigator.of(context).popUntil(ModalRoute.withName("/"));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Image.asset(
            "assets/images/logo_text.png",
            height: 40.0,
          ),
          elevation: 0.0,
        ),
        body: BlocListener<RegisterBloc, RegisterState>(
          bloc: _loginBloc,
          listener: (context, state) {
            if (state is RegisterFailState) {
               ScaffoldMessenger.of(context)
              ..hideCurrentSnackBar()
              ..showSnackBar(SnackBar(
                content: Text(state.error),
              ));
            }
            if (state is RegisterTocSuccessState) {
              _toc = state.toc;
            }
            if (state is RegisterSuccessState) {
              Navigator.of(context).pushNamed("/login",
                  arguments: LoginCallback(
                    message: "Đăng ký thành công, vui lòng đăng nhập lại.",
                    routeName: callback != null && callback.routeName != null ? callback.routeName : null,
                    routeArgs: callback != null && callback.routeArgs != null ? callback.routeArgs : null,
                  ));
            }
          },
          child: Container(
            child: Form(
              key: _formKey,
              child: ListView(
                children: <Widget>[
                  CustomPaint(
                    child: Container(
                      height: 100.0,
                      alignment: Alignment.bottomRight,
                      padding: EdgeInsets.only(right: width / 4, bottom: 20.0),
                      child: Text(
                        "Đăng ký",
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16.0,
                          color: Colors.blue,
                        ),
                      ),
                    ),
                    painter: CustomCurvedPaint(),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, top: 15.0),
                    child: Text("Tôi là: "),
                  ),
                  Container(
                    padding: const EdgeInsets.only(left: 30.0),
                    child: Row(
                      children: <Widget>[
                        CustomRadio(
                          groupValue: _user.role,
                          value: MyConst.ROLE_MEMBER,
                          label: "Thành viên",
                          func: () => _selectRole(MyConst.ROLE_MEMBER),
                        ),
                        CustomRadio(
                            groupValue: _user.role,
                            value: MyConst.ROLE_TEACHER,
                            label: "Giảng viên",
                            func: () => _selectRole(MyConst.ROLE_TEACHER)),
                        CustomRadio(
                          groupValue: _user.role,
                          value: MyConst.ROLE_SCHOOL,
                          label: "Trường học",
                          func: () => _selectRole(MyConst.ROLE_SCHOOL),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0, top: 10.0),
                    child: TextFormField(
                      initialValue: _user.refcode,
                      onSaved: (value) {
                        setState(() {
                          _user.refcode = value.trim();
                        });
                      },
                      focusNode: _focusRef,
                      textInputAction: TextInputAction.next,
                      onFieldSubmitted: (term) {
                        _fieldFocusChange(context, _focusRef, _focusName);
                      },
                      decoration: InputDecoration(
                        labelText: "Mã giới thiệu",
                        contentPadding: EdgeInsets.all(5.0),
                        labelStyle: TextStyle(fontSize: 14.0),
                        prefixIcon: Icon(MdiIcons.qrcode),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0),
                    child: TextFormField(
                      initialValue: _user.name,
                      onSaved: (value) {
                        setState(() {
                          _user.name = value.trim();
                        });
                      },
                      validator: (String value) {
                        if (value.length < 6) {
                          return "Tên của bạn cần lớn hơn 6 kí tự";
                        }
                        _formKey.currentState.save();
                        return null;
                      },
                      focusNode: _focusName,
                      textInputAction: TextInputAction.next,
                      onFieldSubmitted: (term) {
                        _fieldFocusChange(context, _focusName, _focusPhone);
                      },
                      decoration: InputDecoration(
                        labelText: _user.role == MyConst.ROLE_SCHOOL ? "Tên trường" : "Họ & Tên",
                        prefixIcon: Icon(MdiIcons.account),
                        labelStyle: TextStyle(fontSize: 14.0),
                        contentPadding: EdgeInsets.all(5.0),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0),
                    child: TextFormField(
                      initialValue: _user.phone,
                      onSaved: (value) {
                        setState(() {
                          _user.phone = value.trim();
                        });
                      },
                      validator: (String value) {
                        if (value.length < 10) {
                          return "Số điện thoại không hợp lệ";
                        }
                        _formKey.currentState.save();
                        return null;
                      },
                      focusNode: _focusPhone,
                      textInputAction: TextInputAction.next,
                      onFieldSubmitted: (term) {
                        _fieldFocusChange(context, _focusPhone, _focusPass);
                      },
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.all(5.0),
                        labelText: "Số điện thoại",
                        labelStyle: TextStyle(fontSize: 14.0),
                        prefixIcon: Icon(MdiIcons.phone),
                      ),
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0),
                    child: TextFormField(
                      onSaved: (value) {
                        setState(() {
                          _user.password = value.trim();
                        });
                      },
                      validator: (String value) {
                        if (value.length < 8) {
                          return "Mật khẩu ít nhất 8 kí tự";
                        }
                        _formKey.currentState.save();
                        return null;
                      },
                      focusNode: _focusPass,
                      textInputAction: TextInputAction.next,
                      onFieldSubmitted: (term) {
                        _fieldFocusChange(context, _focusPass, _focusRePass);
                      },
                      decoration: InputDecoration(
                        labelText: "Mật khẩu",
                        prefixIcon: Icon(MdiIcons.lock),
                        labelStyle: TextStyle(fontSize: 14.0),
                        contentPadding: EdgeInsets.all(5.0),
                      ),
                      obscureText: true,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 40.0, right: 40.0),
                    child: TextFormField(
                      onSaved: (value) {
                        setState(() {
                          confirmPassword = value;
                        });
                      },
                      focusNode: _focusRePass,
                      textInputAction: TextInputAction.done,
                      onFieldSubmitted: (term) {
                        _focusRePass.unfocus();
                      },
                      validator: (String value) {
                        if (value != _user.password) {
                          return "Xác nhận mât khẩu không đúng";
                        }
                        _formKey.currentState.save();
                        return null;
                      },
                      decoration: InputDecoration(
                        labelText: "Nhập lại mật khẩu",
                        prefixIcon: Icon(MdiIcons.lockCheck),
                        labelStyle: TextStyle(fontSize: 14.0),
                        contentPadding: EdgeInsets.all(5.0),
                      ),
                      obscureText: true,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.only(left: 15.0, top: 0),
                    child: CheckboxListTile(
                      dense: true,
                      controlAffinity: ListTileControlAffinity.leading,
                      value: _agreedToc,
                      onChanged: (value) => setState(() {
                        if (!_agreedToc) {
                          showDialog(
                              context: context,
                              builder: (context) => AlertDialog(
                                    scrollable: true,
                                    title: Text("Điều khoản sử dụng"),
                                    content: Html(
                                      data: _toc,
                                      shrinkWrap: true,
                                    ),
                                    actions: <Widget>[
                                      FlatButton(
                                        onPressed: () => Navigator.pop(context),
                                        child: Text("Đã đọc và đồng ý".toUpperCase()),
                                      )
                                    ],
                                  ));
                        }
                        _agreedToc = value;
                      }),
                      title: Text.rich(TextSpan(text: "Tôi đồng ý với ", children: [
                        TextSpan(
                          text: "Điều khoản sử dụng",
                          style: TextStyle(color: Colors.red),
                        ),
                      ])),
                    ),
                  ),
                  Container(
                    decoration: BoxDecoration(
                      gradient: LinearGradient(colors: [Colors.blue, Colors.lightBlueAccent, Colors.blue]),
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    height: 40.0,
                    margin: const EdgeInsets.only(left: 40.0, right: 40.0, top: 15.0),
                    child: FlatButton(
                      onPressed: () {
                        _submitForm(context);
                      },
                      child: Text(
                        "Đăng ký",
                        style: TextStyle(fontSize: 16.0, color: Colors.white),
                      ),
                    ),
                  ),
                  Container(
                    alignment: Alignment.center,
                    padding: EdgeInsets.only(top: 30.0),
                    child: Text.rich(
                      TextSpan(text: "Bạn đã có tài khoản?", children: [
                        TextSpan(
                            text: " Đăng nhập",
                            style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
                            recognizer: TapGestureRecognizer()
                              ..onTap = () {
                                Navigator.of(context).popAndPushNamed("/login", arguments: callback);
                              })
                      ]),
                    ),
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  void _selectRole(String value) {
    setState(() {
      _user.role = value;
    });
  }

  void _fieldFocusChange(BuildContext context, FocusNode currentFocus, FocusNode nextFocus) {
    currentFocus.unfocus();
    FocusScope.of(context).requestFocus(nextFocus);
  }

  void _submitForm(BuildContext context) {
    if (!_agreedToc) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          contentPadding: EdgeInsets.all(0),
          scrollable: true,
          title: Text(
            "Chưa đồng ý điều khoản sử dụng.",
            style: TextStyle(fontSize: 14),
          ),
          content: Text("Bạn vui lòng đọc và tick chọn đồng ý với điều khoản sử dụng của chúng tôi. Cảm ơn."),
          actions: <Widget>[
            FlatButton(
              onPressed: () => Navigator.pop(context),
              child: Text("Tôi sẽ đọc".toUpperCase()),
            )
          ],
        ),
      );
    }
    if (_formKey.currentState.validate()) {
      _formKey.currentState.save();
      _loginBloc.add(RegisterButtonPressedEvent(userInput: _user));
    }
  }
}


import 'dart:math' as math;

import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:flutter/material.dart';

import '../../dto/users_dto.dart';
import '../../widgets/rating.dart';
import '../../widgets/sliver_banner.dart';
import 'school_filter.dart';

class SchoolBody extends StatelessWidget {
  final UsersDTO schoolsData;

  const SchoolBody({Key key, this.schoolsData}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    final imgH = (width - 40) / 3;
    final imgW = (width - 40) / 3;
    return CustomScrollView(
      slivers: <Widget>[
        SliverBanner(banner: this.schoolsData.banner),
        SchoolFilter(),
        SliverList(
          delegate: SliverChildBuilderDelegate(
            (context, index) {
              final int itemIndex = index ~/ 2;
              if (index.isEven) {
                return Container(
                  padding: EdgeInsets.fromLTRB(20, 10, 20, 10),
                  child: InkWell(
                    onTap: () {
                      Navigator.of(context).pushNamed("/items/school", arguments: schoolsData.list.data[itemIndex].id);
                    },
                    child: Stack(children: [
                      Container(
                          margin: EdgeInsets.only(top: imgH / 4, left: 10),
                          child: ConstrainedBox(
                            constraints: new BoxConstraints(
                              minHeight: imgH * 3 / 4 + 15,
                            ),
                            child: Card(
                              elevation: 0.5,
                              child: Container(
                                  width: double.infinity,
                                  padding: EdgeInsets.only(left: imgW, top: 5, right: 10, bottom: 5),
                                  child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                                    Text(
                                      schoolsData.list.data[itemIndex].name,
                                      style: TextStyle(fontWeight: FontWeight.w500),
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                    RatingBox(
                                      score: schoolsData.list.data[itemIndex].rating,
                                      alignment: "start",
                                    ),
                                    schoolsData.list.data[itemIndex].introduce != null
                                        ? Text(
                                            schoolsData.list.data[itemIndex].introduce,
                                            maxLines: 2,
                                            style: TextStyle(color: Colors.grey),
                                            overflow: TextOverflow.ellipsis,
                                          )
                                        : Text(""),
                                  ])),
                            ),
                          )),
                      Container(
                        width: imgW,
                        height: imgH,
                        decoration: BoxDecoration(
                          boxShadow: [
                            BoxShadow(
                              color: Colors.grey.withOpacity(0.2),
                              spreadRadius: 2,
                              blurRadius: 10,
                              offset: Offset(0, 3), // changes position of shadow
                            ),
                          ],
                        ),
                        child: schoolsData.list.data[itemIndex].image != null &&
                                schoolsData.list.data[itemIndex].image.isNotEmpty
                            ? ClipRRect(
                                borderRadius: BorderRadius.circular(8.0),
                                child: schoolsData.list.data[itemIndex].image != null
                                    ? CustomCachedImage(url: schoolsData.list.data[itemIndex].image)
                                    : Icon(Icons.broken_image),
                              )
                            : SizedBox(
                                height: 60,
                                child: Icon(
                                  Icons.school,
                                  size: 60,
                                  color: Colors.grey,
                                ),
                              ),
                      ),
                    ]),
                  ),
                );
              }
              return Divider(
                height: 0,
                color: Colors.transparent,
              );
            },
            childCount: math.max(0, schoolsData.list.data.length * 2 - 1),
            semanticIndexCallback: (Widget widget, int localIndex) {
              if (localIndex.isEven) {
                return localIndex ~/ 2;
              }
              return null;
            },
          ),
        ),
      ],
    );
  }
}


import 'package:flutter/material.dart';

class SchoolFilter extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _SchooFilter();
}

class _SchooFilter extends State<SchoolFilter> {
  String dropdownValue = "price";
  Map<String, String> options = {
    // 'nameaz': 'Theo tên A-Z',
    // 'nameza': 'Theo tên Z-A',
    // 'course': 'Theo Số lượng Khóa học',
    'price': 'Theo mức độ quan tâm',
  };

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: Column(
        children: <Widget>[
          Container(
            alignment: Alignment.centerLeft,
            // padding: EdgeInsets.only(left: 15.0),
            padding: const EdgeInsets.symmetric(horizontal: 15.0),
            child: DropdownButton<String>(
              value: dropdownValue,
              icon: Icon(Icons.keyboard_arrow_down),
              iconSize: 24,
              elevation: 16,
              isExpanded: true,
              selectedItemBuilder: (BuildContext context) => _buildSelected(context),
              style: TextStyle(fontWeight: FontWeight.normal, color: Colors.black),
              underline: Container(
                color: Colors.transparent,
              ),
              onChanged: (String newValue) {
                setState(() {
                  dropdownValue = newValue;
                });
              },
              items: _buildList(options),
            ),
          ),
          Divider(
            height: 0.0,
            thickness: 1.0,
            color: Colors.black12,
          ),
        ],
      ),
    );
  }

  List<Widget> _buildSelected(BuildContext context) {
    List<Widget> list = [];
    options.forEach((key, title) {
      list.add(Container(
          margin: EdgeInsets.all(0.0),
          padding: EdgeInsets.all(0.0),
          child: Row(
            children: <Widget>[
              Text("Sắp xếp: "),
              Text(
                title,
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14.0),
              ),
            ],
          )));
    });
    return list;
  }

  List<DropdownMenuItem<String>> _buildList(options) {
    List<DropdownMenuItem<String>> list = [];
    options.forEach((key, title) {
      list.add(
        DropdownMenuItem<String>(
          value: key,
          child: Text(
            title,
            style: TextStyle(
              fontWeight: dropdownValue == key ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ),
      );
    });
    return list;
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/users/users_blocs.dart';
import '../customs/feedback.dart';
import '../main.dart';
import '../models/page_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import '../widgets/loading_widget.dart';
import 'school/school_body.dart';

class SchoolScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _SchoolScreen();
}

class _SchoolScreen extends State<SchoolScreen> {
  UsersBloc usersBloc;
  @override
  void didChangeDependencies() {
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    usersBloc = UsersBloc(pageRepository: pageRepo);
    usersBloc.add(UsersSchoolLoadEvent());
    super.didChangeDependencies();
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: BaseAppBar(
        user: user,
        title: "Học viện & Trung tâm đào tạo",
        screen: "school",
      ),
      body: BlocProvider<UsersBloc>(
          create: (context) => usersBloc,
          child: BlocBuilder<UsersBloc, UsersState>(builder: (context, state) {
            if (state is UsersSchoolSuccessState) {
              return RefreshIndicator(
                child: CustomFeedback(user: user, child: SchoolBody(schoolsData: state.data)),
                onRefresh: _reloadPage,
              );
            }
            return LoadingWidget();
          })),
      floatingActionButton: FloatingActionButtonHome(),
      floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
      bottomNavigationBar: BottomNav(
        user: user,
        route: BottomNav.SCHOOL_INDEX,
      ),
    );
  }

  Future<void> _reloadPage() async {
    usersBloc.add(UsersSchoolLoadEvent());
  }
}


import 'package:flutter/material.dart';

class SearchAppBar extends StatelessWidget implements PreferredSizeWidget {
  
  @override
  Widget build(BuildContext context) {
    return AppBar(
      automaticallyImplyLeading: true,
      centerTitle: false,
    );
  }

  @override
  Size get preferredSize => new Size.fromHeight(56.0);
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:flutter/material.dart';

import '../../dto/users_dto.dart';
import '../../widgets/rating.dart';
import '../../widgets/sliver_banner.dart';
import 'teacher_filter.dart';

class TeacherBody extends StatelessWidget {
  final UsersDTO teachers;

  TeacherBody({this.teachers});
  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width / 2;
    return CustomScrollView(
      slivers: <Widget>[
        SliverBanner(
          banner: teachers.banner,
        ),
        TeacherFilter(),
        SliverGrid(
          gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
            maxCrossAxisExtent: width,
            mainAxisSpacing: 0.0,
            crossAxisSpacing: 0.0,
            childAspectRatio: 0.7,
          ),
          delegate: SliverChildBuilderDelegate(
            (BuildContext context, int index) {
              return InkWell(
                onTap: () {
                  Navigator.of(context).pushNamed("/items/teacher", arguments: teachers.list.data[index].id);
                },
                child: Container(
                  alignment: Alignment.topCenter,
                  padding: EdgeInsets.all(10.0),
                  decoration: BoxDecoration(
                    border: Border(
                      right: BorderSide(
                        color: Colors.grey[100],
                        width: 1.0,
                      ),
                      bottom: BorderSide(
                        color: Colors.grey[100],
                        width: 1.0,
                      ),
                    ),
                  ),
                  child: Container(
                    alignment: Alignment.topLeft,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      // mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Container(
                          width: width - 40,
                          height: width - 40,
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(width / 2),
                            child: teachers.list.data[index].image != null && teachers.list.data[index].image != ""
                                ? CustomCachedImage(
                                    url: teachers.list.data[index].image,
                                  )
                                : SizedBox(
                                    child: Icon(
                                      Icons.account_circle,
                                      size: width - 40,
                                      color: Colors.grey,
                                    ),
                                  ),
                          ),
                        ),
                        Container(
                          alignment: Alignment.center,
                          padding: EdgeInsets.all(5.0),
                          margin: EdgeInsets.only(top: 5.0),
                          
                          child: teachers.list.data[index].title != null
                              ? Text(
                                  teachers.list.data[index].title,
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                  style: TextStyle(fontSize: 10.0),
                                )
                              : SizedBox(height: 0),
                        ),
                        Container(
                          alignment: Alignment.center,
                          padding: EdgeInsets.all(5.0),
                          child: Text(
                            teachers.list.data[index].name,
                            overflow: TextOverflow.ellipsis,
                            style: TextStyle(fontSize: 11.0, fontWeight: FontWeight.bold),
                          ),
                        ),
                        Container(
                          alignment: Alignment.center,
                          padding: EdgeInsets.only(top: 5.0),
                          child: RatingBox(score: teachers.list.data[index].rating),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
            childCount: teachers.list.data.length,
          ),
        ),
      ],
    );
  }
}


import 'package:flutter/material.dart';

class TeacherFilter extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _TeacherFilter();
}

class _TeacherFilter extends State<TeacherFilter> {
  String dropdownValue = "popular";
  Map<String, String> options = {
    // 'nameaz': 'Theo tên A-Z',
    // 'nameza': 'Theo tên Z-A',
    // 'course': 'Theo Số lượng Khóa học',
    'popular': 'Theo mức độ quan tâm',
  };

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: Container(
        alignment: Alignment.centerLeft,
        decoration: BoxDecoration(border: Border(bottom: BorderSide(color: Colors.grey[200]))),
        // padding: EdgeInsets.only(left: 15.0),
        padding: const EdgeInsets.symmetric(horizontal: 15.0),
        child: DropdownButton<String>(
          value: dropdownValue,
          icon: Icon(Icons.keyboard_arrow_down),
          iconSize: 24,
          elevation: 16,
          isExpanded: true,
          selectedItemBuilder: (BuildContext context) => _buildSelected(context),
          style: TextStyle(fontWeight: FontWeight.normal, color: Colors.black),
          underline: Container(
            color: Colors.transparent,
          ),
          onChanged: (String newValue) {
            setState(() {
              dropdownValue = newValue;
            });
          },
          items: _buildList(options),
        ),
      ),
    );
  }

  List<Widget> _buildSelected(BuildContext context) {
    List<Widget> list = [];
    options.forEach((key, title) {
      list.add(Container(
          margin: EdgeInsets.all(0.0),
          padding: EdgeInsets.all(0.0),
          child: Row(
            children: <Widget>[
              Text("Sắp xếp: "),
              Text(
                title,
                style: TextStyle(fontWeight: FontWeight.bold, fontSize: 14.0),
              ),
            ],
          )));
    });
    return list;
  }

  List<DropdownMenuItem<String>> _buildList(options) {
    List<DropdownMenuItem<String>> list = [];
    options.forEach((key, title) {
      list.add(
        DropdownMenuItem<String>(
          value: key,
          child: Text(
            title,
            style: TextStyle(
              fontWeight: dropdownValue == key ? FontWeight.bold : FontWeight.normal,
            ),
          ),
        ),
      );
    });
    return list;
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../blocs/users/users_blocs.dart';
import '../customs/feedback.dart';
import '../main.dart';
import '../models/page_repo.dart';
import '../widgets/appbar.dart';
import '../widgets/bottom_nav.dart';
import '../widgets/fab_home.dart';
import 'loading.dart';
import 'teacher/teacher_body.dart';

class TeacherScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _TeacherScreen();
}

class _TeacherScreen extends State<TeacherScreen> {
  UsersBloc usersBloc;
  @override
  void didChangeDependencies() {
    final pageRepo = RepositoryProvider.of<PageRepository>(context);
    usersBloc = UsersBloc(pageRepository: pageRepo);
    usersBloc.add(UsersTeacherLoadEvent());
    super.didChangeDependencies();
  }

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: BaseAppBar(
          user: user,
          title: "Giảng viên & Chuyên gia",
          screen: "teacher",
        ),
        body: BlocProvider<UsersBloc>(
          create: (context) => usersBloc,
          child: BlocBuilder<UsersBloc, UsersState>(builder: (context, state) {
            if (state is UsersTeacherSuccessState) {
              return RefreshIndicator(
                child: CustomFeedback(user: user, child: TeacherBody(teachers: state.data)),
                onRefresh: _reloadPage,
              );
            }
            return LoadingScreen();
          }),
        ),
        floatingActionButton: FloatingActionButtonHome(),
        floatingActionButtonLocation: FloatingActionButtonLocation.startDocked,
        bottomNavigationBar: BottomNav(
          route: BottomNav.TEACHER_INDEX,
          user: user,
        ));
  }

  Future<void> _reloadPage() async {
    usersBloc.add(UsersTeacherLoadEvent());
  }
}


import 'package:flutter/material.dart';

class BankForm extends StatelessWidget {
  final GlobalKey<FormState> formKey;
  final TextEditingController bankName;
  final TextEditingController bankBranch;
  final TextEditingController bankNo;
  final TextEditingController bankAccount;

  const BankForm({Key key, this.formKey, this.bankName, this.bankBranch, this.bankNo, this.bankAccount})
      : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      child: Column(
        children: [
          TextFormField(
            controller: bankName,
            validator: (value) {
              if (value.isEmpty) {
                return "Bạn cần nhập tên ngân hàng";
              }
              formKey.currentState.save();
              return null;
            },
            decoration: InputDecoration(
              labelText: "Ngân hàng",
              contentPadding: EdgeInsets.all(5),
            ),
          ),
          TextFormField(
            controller: bankBranch,
             validator: (value) {
              if (value.isEmpty) {
                return "Bạn cần nhập chi nhánh ngân hàng";
              }
              formKey.currentState.save();
              return null;
            },
            decoration: InputDecoration(
              labelText: "Chi nhánh",
              contentPadding: EdgeInsets.all(5),
            ),
          ),
          TextFormField(
            controller: bankNo,
             validator: (value) {
              if (value.isEmpty) {
                return "Bạn cần nhập Số tài khoản";
              }
              formKey.currentState.save();
              return null;
            },
            decoration: InputDecoration(
              labelText: "Số tài khoản",
              contentPadding: EdgeInsets.all(5),
            ),
          ),
          TextFormField(
            controller: bankAccount,
             validator: (value) {
              if (value.isEmpty) {
                return "Bạn cần nhập Họ tên chủ tài khoản";
              }
              formKey.currentState.save();
              return null;
            },
            decoration: InputDecoration(
              labelText: "Chủ tài khoản",
              contentPadding: EdgeInsets.all(5),
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import '../../dto/bank_dto.dart';
import '../../dto/const.dart';
import '../../dto/transaction_dto.dart';
import '../../widgets/bank_info.dart';

class DepositList extends StatefulWidget {
  final List<TransactionDTO> list;
  final BankDTO configBank;
  final String phone;

  const DepositList({Key key, this.list, this.configBank, this.phone}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _DepositList();
}

class _DepositList extends State<DepositList> {
  @override
  Widget build(BuildContext context) {
    final DateFormat _dateFormat = DateFormat("hh:mm\ndd/MM/yy");
    final NumberFormat _monneyFormat = NumberFormat("###,###,###", "vi_VN");
    return ListBody(
      children: widget.list
          .map((TransactionDTO e) => ListTile(
                onTap: e.status == 0
                    ? () {
                        BankDTO bankDTO = e.bankInfo ?? widget.configBank;
                        showDialog(
                            context: context,
                            builder: (context) {
                              return BankInfo(bankDTO: bankDTO, phone: widget.phone,);
                            });
                      }
                    : null,
                leading: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(
                    _dateFormat.format(DateTime.parse(e.createdDate)),
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 10.0,
                    ),
                  ),
                ),
                contentPadding: EdgeInsets.all(8.0),
                title: Text(e.content),
                subtitle: Text.rich(_buildStatus(e.status)),
                trailing: Text(
                  _monneyFormat.format(e.amount),
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: e.status == MyConst.TRANS_STATUS_APPROVE ? Colors.green : Colors.grey,
                  ),
                ),
              ))
          .toList(),
    );
  }

  TextSpan _buildStatus(int status) {
    if (status == MyConst.TRANS_STATUS_APPROVE) {
      return TextSpan(text: "Đã xác nhận", style: TextStyle(color: Colors.green));
    } else if (status == MyConst.TRANS_STATUS_CANCEL) {
      return TextSpan(text: "Đã từ chối", style: TextStyle(color: Colors.red));
    } else {
      return TextSpan(text: "Chưa xác nhận", style: TextStyle(color: Colors.grey), children: [
        TextSpan(text: "\nCHUYỂN KHOẢN", style: TextStyle(color: Colors.blue)),
      ]);
    }
  }
}


import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import '../../dto/transaction_dto.dart';

class ExchangeList extends StatelessWidget {
  final List<TransactionDTO> list;

  const ExchangeList({Key key, this.list}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final DateFormat _dateFormat = DateFormat("hh:mm\ndd/MM/yy");
    final NumberFormat _monneyFormat = NumberFormat("###,###,###", "vi_VN");
    return ListBody(
      children: list
          .map((TransactionDTO e) => ListTile(
                leading: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(
                    _dateFormat.format(DateTime.parse(e.createdDate)),
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 10.0,
                    ),
                  ),
                ),
                contentPadding: EdgeInsets.all(8.0),
                title: Text(e.content),
                subtitle: Text.rich(
                  e.status > 0
                      ? TextSpan(text: "Đã xác nhận", style: TextStyle(color: Colors.green))
                      : (TextSpan(text: "Chưa xác nhận", style: TextStyle(color: Colors.grey), children: [
                          TextSpan(text: "\nThông tin ngân hàng", style: TextStyle(color: Colors.blue)),
                        ])),
                ),
                trailing: Text(
                  _monneyFormat.format(e.amount),
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: e.status > 0 ? Colors.green : Colors.grey,
                  ),
                ),
              ))
          .toList(),
    );
  }
}


import 'package:anylearn/widgets/bank_info.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

import '../../dto/transaction_dto.dart';

class WithdrawList extends StatelessWidget {
  final List<TransactionDTO> list;

  const WithdrawList({Key key, this.list}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final DateFormat _dateFormat = DateFormat("hh:mm\ndd/MM/yy");
    final NumberFormat _monneyFormat = NumberFormat("###,###,###", "vi_VN");
    return ListBody(
      children: list
          .map((TransactionDTO e) => ListTile(
                leading: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Text(
                    _dateFormat.format(DateTime.parse(e.createdDate)),
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      fontSize: 10.0,
                    ),
                  ),
                ),
                contentPadding: EdgeInsets.all(8.0),
                title: Text(e.content),
                subtitle: Text.rich(
                  e.status > 0
                      ? TextSpan(text: "Đã xác nhận", style: TextStyle(color: Colors.green))
                      : (TextSpan(text: "Chưa xác nhận", style: TextStyle(color: Colors.grey), children: [
                          TextSpan(
                              text: "\nThông tin ngân hàng",
                              style: TextStyle(color: Colors.blue),
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  showDialog(
                                      context: context,
                                      builder: (context) {
                                        return SimpleDialog(
                                          title: Text("Tiền sẽ được chuyển khoản về ngân hàng sau:",
                                              style: TextStyle(fontSize: 12.0)),
                                          children: [
                                            ListTile(
                                              title: Text("Ngân hàng"),
                                              subtitle: Text(e.bankInfo.bankName),
                                            ),
                                            ListTile(
                                              title: Text("Chi nhánh"),
                                              subtitle: Text(e.bankInfo.bankBranch),
                                            ),
                                            ListTile(
                                              title: Text("Số tài khoản"),
                                              subtitle: Text(e.bankInfo.bankNo),
                                            ),
                                            ListTile(
                                              title: Text("Người  thụ hưởng"),
                                              subtitle: Text(e.bankInfo.accountName),
                                            ),
                                            Padding(
                                              padding: const EdgeInsets.all(8.0),
                                              child: RaisedButton(
                                                shape: RoundedRectangleBorder(
                                                  borderRadius: BorderRadius.circular(10.0),
                                                ),
                                                onPressed: () {
                                                  Navigator.of(context).pop();
                                                },
                                                color: Colors.blue,
                                                child: Text(
                                                  "OK",
                                                  style: TextStyle(color: Colors.white),
                                                ),
                                              ),
                                            ),
                                          ],
                                        );
                                      });
                                }),
                        ])),
                ),
                trailing: Text(
                  _monneyFormat.format(e.amount),
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: e.status > 0 ? Colors.green : Colors.grey,
                  ),
                ),
              ))
          .toList(),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/auth/auth_bloc.dart';
import '../blocs/auth/auth_event.dart';
import '../blocs/auth/auth_state.dart';
import '../blocs/transaction/transaction_blocs.dart';
import '../customs/feedback.dart';
import '../dto/const.dart';
import '../dto/transaction_dto.dart';
import '../dto/user_dto.dart';
import '../models/transaction_repo.dart';
import 'account/transaction_list.dart';
import 'loading.dart';

class TransactionScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _TransactionScreen();
}

class _TransactionScreen extends State<TransactionScreen> with TickerProviderStateMixin {
  TabController _tabController;
  AuthBloc _authBloc;
  UserDTO _user;
  final monneyF = new NumberFormat("###,###,###", "vi_VN");
  TransactionBloc _transBloc;
  Map<String, List<TransactionDTO>> data;

  @override
  void didChangeDependencies() {
    final transRepo = RepositoryProvider.of<TransactionRepository>(context);
    _transBloc = TransactionBloc(transactionRepository: transRepo);
    _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    _tabController =
        new TabController(vsync: this, length: 2, initialIndex: ModalRoute.of(context).settings.arguments ?? 0);
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener(
        bloc: _authBloc,
        listener: (context, state) {
          if (state is AuthFailState) {
            Navigator.of(context).popAndPushNamed("/login");
          }
          if (state is AuthSuccessState) {
            _user = state.user;
            _transBloc.add(LoadTransactionHistoryEvent(token: _user.token));
          }
        },
        child: BlocProvider<TransactionBloc>(
          create: (BuildContext context) => _transBloc,
          child: BlocBuilder<TransactionBloc, TransactionState>(
            builder: (context, state) {
              if (state is TransactionHistorySuccessState) {
                data = state.history;
              }
              return data == null
                  ? LoadingScreen()
                  : Scaffold(
                      appBar: AppBar(
                        centerTitle: false,
                        title: const Text("Giao dịch của tôi"),
                        actions: <Widget>[
                          IconButton(
                              icon: Icon(Icons.refresh),
                              onPressed: () {
                                _authBloc = BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
                              })
                        ],
                        bottom: PreferredSize(
                          child: _user.disableAnypoint
                              ? Container()
                              : Column(
                                  children: <Widget>[
                                    Row(
                                      children: <Widget>[
                                        Expanded(
                                            child: Card(
                                          child: Column(
                                            children: <Widget>[
                                              Container(
                                                child: Row(children: [
                                                  Expanded(
                                                    child: Text(
                                                      "anyPoint",
                                                      style: TextStyle(fontSize: 12.0, fontWeight: FontWeight.bold),
                                                    ),
                                                  ),
                                                  // Text.rich(
                                                  //   TextSpan(
                                                  //       text: "RÚT ĐIỂM",
                                                  //       style: TextStyle(
                                                  //         fontSize: 12.0,
                                                  //         color: Colors.orange,
                                                  //         fontWeight: FontWeight.bold,
                                                  //       ),
                                                  //       recognizer: TapGestureRecognizer()
                                                  //         ..onTap = () async {
                                                  //           await Navigator.of(context).pushNamed("/withdraw");
                                                  //           _authBloc = BlocProvider.of<AuthBloc>(context)
                                                  //             ..add(AuthCheckEvent());
                                                  //         }),
                                                  // ),
                                                ]),
                                                padding: EdgeInsets.all(10.0),
                                                decoration:
                                                    const BoxDecoration(border: Border(bottom: BorderSide(width: 0.1))),
                                              ),
                                              Container(
                                                  padding: EdgeInsets.only(top: 10.0, bottom: 10.0),
                                                  child: Text(
                                                    monneyF.format(_user.walletC),
                                                    style: TextStyle(
                                                        color: Colors.orange,
                                                        fontWeight: FontWeight.bold,
                                                        fontSize: 30.0),
                                                  )),
                                            ],
                                          ),
                                        )),
                                      ],
                                    ),
                                    TabBar(controller: _tabController, tabs: [
                                      Tab(child: Text("Lịch sử thanh toán")),
                                      Tab(child: Text("Lịch sử anyPoint")),
                                    ]),
                                  ],
                                ),
                          preferredSize: _user.disableAnypoint ? Size.fromHeight(0) : Size.fromHeight(150.0),
                        ),
                      ),
                      body: CustomFeedback(
                        user: _user,
                        child: TabBarView(
                          controller: _tabController,
                          children: [
                            TransactionList(
                              transactions: data[MyConst.WALLET_M],
                              tab: "wallet_m",
                            ),
                            _user.disableAnypoint ? Container() : TransactionList(transactions: data[MyConst.WALLET_C], tab: "wallet_c"),
                          ],
                        ),
                      ),
                    );
            },
          ),
        ));
  }
}


import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';

class WebviewScreen extends StatefulWidget {
  final String url;
  final String token;

  const WebviewScreen({Key key, this.url, this.token}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _WebviewScreen();
}

class _WebviewScreen extends State<WebviewScreen> {
  final Completer<WebViewController> _controller = Completer<WebViewController>();

  @override
  void initState() {
    super.initState();
    if (Platform.isAndroid) WebView.platform = SurfaceAndroidWebView();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: WebView(
        key: UniqueKey(),
        initialUrl: widget.url,
        userAgent: "anylearn-app",
        javascriptMode: JavascriptMode.unrestricted,
        gestureNavigationEnabled: true,
        onWebViewCreated: (WebViewController webViewController) {
          _controller.complete(webViewController);
          Map<String, String> headers = {"token": widget.token};
          webViewController.loadUrl(widget.url, headers: headers);
        },
        onPageStarted: (String progress) {
          print("WebView is loading (progress : $progress%)");
        },
      ),
    );
  }
}


import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../blocs/auth/auth_blocs.dart';
import '../blocs/transaction/transaction_blocs.dart';
import '../dto/bank_dto.dart';
import '../dto/const.dart';
import '../dto/transaction_config_dto.dart';
import '../dto/user_dto.dart';
import '../models/transaction_repo.dart';
import '../widgets/loading_widget.dart';
import 'transaction/bank_form.dart';
import 'transaction/withdraw_list.dart';

class WithdrawScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _WithdrawScreen();
}

class _WithdrawScreen extends State<WithdrawScreen> {
  final _formKey = GlobalKey<FormState>();
  final _amountInput = TextEditingController();
  final _ammountMInput = TextEditingController();
  final _bankName = TextEditingController();
  final _bankBranch = TextEditingController();
  final _bankNo = TextEditingController();
  final _bankAccount = TextEditingController();
  final _moneyFormat = NumberFormat("###,###,###", "vi_VN");

  TransactionBloc _transBloc;
  UserDTO user;
  TransactionConfigDTO config;
  int keep;
  int max;

  @override
  void didChangeDependencies() {
    final transRepo = RepositoryProvider.of<TransactionRepository>(context);
    _transBloc = TransactionBloc(transactionRepository: transRepo);
    BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
    super.didChangeDependencies();
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) {
        if (state is AuthFailState) {
          Navigator.of(context).popAndPushNamed("/login");
        }
        if (state is AuthSuccessState) {
          user = state.user;
          _transBloc..add(LoadTransactionPageEvent(type: MyConst.TRANS_TYPE_WITHDRAW, token: user.token));
        }
      },
      child: Scaffold(
        appBar: AppBar(
          title: Text("Rút tiền về ngân hàng"),
          centerTitle: false,
        ),
        body: BlocProvider<TransactionBloc>(
          create: (BuildContext context) => _transBloc,
          child: BlocListener<TransactionBloc, TransactionState>(
            listener: (BuildContext context, TransactionState state) {
              if (state is TransactionWithdrawSaveSuccessState) {
                BlocProvider.of<AuthBloc>(context)..add(AuthCheckEvent());
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text("Gửi lệnh rút tiền thành công. Vui lòng chờ chúng tôi xác nhận."),
                    duration: Duration(seconds: 2),
                  ));
              }
              if (state is TransactionSaveFailState) {
                ScaffoldMessenger.of(context)
                  ..hideCurrentSnackBar()
                  ..showSnackBar(SnackBar(
                    content: Text("Có lỗi khi lưu, vui lòng thử lại"),
                    duration: Duration(seconds: 2),
                  ));
              }
            },
            child: BlocBuilder<TransactionBloc, TransactionState>(
              builder: (context, state) {
                if (state is TransactionConfigSuccessState) {
                  config = state.configs;
                  keep = (config.vipFee / config.rate).floor();
                  max = user.walletC.floor() - keep;
                  max = max > 0 ? max : 0;
                }
                return config == null
                    ? LoadingWidget()
                    : Form(
                        key: _formKey,
                        child: Container(
                            padding: EdgeInsets.all(8.0),
                            child: ListView(
                              children: <Widget>[
                                Card(
                                  child: Container(
                                    padding: const EdgeInsets.all(8.0),
                                    child: Row(children: [
                                      Expanded(
                                          child: Text.rich(
                                        TextSpan(
                                          text: "SỐ ĐIỂM: ".toUpperCase(),
                                          style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                          children: [
                                            TextSpan(
                                                text: _moneyFormat.format(user.walletC),
                                                style: TextStyle(
                                                    color: Colors.orange, fontWeight: FontWeight.bold, fontSize: 16.0)),
                                          ],
                                        ),
                                      )),
                                      Text.rich(
                                        TextSpan(
                                            text: "LỊCH SỬ ĐIỂM",
                                            style: TextStyle(color: Colors.blue),
                                            recognizer: TapGestureRecognizer()
                                              ..onTap = () {
                                                Navigator.of(context).pushNamed("/transaction", arguments: 1);
                                              }),
                                      ),
                                    ]),
                                  ),
                                ),
                                Card(
                                  child: Container(
                                      padding: const EdgeInsets.all(8.0),
                                      child: Column(crossAxisAlignment: CrossAxisAlignment.stretch, children: [
                                        TextFormField(
                                          controller: _amountInput,
                                          style: TextStyle(fontSize: 32.0, fontWeight: FontWeight.bold),
                                          keyboardType: TextInputType.number,
                                          onChanged: (value) {
                                            setState(() {
                                              _ammountMInput.text = (int.parse(value) * config.rate).toString();
                                            });
                                          },
                                          validator: (String value) {
                                            if (value.isEmpty) {
                                              return "Bạn chưa nhập số điểm muốn rút";
                                            }
                                            if (user.walletC < keep || int.parse(value) > max) {
                                              return "Bạn được rút tối đa $max điểm";
                                            }
                                            if (int.tryParse(value) < 0) {
                                              return "Số tiền không đúng";
                                            }
                                            _formKey.currentState.save();
                                            return null;
                                          },
                                          decoration: InputDecoration(
                                              hintText: "Nhập số điểm muốn rút",
                                              hintStyle: TextStyle(
                                                fontSize: 20.0,
                                                fontWeight: FontWeight.normal,
                                              ),
                                              icon: Text(
                                                "ĐIỂM",
                                                style: TextStyle(fontWeight: FontWeight.bold),
                                              )),
                                        ),
                                        TextFormField(
                                          controller: _ammountMInput,
                                          readOnly: true,
                                          style: TextStyle(fontSize: 24.0, fontWeight: FontWeight.bold),
                                          keyboardType: TextInputType.number,
                                          decoration: InputDecoration(
                                              hintText: "Số tiền quy đổi dự kiến",
                                              hintStyle: TextStyle(
                                                fontSize: 16.0,
                                                fontWeight: FontWeight.normal,
                                              ),
                                              icon: Text(
                                                "VND",
                                                style: TextStyle(fontWeight: FontWeight.bold),
                                              )),
                                        ),
                                        Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Text(
                                            "Bạn được rút tối đa $max điểm",
                                            style: TextStyle(fontSize: 12.0),
                                          ),
                                        ),
                                      ])),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text(
                                    "Thông tin ngân hàng".toUpperCase(),
                                    style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(left: 8.0, right: 8, bottom: 8),
                                  child: BankForm(
                                    formKey: _formKey,
                                    bankName: _bankName,
                                    bankBranch: _bankBranch,
                                    bankNo: _bankNo,
                                    bankAccount: _bankAccount,
                                  ),
                                ),
                                Container(
                                  margin: EdgeInsets.only(top: 15.0),
                                  decoration: BoxDecoration(
                                    gradient:
                                        LinearGradient(colors: [Colors.blue, Colors.lightBlueAccent, Colors.blue]),
                                    borderRadius: BorderRadius.circular(10.0),
                                  ),
                                  height: 40.0,
                                  child: FlatButton(
                                      onPressed: () {
                                        if (_formKey.currentState.validate()) {
                                          _formKey.currentState.save();
                                          // showDialog(
                                          //   context: context,
                                          //   builder: (context) {
                                          //     return AlertDialog(
                                          //       content: Text("Chức năng rút tiền tạm thời chưa hỗ trợ."),
                                          //     );
                                          //   },
                                          // );

                                          _transBloc.add(SaveWithdrawEvent(
                                              amount: _amountInput.text,
                                              token: user.token,
                                              bankInfo: BankDTO(
                                                  bankName: _bankName.text,
                                                  bankBranch: _bankBranch.text,
                                                  bankNo: _bankNo.text,
                                                  accountName: _bankAccount.text)));
                                        }
                                      },
                                      child: Text(
                                        "Rút tiền".toUpperCase(),
                                        style: TextStyle(fontSize: 16.0, color: Colors.white),
                                      )),
                                ),
                                Divider(
                                  thickness: 0,
                                  height: 20.0,
                                  color: Colors.transparent,
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text(
                                    "Lịch sử rút tiền gần đây".toUpperCase(),
                                    style: TextStyle(fontWeight: FontWeight.w500, color: Colors.grey),
                                  ),
                                ),
                                new WithdrawList(list: config.lastTransactions),
                              ],
                            )),
                      );
              },
            ),
          ),
        ),
      ),
    );
  }
}


import 'package:anylearn/dto/ask_thread_dto.dart';
import 'package:anylearn/dto/user_dto.dart';
import 'package:http/http.dart' as http;

import '../app_config.dart';
import '../dto/ask_paging_dto.dart';
import 'base_service.dart';

class AskService extends BaseService {
  final http.Client httpClient;
  final AppConfig config;

  AskService({this.httpClient, this.config});

  Future<AskPagingDTO> getList() async {
    final url = buildUrl(appConfig: config, endPoint: "/ask/list");
    final json = await get(httpClient, url);
    return AskPagingDTO.fromJson(json);
  }

  Future<AskThreadDTO> getThread(int askId, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/ask/" + askId.toString(), token: token);
    print(url);
    final json = await get(httpClient, url);
    return AskThreadDTO.fromJson(json);
  }

  Future<bool> create(int askId, String title, String content, UserDTO userDTO, String type) async {
    final url = buildUrl(appConfig: config, endPoint: "/ask/create/$type", token: userDTO.token);
    final json = await post(httpClient, url, {
      "ask_id": askId.toString(),
      "title": title,
      "content": content,
    });
    return json['result'];
  }

  Future<bool> selectAnswer(int askId, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/ask/$askId/select", token: token);
    print(url);
    final json = await get(httpClient, url);
    return json['result'];
  }

  Future<bool> vote(int askId, String type, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/ask/$askId/vote/$type", token: token);
    print(url);
    final json = await get(httpClient, url);
    return json['result'];
  }
}


import 'dart:convert';
import 'dart:io';

import '../app_config.dart';
import 'package:http/http.dart' as http;

import '../customs/rest_exception.dart';

class BaseService {
  String buildUrl({AppConfig appConfig, String endPoint, String token: "", String query: ""}) {
    return appConfig.apiUrl +
        endPoint +
        (token.isNotEmpty ? "?${appConfig.tokenParam}=$token" : "") +
        (query.isNotEmpty ? ((token.isNotEmpty ? "&" : "?") + query) : "");
  }

  String buildQuery(Map<String, dynamic> params) {
    String rs = "";
    params.forEach((key, value) {
      rs += "$key=${value.toString()}&";
    });
    return rs;
  }

  Future<dynamic> get(http.Client httpClient, String url) async {
    var responseJson;
    try {
      print(url);
      final response = await httpClient.get(Uri.parse(url));
      responseJson = returnResponse(response);
    } on SocketException {
      throw FetchDataException('No Internet connection');
    }
    return responseJson;
  }

  Future<dynamic> post(http.Client httpClient, String url, Map<String, dynamic> body) async {
    var responseJson;
    print(url);
    print(body);
    try {
      final response = await httpClient.post(Uri.parse(url), body: body);
      responseJson = returnResponse(response);
    } on SocketException {
      throw FetchDataException('No Internet connection');
    }
    return responseJson;
  }

  Future<String> postImage(String url, File file) async {
    try {
      final request = http.MultipartRequest('POST', Uri.parse(url));
      request.files.add(await http.MultipartFile.fromPath('image', file.path));
      return returnResponseStream(await request.send());
    } on SocketException {
      throw FetchDataException('No Internet connection');
    }
  }

  Future<dynamic> postImageHasContent(String url, File file, Map<String, String> body) async {
    try {
      final request = http.MultipartRequest('POST', Uri.parse(url));
      request.fields.addAll(body);
      request.files.add(await http.MultipartFile.fromPath('image', file.path));

      final str = await returnResponseStream(await request.send());
      return json.decode(str);
    } on SocketException {
      throw FetchDataException('No Internet connection');
    }
  }

  dynamic returnResponse(http.Response response) {
    switch (response.statusCode) {
      case 200:
        return json.decode(response.body.toString());
      case 400:
        throw BadRequestException(response.body.toString());
      case 401:
      case 403:
        throw UnauthorizedException(response.body.toString());
      case 500:
      case 502:
      default:
        throw FetchDataException('Server Error : ${response.statusCode}');
    }
  }

  dynamic returnResponseStream(http.StreamedResponse response) {
    switch (response.statusCode) {
      case 200:
        return response.stream.bytesToString();
      case 400:
        throw BadRequestException(response.stream.bytesToString());
      case 401:
      case 403:
        throw UnauthorizedException(response.stream.bytesToString());
      case 500:
      case 502:
      default:
        throw FetchDataException('Server Error 5xx : ${response.stream.bytesToString()}');
    }
  }
}


import 'dart:io';

import 'package:anylearn/dto/article_dto.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';

import '../app_config.dart';
import '../dto/doc_dto.dart';
import '../dto/event_dto.dart';
import '../dto/home_dto.dart';
import '../dto/item_dto.dart';
import '../dto/transaction_config_dto.dart';
import '../dto/user_dto.dart';
import 'base_service.dart';

class ConfigServices extends BaseService {
  final http.Client httpClient;
  final AppConfig config;
  final DateFormat _month = DateFormat("yyyy-MM");

  ConfigServices({this.config, this.httpClient});

  Future<HomeDTO> homeLayout(String role) async {
    final url = buildUrl(appConfig: config, endPoint: "/config/homev2/$role");
    final json = await get(httpClient, url);
    return HomeDTO.fromJson(json);
  }

  Future<List<CategoryPagingDTO>> category(int catId, page, pageSize) async {
    final url = buildUrl(appConfig: config, endPoint: "/config/category/$catId");
    final json = await get(httpClient, url);
    return List<CategoryPagingDTO>.from(json?.map((e) => CategoryPagingDTO.fromJson(e))).toList();
  }

  Future<TransactionConfigDTO> transactionConfigs(String type, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/config/transaction/$type", token: token);
    print(url);
    final json = await get(httpClient, url);
    return TransactionConfigDTO.fromJson(json);
  }

  Future<DocDTO> doc(String type) async {
    final url = buildUrl(appConfig: config, endPoint: "/doc/$type");
    final json = await get(httpClient, url);
    return DocDTO.fromJson(json);
  }

  Future<Map<DateTime, List<EventDTO>>> monthEvent(DateTime month) async {
    final url = buildUrl(appConfig: config, endPoint: "/event/${_month.format(month)}");
    final json = await get(httpClient, url);
    return json == null || json.length == 0
        ? null
        : Map<DateTime, List<EventDTO>>.from(
            json?.map(
              (k, v) => new MapEntry(
                DateTime.parse(k),
                v == null
                    ? null
                    : (v as List)
                        ?.map(
                          (e) => e == null ? null : EventDTO.fromJson(e),
                        )
                        ?.toList(),
              ),
            ),
          );
  }

  Future<bool> saveFeedback(String token, String content, File file) async {
    final url = buildUrl(
      appConfig: config,
      endPoint: "/config/feedback",
      token: token,
    );
    final json = await postImageHasContent(url, file, {
      "content": content ?? "",
    });

    return json == null ? false : json['result'];
  }

  Future<List<UserDTO>> searchUser(String screen, String query) async {
    final url = buildUrl(appConfig: config, endPoint: "/search", query: "t=user&s=${screen ?? ""}&q=$query");
    print(url);
    final json = await get(httpClient, url);
    return json == null || json.length == 0
        ? null
        : List<UserDTO>.from(json?.map((e) => e == null ? null : UserDTO.fromJson(e))).toList();
  }

  Future<List<ItemDTO>> searchItem(String screen, String query) async {
    final url = buildUrl(appConfig: config, endPoint: "/search", query: "t=item&s=${screen ?? ""}&q=$query");
    print(url);
    final json = await get(httpClient, url);
    return json == null || json.length == 0
        ? null
        : List<ItemDTO>.from(json?.map((e) => e == null ? null : ItemDTO.fromJson(e))).toList();
  }

  Future<ArticleHomeDTO> articleIndexPage() async {
    final url = buildUrl(appConfig: config, endPoint: "/article");
    final json = await get(httpClient, url);
    return ArticleHomeDTO.fromJson(json);
  }

  Future<ArticlePagingDTO> articleTypePage(String type, int page) async {
    final url = buildUrl(appConfig: config, endPoint: "/article/cat/$type", query: "page=$page");
    final json = await get(httpClient, url);
    return ArticlePagingDTO.fromJson(json);
  }

  Future<ArticleDTO> article(int id) async {
    final url = buildUrl(appConfig: config, endPoint: "/article/$id");
    final json = await get(httpClient, url);
    return ArticleDTO.fromJson(json);
  }

  Future<List<String>> searchTags() async {
    final url = buildUrl(appConfig: config, endPoint: "/search-tags");
    final json = await get(httpClient, url);
    return json == null ? [] : List<String>.from(json);
  }
}


import 'dart:io';

import 'package:http/http.dart' as http;

import '../app_config.dart';
import '../customs/rest_exception.dart';
import '../dto/item_dto.dart';
import '../dto/item_user_action.dart';
import '../dto/items_dto.dart';
import '../dto/pdp_dto.dart';
import '../dto/user_courses_dto.dart';
import 'base_service.dart';

class ItemService extends BaseService {
  final http.Client httpClient;
  final AppConfig config;

  ItemService({this.config, this.httpClient});

  Future<bool> saveItem(ItemDTO item, String token) async {
    if (item == null) {
      throw BadRequestException("Vui lòng nhập liệu");
    }
    final url = buildUrl(
      appConfig: config,
      endPoint: item.id == null ? "/item/create" : "/item/${item.id}/edit",
      token: token,
    );
    final json = await post(httpClient, url, {
      "id": item.id != null ? item.id.toString() : "",
      "type": item.type ?? "",
      "title": item.title ?? "",
      "price": item.price != null ? item.price.toString() : "",
      "org_price": item.priceOrg != null ? item.priceOrg.toString() : "",
      "date_start": item.dateStart,
      "date_end": item.dateEnd ?? "",
      "time_start": item.timeStart,
      "time_end": item.timeEnd ?? "",
      "location": item.location ?? "",
      "short_content": item.shortContent ?? "",
      "content": item.content ?? "",
    });
    return json['result'];
  }

  Future<UserCoursesDTO> coursesOfUser(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/list", token: token);
    final json = await get(httpClient, url);
    return UserCoursesDTO.fromJson(json);
  }

  Future<ItemDTO> loadItemEdit(int itemId, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$itemId/edit", token: token);
    final json = await get(httpClient, url);
    return ItemDTO.fromJson(json);
  }

  Future<ItemsDTO> itemsListOfUser(int userId, int page, int pageSize) async {
    final url = buildUrl(
        appConfig: config,
        endPoint: "/user/$userId/items",
        query: buildQuery({
          'pageSize': pageSize,
          'page': page,
        }));
    final json = await get(httpClient, url);
    return ItemsDTO.fromJson(json);
  }

  Future<PdpDTO> getPDPData(int itemId, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/pdp/$itemId", token: token);
    print(url);
    final json = await get(httpClient, url);
    return PdpDTO.fromJson(json);
  }

  Future<String> uploadImage(String token, File file, int itemId) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$itemId/upload-image", token: token);
    final rs = await postImage(url, file);
    return rs;
  }

  Future<bool> changeUserStatus(int itemId, int newStatus, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$itemId/user-status/$newStatus", token: token);
    final rs = await get(httpClient, url);
    return rs['result'];
  }

  Future<bool> touchFav(int itemId, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$itemId/touch-fav", token: token);
    final json = await get(httpClient, url);
    return json['is_fav'];
  }

  Future<bool> saveRating(int itemId, int rating, String comment, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$itemId/save-rating", token: token);
    final json = await post(httpClient, url, {
      'rating': rating.toString(),
      'comment': comment,
    });
    return json['result'];
  }

  Future<List<ItemUserAction>> loadItemReviews(int itemId) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$itemId/reviews");
    final json = await get(httpClient, url);
    return json == null
        ? null
        : List<ItemUserAction>.from(json?.map((e) => e == null ? null : ItemUserAction.fromJson(e))).toList();
  }
}


import 'package:http/http.dart' as http;

import '../dto/quote_dto.dart';
import 'base_service.dart';

class QuoteService extends BaseService {
  final http.Client httpClient;

  QuoteService({this.httpClient});

  Future<QuoteDTO> getQuote(String url) async {
    final _url = url ?? 'https://quote-garden.herokuapp.com/quotes/random';
    final json = await get(httpClient, _url);
    return QuoteDTO.fromJson(json);
  }
}


import 'dart:convert';

import 'package:http/http.dart' as http;

import '../app_config.dart';
import '../dto/bank_dto.dart';
import '../dto/const.dart';
import '../dto/foundation_dto.dart';
import '../dto/transaction_dto.dart';
import 'base_service.dart';

class TransactionService extends BaseService {
  final http.Client httpClient;
  final AppConfig config;

  TransactionService({this.config, this.httpClient});

  Future<bool> submitDeposit(String amount, String token, String payMethod) async {
    final url = buildUrl(appConfig: config, endPoint: "/transaction/deposit", token: token);
    print(url);
    final json = await post(httpClient, url, {
      'amount': amount,
      'pay_method': payMethod,
    });
    return json['result'];
  }

  Future<bool> submitWithdraw(String amount, String token, BankDTO payInfo) async {
    final url = buildUrl(appConfig: config, endPoint: "/transaction/withdraw", token: token);
    print(url);
    final json = await post(httpClient, url, {
      'amount': amount,
      'pay_info': jsonEncode(payInfo).toString(),
    });
    return json['result'];
  }

  Future<bool> submitExchange(int amount, String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/transaction/exchange", token: token);
    print(url);
    final json = await post(httpClient, url, {
      'amount': amount.toString(),
    });
    return json['result'];
  }

  Future<Map<String, List<TransactionDTO>>> history(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/transaction/history", token: token);
    print(url);
    final json = await get(httpClient, url);
    // print(json);
    return {
      MyConst.WALLET_M:
          List<TransactionDTO>.from(json[MyConst.WALLET_M]?.map((e) => e == null ? null : TransactionDTO.fromJson(e))),
      MyConst.WALLET_C:
          List<TransactionDTO>.from(json[MyConst.WALLET_C]?.map((e) => e == null ? null : TransactionDTO.fromJson(e))),
    };
  }

  Future<bool> register(String token, int itemId, String voucher, int childUser) async {
    final url = buildUrl(
        appConfig: config,
        endPoint: "/transaction/register/$itemId",
        token: token,
        query: "voucher=$voucher&child=$childUser");
    print(url);
    final json = await get(httpClient, url);
    return json['result'];
  }

  Future<FoundationDTO> foundation() async {
    final url = buildUrl(appConfig: config, endPoint: "/foundation");
    print(url);
    final json = await get(httpClient, url);
    return FoundationDTO.fromJson(json);
  }
}


import 'dart:convert';
import 'dart:io';

import 'package:http/http.dart' as http;

import '../app_config.dart';
import '../dto/account_calendar_dto.dart';
import '../dto/class_registered_user.dart';
import '../dto/contract.dart';
import '../dto/friends_dto.dart';
import '../dto/notification_dto.dart';
import '../dto/user_doc_dto.dart';
import '../dto/user_dto.dart';
import '../dto/users_dto.dart';
import '../main.dart';
import 'base_service.dart';

class UserService extends BaseService {
  final http.Client httpClient;
  final AppConfig config;

  UserService({this.config, this.httpClient});

  Future<UserDTO> login(String phone, String password) async {
    final url = buildUrl(
        appConfig: config,
        endPoint: "/login",
        query: buildQuery(
          {'phone': phone, 'password': password, 'notif_token': notifToken},
        ));
    final json = await get(httpClient, url);
    return UserDTO.fromJson(json);
  }

  Future<UserDTO> loginFacebook(Map<String, dynamic> data) async {
    final url = buildUrl(appConfig: config, endPoint: "/login/facebook");
    data['notify_token'] = notifToken;
    final json = await post(httpClient, url, data);
    return UserDTO.fromJson(json);
  }

  Future<UserDTO> loginApple(Map<String, dynamic> data) async {
    final url = buildUrl(appConfig: config, endPoint: "/login/apple");
    data['notify_token'] = notifToken;
    final json = await post(httpClient, url, data);
    return UserDTO.fromJson(json);
  }

  Future<void> logout(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/logout", token: token);
    print(url);
    await get(httpClient, url);
    return;
  }

  Future<UserDTO> getInfo(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user", token: token);
    final json = await get(httpClient, url);
    return UserDTO.fromJson(json);
  }

  Future<UserDTO> getInfoLess(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user-less", token: token);
    print(url);
    final json = await get(httpClient, url);
    return UserDTO.fromJson(json);
  }

  Future<UsersDTO> getList(String role, int page, int pageSize) async {
    final url =
        buildUrl(appConfig: config, endPoint: "/users/$role", query: buildQuery({"page": page, "pageSize": pageSize}));
    final json = await get(httpClient, url);
    return UsersDTO.fromJson(json);
  }

  Future<bool> updateInfo(UserDTO user) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/edit", token: user.token);
    final json = await post(httpClient, url, {
      "name": user.name,
      "refcode": user.refcode,
      "title": user.title,
      "introduce": user.introduce,
      "phone": user.phone,
      "email": user.email,
      "address": user.address,
      "country": user.country,
      "full_content": user.fullContent ?? "",
    });
    return json["result"];
  }

  Future<bool> changePass(String token, String newPassword, String oldPassword) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/changepass", token: token);
    final json = await post(httpClient, url, {
      "newpass": newPassword,
      "oldpass": oldPassword,
    });
    return json["result"];
  }

  Future<UserDTO> register(String phone, String name, String password, String refcode, String role) async {
    final url = buildUrl(appConfig: config, endPoint: "/register");
    final json = await post(httpClient, url, {
      "phone": phone,
      "name": name,
      "password": password,
      "ref": refcode,
      "role": role,
    });
    return UserDTO.fromJson(json);
  }

  Future<String> uploadUserImage(String type, String token, File file) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/upload-image/$type", token: token);
    final rs = await postImage(url, file);
    return rs;
  }

  Future<FriendsDTO> friends(String token, int userId) async {
    final url = buildUrl(appConfig: config, endPoint: "/friends/$userId", token: token);
    final json = await get(httpClient, url);
    return FriendsDTO.fromJson(json);
  }

  Future<AccountCalendarDTO> myCalendar(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/mycalendar", token: token);
    print(url);
    final json = await get(httpClient, url);
    return AccountCalendarDTO.fromJson(json);
  }

  Future<int> joinCourse(String token, int itemId, int childId) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/join/$itemId", token: token, query: "child=$childId");
    final json = await get(httpClient, url);
    return json['result'];
  }

  Future<List<ClassRegisteredUserDTO>> registeredUsers(String token, int itemId) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/course-registered-users/$itemId", token: token);
    print(url);
    final json = await get(httpClient, url);
    return List<ClassRegisteredUserDTO>.from(json?.map((e) => e == null ? null : ClassRegisteredUserDTO.fromJson(e)))
        .toList();
  }

  Future<UserDTO> getProfile(int userId) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/profile/$userId");
    final json = await get(httpClient, url);
    return UserDTO.fromJson(json);
  }

  Future<List<UserDocDTO>> getDocs(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/get-docs", token: token);
    final json = await get(httpClient, url);
    return json == null
        ? null
        : List<UserDocDTO>.from(json?.map((e) => e == null ? null : UserDocDTO.fromJson(e))).toList();
  }

  Future<List<UserDocDTO>> addDoc(String token, File file) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/add-doc", token: token);
    final jsonStr = await postImage(url, file);
    final rs = json.decode(jsonStr);
    return rs == null
        ? null
        : List<UserDocDTO>.from(rs?.map((e) => e == null ? null : UserDocDTO.fromJson(e))).toList();
  }

  Future<List<UserDocDTO>> removeDoc(String token, int fileId) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/remove-doc/$fileId", token: token);
    final json = await get(httpClient, url);
    return json == null
        ? null
        : List<UserDocDTO>.from(json?.map((e) => e == null ? null : UserDocDTO.fromJson(e))).toList();
  }

  Future<NotificationPagingDTO> notification(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/notification", token: token);
    final json = await get(httpClient, url);
    return json == null ? null : NotificationPagingDTO.fromJson(json);
  }

  Future<void> notifRead(String token, int id) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/notification/" + id.toString(), token: token);
    // print(url);
    await get(httpClient, url);
    return;
  }

  Future<List<UserDTO>> allFriends(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/all-friends", token: token);
    final json = await get(httpClient, url);
    return List<UserDTO>.from(json?.map((e) => e == null ? null : UserDTO.fromJson(e))).toList();
  }

  Future<bool> shareFriends(String token, int id, List<int> friends, bool isALL) async {
    final url = buildUrl(appConfig: config, endPoint: "/item/$id/share", token: token);
    final json = await post(httpClient, url, {
      "friends": isALL ? "ALL" : jsonEncode(friends),
    });
    return json['result'];
  }

  Future<bool> saveContract(String token, ContractDTO contract) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/contract", token: token);
    final json = await post(httpClient, url, {
      "contract": jsonEncode(contract),
    });
    return json['result'];
  }

  Future<ContractDTO> loadContract(String token, int contractId) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/contract/$contractId", token: token);
    final json = await get(httpClient, url);
    return json == null ? null : ContractDTO.fromJson(json);
  }

  Future<bool> signContract(String token, int contractId) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/contract/sign/$contractId", token: token);
    final json = await get(httpClient, url);
    return json['result'];
  }

  Future<bool> saveChildren(String token, int id, String name) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/children", token: token);
    final json = await post(httpClient, url, {
      "id": id.toString(),
      "name": name,
    });
    return json['result'];
  }

  Future<List<UserDTO>> getChildren(String token) async {
    final url = buildUrl(appConfig: config, endPoint: "/user/children", token: token);
    final json = await get(httpClient, url);
    return List<UserDTO>.from(json?.map((e) => e == null ? null : UserDTO.fromJson(e))).toList();
  }
}


import 'package:flutter/material.dart';

ThemeData appTheme() {
  return ThemeData(
    primaryColor: Colors.green[600],
    // accentColor: Colors.orange,
    // hintColor: Colors.white,
    // dividerColor: Colors.white,
    // buttonColor: Colors.white,
    primarySwatch: Colors.blue,
    scaffoldBackgroundColor: Colors.grey[150]
  );
}


import 'package:flutter/material.dart';

Color roleColor(String role) {
  switch (role) {
    case "teacher":
      return Colors.orange;
    case "school":
      return Colors.blue;
    default:
      return Colors.green;
  }
}


import 'package:flutter/material.dart';

import '../dto/user_dto.dart';

class AccountIcon extends StatefulWidget {
  final UserDTO user;
  const AccountIcon({Key key, this.user}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _AccountIcon();
}

class _AccountIcon extends State<AccountIcon> {
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.only(right: 10.0),
      child: IconButton(
         color: Colors.grey[500],
          icon: Icon(Icons.menu),
          onPressed: () {
            Navigator.of(context).pushNamed("/account");
            // if (widget.user != null) {
            //   Navigator.of(context).pushNamed("/profile", arguments: widget.user.id);
            // } else {
            //   Navigator.of(context).pushNamed("/login", arguments: LoginCallback(routeName: "/profile"));
            // }
          }),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

import '../dto/const.dart';
import '../dto/user_dto.dart';

class AddCourseIcon extends StatelessWidget {
  final UserDTO user;

  const AddCourseIcon({Key key, this.user}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      child: user != null && user.role != MyConst.ROLE_MEMBER
          ? IconButton(
              icon: Icon(
                MdiIcons.newspaperPlus,
                size: 24.0,
              ),
              onPressed: () {},
            )
          : null,
    );
  }
}


import 'package:anylearn/main.dart';
import 'package:anylearn/screens/webview.dart';

import '../dto/user_dto.dart';
import '../widgets/account_icon.dart';
import '../widgets/notification_icon.dart';
import '../widgets/search_icon.dart';
import 'package:flutter/material.dart';

class BaseAppBar extends StatelessWidget implements PreferredSizeWidget {
  final String title;
  final String screen;
  final bool hasBack;
  final UserDTO user;

  const BaseAppBar({this.title, this.screen, this.hasBack, this.user});

  @override
  Widget build(BuildContext context) {
    return AppBar(
      backgroundColor: Colors.white,
      automaticallyImplyLeading: hasBack ?? true,
      titleSpacing: 10.0,
      foregroundColor: Colors.grey,
      actions: <Widget>[
        user == null || !user.enableIosTrans
            ? Text("")
            : IconButton(
                color: Colors.grey[500],
                icon: Icon(Icons.shopping_cart),
                onPressed: () {
                  Navigator.of(context).push(MaterialPageRoute(
                      builder: (context) => WebviewScreen(
                            url: config.webUrl + "cart",
                            token: user.token,
                          )));
                }),
        (screen != "notification" && screen != "home")
            ? SearchIcon(
                screen: screen,
              )
            : Text(""),
        NotificationIcon(user: user,),
        screen != "account" && screen != "notification"
            ? new AccountIcon(
                user: user ?? null,
              )
            : Text(""),
      ],
      centerTitle: false,
      title: title != ""
          ? Text(
              title,
              style: TextStyle(fontSize: 14.0),
            )
          : Image.asset(
              "assets/images/logo-full.png",
              fit: BoxFit.cover,
              height: 32.0,
            ),
    );
  }

  @override
  Size get preferredSize => new Size.fromHeight(56.0);
}


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

import '../customs/custom_carousel.dart';
import '../dto/article_dto.dart';
import '../dto/const.dart';
import 'youtube_image.dart';

class HomeArticleEvent extends StatelessWidget {
  final List<ArticleDTO> hotItems;
  final String title;

  HomeArticleEvent({Key key, this.hotItems, this.title}) : super(key: key);
  double width;

  @override
  Widget build(BuildContext context) {
    width = MediaQuery.of(context).size.width;
    width = this.hotItems.length == 1 ? (width - 30) : (width * 2 / 3 - 10);
    return SliverToBoxAdapter(
      child: hotItems == null || hotItems.length == 0
          ? Container()
          : Container(
              margin: EdgeInsets.only(bottom: 20, top: 15),
              child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                Container(
                  padding: EdgeInsets.only(left: 15, bottom: 15),
                  child: Text(
                    this.title,
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
                CustomCarousel(
                  items: hotItems,
                  builderFunction: _itemSlider,
                  height: width * 3 / 4,
                  width: width,
                ),
              ])),
    );
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    // double width = MediaQuery.of(context).size.width;
    // width = width * 2 / 3 - 10;
    return InkWell(
      onTap: () {
        Navigator.of(context).pushNamed("/article", arguments: item.id);
      },
      child: Container(
        alignment: Alignment.topLeft,
        width: width,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.end,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Expanded(
              child: Container(
                width: double.infinity,
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: _articleImg(item),
                ),
              ),
            ),
            Container(
                padding: EdgeInsets.only(top: 10.0),
                child: Text(
                  item.title,
                  style: TextStyle(fontWeight: FontWeight.bold),
                ))
          ],
        ),
      ),
    );
  }

  Widget _articleImg(ArticleDTO articleDTO) {
    if (articleDTO.type == MyConst.ASK_TYPE_VIDEO) {
      return YoutubeImage(
        link: articleDTO.video,
        fit: BoxFit.cover,
      );
    }
    return articleDTO.image == null
        ? Image.asset(
            "assets/images/logo_app.jpg",
            fit: BoxFit.contain,
          )
        : CachedNetworkImage(
            imageUrl: articleDTO.image,
            fit: BoxFit.cover,
          );
  }
}


import 'package:anylearn/dto/bank_dto.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class BankInfo extends StatelessWidget {
  final BankDTO bankDTO;
  final String phone;

  const BankInfo({Key key, this.bankDTO, this.phone}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return SimpleDialog(
      title: Text("Vui lòng chuyển khoản theo thông tin sau:", style: TextStyle(fontSize: 12.0)),
      children: [
        ListTile(
          title: Text("Ngân hàng"),
          subtitle: Text(bankDTO.bankName),
        ),
        ListTile(
          title: Text("Chi nhánh"),
          subtitle: Text(bankDTO.bankBranch),
        ),
        ListTile(
          title: Text("Số tài khoản"),
          subtitle: Text(bankDTO.bankNo),
          trailing: Icon(Icons.content_copy),
          onTap: () {
            Clipboard.setData(new ClipboardData(text: bankDTO.bankNo));
          },
        ),
        ListTile(
          title: Text("Người  thụ hưởng"),
          subtitle: Text(bankDTO.accountName),
        ),
        ListTile(
          title: Text("Nội dung chuyển khoản"),
          subtitle: Text(bankDTO.content + (phone != null ? " - $phone" : "")),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: RaisedButton(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10.0),
            ),
            onPressed: () {
              Navigator.of(context).pop();
            },
            color: Colors.blue,
            child: Text(
              "OK",
              style: TextStyle(color: Colors.white),
            ),
          ),
        ),
      ],
    );
  }
}


import 'package:anylearn/dto/login_callback.dart';
import 'package:flutter/material.dart';

import '../dto/user_dto.dart';

class BottomNav extends StatelessWidget {
  static const HOME_INDEX = "/";
  static const SCHOOL_INDEX = "/school";
  static const TEACHER_INDEX = "/teacher";
  static const PROFILE_INDEX = "/profile";
  static const ASK_INDEX = "/ask";

  final String route;

  final UserDTO user;

  BottomNav({this.route, this.user});

  @override
  Widget build(BuildContext context) {
    return BottomAppBar(
      shape: CircularNotchedRectangle(),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Container(
            width: 60.0,
            child: Text(""),
          ),
          IconButton(
              onPressed: () {
                _navigate(context, SCHOOL_INDEX);
              },
              icon: Icon(Icons.school, color: route == SCHOOL_INDEX ? Colors.green[600] : Colors.grey[500],)),
          IconButton(
              onPressed: () {
                _navigate(context, TEACHER_INDEX);
              },
              icon: Icon(Icons.supervised_user_circle, color: route == TEACHER_INDEX ? Colors.green[600] : Colors.grey[500],)),
          IconButton(
              onPressed: () {
                if (user != null) {
                  Navigator.of(context).canPop()
                      ? Navigator.of(context).popAndPushNamed("/profile", arguments: user.id)
                      : Navigator.of(context).pushNamed("/profile", arguments: user.id);
                } else {
                  Navigator.of(context).pushNamed("/login", arguments: LoginCallback(routeName: "/profile"));
                }
              },
              icon: Icon(Icons.account_circle, color: route == PROFILE_INDEX ? Colors.green[600] : Colors.grey[500],)),
          IconButton(
              onPressed: () {
                _navigate(context, ASK_INDEX);
              },
              icon: Icon(Icons.question_answer, color: route == ASK_INDEX ? Colors.green[600] : Colors.grey[500],)),
        ],
      ),
    );
    // BottomNavigationBar(
    //     type: BottomNavigationBarType.shifting,
    //     selectedItemColor: Colors.green[800],
    //     unselectedItemColor: Colors.black87,
    //     iconSize: 18.0,
    //     selectedFontSize: 10.0,
    //     unselectedFontSize: 10.0,
    //     currentIndex: this.index,
    //     onTap: (i) => _navigate(context, i),
    //     items: <BottomNavigationBarItem>[
    //       const BottomNavigationBarItem(
    //         icon: Icon(Icons.school),
    //         label: "Trường học",
    //       ),
    //       const BottomNavigationBarItem(
    //         icon: Icon(Icons.supervised_user_circle),
    //         label: "Chuyên gia",
    //       ),
    //       BottomNavigationBarItem(
    //         icon: Image.asset(
    //           "assets/icons/home.png",
    //           fit: BoxFit.cover,
    //           width: 20.0,
    //           height: 20.0,
    //         ),
    //         label: "Trang chủ",
    //       ),
    //       const BottomNavigationBarItem(
    //         icon: Icon(Icons.question_answer),
    //         label: "Học & Hỏi",
    //       ),
    //       BottomNavigationBarItem(
    //         icon: user == null || user.image == null
    //             ? Icon(
    //                 Icons.account_circle,
    //               )
    //             : CircleAvatar(
    //                 radius: 14,
    //                 backgroundColor: Colors.white,
    //                 child: CircleAvatar(
    //                   radius: 12,
    //                   backgroundImage: CachedNetworkImageProvider(user.image),
    //                 ),
    //               ),
    //         label: "Tôi",
    //       ),
    //     ]);
  }

  void _navigate(BuildContext context, String route) {
    Navigator.of(context).canPop()
        ? Navigator.of(context).popAndPushNamed(route)
        : Navigator.of(context).pushNamed(route);
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:flutter/material.dart';

class CalendarBox extends StatelessWidget {
  final String text;
  final double fontSize;
  final String image;

  const CalendarBox({Key key, this.text, this.fontSize: 20.0, this.image}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.center,
      width: 55.0,
      child: image == null
          ? Stack(
              children: <Widget>[
                Image.asset(
                  "assets/images/date_bg.png",
                  fit: BoxFit.fitHeight,
                ),
                Container(
                  alignment: Alignment.center,
                  padding: EdgeInsets.only(top: 15.0),
                  child: Text(
                    text,
                    maxLines: 1,
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: fontSize,
                    ),
                  ),
                )
              ],
            )
          : CustomCachedImage(url: image),
    );
  }
}


import 'package:flutter/material.dart';

import '../dto/category_dto.dart';

class CategoriesBox extends StatelessWidget {
  final List<CategoryDTO> categories;

  const CategoriesBox({Key key, this.categories}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.centerLeft,
      child: Wrap(
        children: categories.length == 0
            ? []
            : List<Widget>.from(categories?.map((e) => Container(
                  margin: EdgeInsets.only(right: 5, bottom: 5),
                  padding: EdgeInsets.all(5),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(5),
                    border: Border.all(color: Colors.green[600])),
                  child: Text(e.title, style: TextStyle(color: Colors.green[600]),),
                ))).toList(),
      ),
    );
  }
}


import 'package:flutter/material.dart';

class FloatingActionButtonHome extends StatelessWidget {
  final isHome;

  const FloatingActionButtonHome({Key key, this.isHome}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 60.0,
      width: 60.0,
      child: FittedBox(
        child: FloatingActionButton(
          heroTag: "homeBtn",
          backgroundColor: isHome != null && isHome ? Colors.green[600] : Colors.grey[500],
          onPressed: () {
            return Navigator.of(context).popUntil(ModalRoute.withName("/"));
          },
          child: Icon(
            Icons.home,
            color: Colors.white,
          ),
          // elevation: 5.0,
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

class FoundationIcon extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.only(right: 0.0),
      child: IconButton(
        icon: Icon(
          MdiIcons.piggyBank,
          size: 24.0,
        ),
        onPressed: () {
          Navigator.of(context).pushNamed('/foundation');
        },
      ),
    );
  }
}


import 'package:flutter/material.dart';

class GotoProfileBar extends StatelessWidget {
  final int userId;

  const GotoProfileBar({Key key, this.userId}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SliverToBoxAdapter(
      child: Container(
          decoration: BoxDecoration(
            border: Border(bottom: BorderSide(color: Colors.grey[200]))
          ),
          child: ListTile(
            title: Text("Thông tin giới thiệu", style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.bold,
              color: Colors.blue
            ),),
            trailing: Icon(Icons.chevron_right),
            onTap: () {
              Navigator.of(context).pushNamed("/profile", arguments: userId);
            },
          ),
        
          ),
    );
  }
}


import 'package:flutter/material.dart';

class GradientButton extends StatelessWidget {
  final function;
  final String title;
  final double height;
  final Color color;
  final Color colorSub;

  GradientButton({Key key, this.function, this.title, this.height: 40.0, this.color, this.colorSub}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        gradient:
            LinearGradient(colors: [color ?? Colors.blue, colorSub ?? Colors.lightBlueAccent, color ?? Colors.blue]),
        borderRadius: BorderRadius.circular(10.0),
      ),
      height: height,
      child: FlatButton(
          onPressed: () {
            function();
          },
          child: Text(
            title,
            style: TextStyle(fontSize: 16.0, color: Colors.white),
          )),
    );
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:flutter/material.dart';

import '../customs/custom_carousel.dart';
import '../dto/hot_items_dto.dart';

class HotItems extends StatelessWidget {
  final List<HotItemsDTO> hotItems;

  const HotItems({Key key, this.hotItems}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(child: Column(children: _buildList(context)));
  }

  List<Widget> _buildList(BuildContext context) {
    return hotItems
        .map(
          (hotList) => Container(
            padding: EdgeInsets.only(bottom: 20.0),
            decoration: BoxDecoration(
              border: Border(
                top: BorderSide(
                  width: 15.0,
                  color: Colors.grey[100],
                ),
              ),
            ),
            child: Column(children: [
              Padding(
                padding: EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 10.0),
                child: Row(
                  children: <Widget>[
                    Expanded(
                      child: Text(
                        hotList.title,
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ),
                    hotList.route == null
                        ? SizedBox(
                            height: 0,
                          )
                        : Expanded(
                            child: Align(
                              alignment: Alignment.centerRight,
                              child: InkWell(
                                onTap: () {
                                  Navigator.of(context).pushNamed(hotList.route);
                                },
                                child: Text(
                                  "Tất cả",
                                  style: TextStyle(color: Colors.blue),
                                ),
                              ),
                            ),
                          )
                  ],
                ),
              ),
              CustomCarousel(items: hotList.list, builderFunction: _itemSlider, height: 170.0),
            ]),
          ),
        )
        .toList();
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    double width = MediaQuery.of(context).size.width;
    width = width - width / 3;
    return InkWell(
      onTap: () {
        Navigator.of(context).pushNamed("/pdp", arguments: item.id);
      },
      child: Card(
        child: Container(
          alignment: Alignment.topLeft,
          width: width,
          child: Column(
            children: [
              Container(
                height: cardHeight * 2 / 3,
                width: double.infinity,
                child: ClipRRect(
                  borderRadius: BorderRadius.only(topLeft: Radius.circular(7.0), topRight: Radius.circular(7.0)),
                  child: item.image != null && item.image.isNotEmpty
                      ? CustomCachedImage(url: item.image)
                      : Icon(Icons.broken_image),
                ),
              ),
              Container(
                alignment: Alignment.topLeft,
                padding: EdgeInsets.all(15.0),
                child: Text(
                  item.title ?? "",
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';

import '../customs/custom_cached_image.dart';
import '../customs/custom_carousel.dart';
import '../dto/hot_users_dto.dart';

class HotUsers extends StatelessWidget {
  final List<HotUsersDTO> hotItems;

  HotUsers({Key key, this.hotItems}) : super(key: key);
  double width;

  @override
  Widget build(BuildContext context) {
    width = MediaQuery.of(context).size.width;
    width = width * 2 / 3 - 10;
    return SliverToBoxAdapter(
      child: Container(child: Column(children: _buildList(context))),
    );
  }

  List<Widget> _buildList(BuildContext context) {
    return hotItems
        .map(
          (hotList) => Container(
            padding: EdgeInsets.only(bottom: 20.0),
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(
                  width: 15.0,
                  color: Colors.grey[100],
                ),
              ),
            ),
            child: Column(children: [
              Padding(
                padding: EdgeInsets.fromLTRB(20.0, 20.0, 20.0, 10.0),
                child: Row(
                  children: <Widget>[
                    Expanded(
                      child: Text(
                        hotList.title,
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ),
                    Expanded(
                      child: Align(
                        alignment: Alignment.centerRight,
                        child: InkWell(
                          onTap: () {
                            Navigator.of(context).pushNamed(hotList.route);
                          },
                          child: Text(
                            "TẤT CẢ",
                            style: TextStyle(
                              color: Colors.blue,
                              fontSize: 12,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                    )
                  ],
                ),
              ),
              CustomCarousel(
                items: hotList.list,
                builderFunction: _itemSlider,
                height: width * 3 / 4,
                width: width,
              ),
            ]),
          ),
        )
        .toList();
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    // double width = MediaQuery.of(context).size.width;
    // width = width * 2 / 3 - 10;
    return InkWell(
      onTap: () {
        Navigator.of(context).pushNamed("/items/" + item.role, arguments: item.id);
      },
      child: Card(
        elevation: 0,
        child: Container(
          alignment: Alignment.topLeft,
          width: width,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              Expanded(
                child: Container(
                  // height: cardHeight * 3 / 4,
                  width: double.infinity,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(5),
                    child: item.image != null && item.image.isNotEmpty
                        ? CustomCachedImage(
                            url: item.banner ?? item.image,
                            fit: item.banner != null ? BoxFit.cover : BoxFit.fitHeight,
                          )
                        : Icon(Icons.broken_image),
                  ),
                ),
              ),
              Container(
                height: 38,
                padding: EdgeInsets.all(8),
                child: Text(
                  item.name ?? "",
                  overflow: TextOverflow.ellipsis,
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:anylearn/screens/home/home_body.dart';
import 'package:flutter/material.dart';
import 'package:intro_slider/intro_slider.dart';
import 'package:intro_slider/slide_object.dart';

class IntroScreen extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => IntroScreenState();
}

class IntroScreenState extends State<IntroScreen> {
  List<Slide> slides = [];

  @override
  void initState() {
    super.initState();

    slides.add(
      new Slide(
        backgroundImage: "assets/images/intro1.jpg",
        backgroundOpacity: 0,
      ),
    );
    slides.add(
      new Slide(
        backgroundOpacity: 0,
        backgroundImage: "assets/images/intro2.jpg",
      ),
    );
    slides.add(
      new Slide(
        backgroundImage: "assets/images/intro3.jpg",
        backgroundOpacity: 0,
      ),
    );
  }

  void onDonePress() {
    setState(() {
      canShowPopup = true;
    });
    Navigator.of(context).pop();
  }

  @override
  Widget build(BuildContext context) {
    return new IntroSlider(
      slides: this.slides,
      onDonePress: this.onDonePress,
      onSkipPress: this.onDonePress,
      renderNextBtn: Text(
        "TIẾP",
        style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold),
      ),
      renderSkipBtn: Text(
        "BỎ QUA",
        style: TextStyle(color: Colors.black, fontWeight: FontWeight.bold),
      ),
      renderDoneBtn: Text(
        "BẮT ĐẦU",
        style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
      ),
    );
  }
}


import 'package:flutter/material.dart';

import '../customs/custom_cached_image.dart';
import '../dto/item_dto.dart';
import 'price_box.dart';
import 'rating.dart';

class ItemCard extends StatelessWidget {
  final ItemDTO item;
  final double width;

  const ItemCard({Key key, this.item, this.width}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            height: width,
            alignment: Alignment.center,
            child: item.image != null && item.image.isNotEmpty
                ? ClipRRect(
                    borderRadius: BorderRadius.only(
                      topLeft: Radius.circular(10),
                      topRight: Radius.circular(10),
                    ),
                    // borderRadius: BorderRadius.circular(8.0),
                    child: item.image != null ? CustomCachedImage(url: item.image) : Icon(Icons.broken_image),
                  )
                : SizedBox(
                    height: width,
                    child: Icon(
                      Icons.school,
                      size: width,
                      color: Colors.grey,
                    ),
                  ),
          ),
          Container(
            height: 50,
            padding: EdgeInsets.all(10),
            child: Text(
              item.title,
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 12),
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
            ),
          ),
          Container(
              padding: EdgeInsets.only(left: 10),
              height: 18,
              child: PriceBox(
                orgPrice: item.priceOrg,
                price: item.price,
                fontSize: 13,
              )),
          Container(
            padding: EdgeInsets.only(left: 10),
            child: RatingBox(
              score: 5,
              alignment: "left",
            ),
          ),
          Expanded(
            child: Align(
              alignment: Alignment.bottomCenter,
              child: Container(
                padding: EdgeInsets.fromLTRB(20, 5, 20, 5),
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).pushNamed("/pdp", arguments: item.id);
                  },
                  child: Text("CHI TIẾT"),
                  style: ButtonStyle(
                      backgroundColor: MaterialStateProperty.all<Color>(Colors.green[600]),
                      shape: MaterialStateProperty.all<RoundedRectangleBorder>(RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(18),
                      ))),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


import 'package:flutter/material.dart';

class ItemFavorStatusItem extends StatelessWidget {
  final String text;
  final Color color;
  final IconData icon;

  const ItemFavorStatusItem({Key key, this.text, this.color, this.icon}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Padding(
        padding: EdgeInsets.only(bottom: 5.0),
        child: Row(children: [
          Text(
            text + " ",
            style: TextStyle(color: Colors.black54),
          ),
          Icon(
            icon,
            color: color,
            size: 16.0,
          )
        ]));
  }
}


import 'package:flutter/material.dart';

class LoadingWidget extends StatelessWidget {
  final Color color;

  const LoadingWidget({Key key, this.color: Colors.blue}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.center,
      child: CircularProgressIndicator(
      ),
    );
  }
}


import 'package:anylearn/dto/user_dto.dart';
import 'package:anylearn/main.dart';
import 'package:badges/badges.dart';
import 'package:flutter/material.dart';
// import 'package:overlay_support/overlay_support.dart';

class NotificationIcon extends StatefulWidget {
  final UserDTO user;

  const NotificationIcon({Key key, this.user}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _NotificationIcon();
}

class _NotificationIcon extends State<NotificationIcon> {
  @override
  Widget build(BuildContext context) {
    return Container(
      child: widget.user != null
          ? Badge(
              position: BadgePosition.topEnd(top: 5, end: 5),
              badgeContent: Text("!"),
              showBadge: newNotification,
              child: IconButton(
                color: Colors.grey[500],
                padding: EdgeInsets.all(0.0),
                icon: Icon(
                  Icons.notifications,
                  size: 24.0,
                ),
                onPressed: () {
                  setState(() {
                    newNotification = false;
                  });
                  Navigator.of(context).pushNamed("/notification");
                },
              ),
            )
          : null,
    );
  }
}


import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class PriceBox extends StatelessWidget {
  final int orgPrice;
  final int price;
  final double fontSize;
  final bool showOrgPrice;

  const PriceBox({Key key, this.orgPrice = 0, this.price, this.fontSize = 16.0, this.showOrgPrice = false})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    var f = new NumberFormat("###,###,###", "vi_VN");
    var of = new NumberFormat("-##%");
    return Row(
      children: <Widget>[
        orgPrice != null && orgPrice > price
            ? Container(
                padding: EdgeInsets.all(3.0),
                margin: EdgeInsets.only(right: 3),
                decoration: BoxDecoration(color: Colors.green[600], borderRadius: BorderRadius.circular(5)),
                child: Text(
                  of.format((orgPrice - price) / orgPrice),
                  style: TextStyle(color: Colors.white, fontSize: fontSize - 3.0, fontWeight: FontWeight.bold),
                ),
              )
            : Text(""),
        (!showOrgPrice || orgPrice == null || orgPrice <= price)
            ? Container()
            : Container(
                margin: EdgeInsets.only(right: 3),
                child: Text(
                  f.format(orgPrice),
                  style: TextStyle(
                    color: Colors.grey[500],
                    decoration: TextDecoration.lineThrough
                  ),
                ),
              ),
        Container(
          alignment: Alignment.topLeft,
          child: Text(
            f.format(price),
            style: TextStyle(
              fontSize: fontSize,
              color: Colors.green[600],
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ],
    );
  }
}


import 'package:anylearn/dto/article_dto.dart';
import 'package:flutter/material.dart';

import '../customs/custom_cached_image.dart';
import '../customs/custom_carousel.dart';

class Promotions extends StatelessWidget {
  final List<ArticleDTO> hotItems;

  Promotions({Key key, this.hotItems}) : super(key: key);
  double width;

  @override
  Widget build(BuildContext context) {
    width = MediaQuery.of(context).size.width;
    width = this.hotItems.length == 1 ? (width - 30) : (width * 2 / 3 - 10);
    final height = this.hotItems.length == 1 ? (width * 2 / 3) : (width * 3 / 4);
    return SliverToBoxAdapter(
      child: hotItems == null || hotItems.length == 0
          ? Container()
          : Container(
              child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
              Container(
                padding: EdgeInsets.only(left: 15, bottom: 15),
                child: Text(
                  "CÁC KHOÁ HỌC ƯU ĐÃI",
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ),
              CustomCarousel(
                items: hotItems,
                builderFunction: _itemSlider,
                height: height,
                width: width,
              ),
            ])),
    );
  }

  Widget _itemSlider(BuildContext context, dynamic item, double cardHeight) {
    // double width = MediaQuery.of(context).size.width;
    // width = width * 2 / 3 - 10;
    return InkWell(
      onTap: () {
        Navigator.of(context).pushNamed("/items/" + item.role, arguments: item.id);
      },
      child: Card(
        elevation: 0,
        child: Container(
          alignment: Alignment.topLeft,
          width: width,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              Expanded(
                child: Container(
                  // height: cardHeight * 3 / 4,
                  width: double.infinity,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(10),
                    child: item.image != null && item.image.isNotEmpty
                        ? CustomCachedImage(
                            url: item.image,
                            fit: BoxFit.cover,
                          )
                        : Icon(Icons.broken_image),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


import 'package:flutter/material.dart';

class RatingBox extends StatelessWidget {
  double score;
  final int max = 5;
  final double fontSize;
  final String alignment;

  RatingBox({Key key, this.score, this.fontSize = 14.0, this.alignment: "center"}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: this.alignment == "center" ?  MainAxisAlignment.center : MainAxisAlignment.start ,
        children: _buildStar(),
      ),
    );
  }

  List<Widget> _buildStar() {
    List<Widget> list = [];
    double current = 0;
    if (score == null) {
      score = 0.0;
    }
    while (current < score) {
      list.add(Padding(
        padding: EdgeInsets.all(0.0),
        child: Icon(Icons.star, color: Colors.orange, size: fontSize,),
      ));
      current += 1.0;
    }
    if (score < current && score > current - 1) {
      list.add(Padding(
        padding: EdgeInsets.all(0.0),
        child: Icon(Icons.star_half, color: Colors.orange, size: fontSize),
      ));
      current += 1.0;
    }
    while (current < max) {
      list.add(Padding(
        padding: EdgeInsets.all(0.0),
        child: Icon(Icons.star_border, color: Colors.grey, size: fontSize),
      ));
      current += 1.0;
    }
    return list;
  }
}


import '../customs/custom_search_delegate.dart';
import 'package:flutter/material.dart';

class SearchIcon extends StatelessWidget {
  final screen;

  const SearchIcon({Key key, this.screen}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      padding: EdgeInsets.only(right: 0.0),
      child: IconButton(
        color: Colors.grey[500],
        icon: Icon(
          Icons.search,
          size: 24.0,
        ),
        onPressed: () {
          showSearch(context: context, delegate: CustomSearchDelegate(screen: screen));
        },
      ),
    );
  }
}


import 'package:anylearn/customs/custom_cached_image.dart';
import 'package:flutter/material.dart';

class SliverBanner extends StatelessWidget {
  final String banner;

  const SliverBanner({Key key, this.banner}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    double height = MediaQuery.of(context).size.width * 2 / 3;
    return SliverToBoxAdapter(
      child: banner != null && banner.isNotEmpty
          ? Column(
              children: [
                Container(
                  width: double.infinity,
                  height: height,
                  child: CustomCachedImage(url: banner),
                ),
                Divider(
                  height: 0.0,
                  thickness: 1.0,
                  color: Colors.black12,
                ),
              ],
            )
          : SizedBox(
              height: 0,
            ),
    );
  }
}


import 'package:flutter/material.dart';

class Text2Lines extends StatelessWidget {
  final String text;
  final double fontSize;
  final FontWeight fontWeight;
  final alignment;

  const Text2Lines({Key key, this.text, this.fontSize = 14.0, this.fontWeight = FontWeight.normal, this.alignment = Alignment.topLeft}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: alignment,
      child: Text(
        text,
        softWrap: true,
        overflow: TextOverflow.ellipsis,
        maxLines: 2,
        style: TextStyle(fontSize: fontSize, fontWeight: fontWeight),
      ),
    );
  }
}


import 'package:flutter/material.dart';

class TimeAgo extends StatelessWidget {
  final DateTime time;

  TimeAgo({Key key, this.time}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (time == null) {
      return SizedBox(height: 0);
    }
    return Text(buildTime(time), style: TextStyle(fontSize: 12, fontStyle: FontStyle.italic));
  }

  String buildTime(DateTime _time) {
    String str;
    DateTime now = DateTime.now();
    if (now.difference(_time).inHours <= 1) {
      str = now.difference(_time).inMinutes.toString() + " phút trước";
    } else if (now.difference(_time).inHours < 24) {
      str = now.difference(_time).inHours.toString() + " giờ trước";
    } else if (now.difference(_time).inDays < 7) {
      str = _vnWeekday(_time.weekday) + " lúc " + _time.hour.toString() + ":" + _time.minute.toString();
    } else {
      str = _time.day.toString() +
          " Th" +
          _time.month.toString() +
          " lúc " +
          _time.hour.toString() +
          ":" +
          _time.minute.toString();
    }
    return str;
  }

  String _vnWeekday(int day) {
    switch (day) {
      case 1:
        return "T.2";
      case 2:
        return "T.3";
      case 3:
        return "T.4";
      case 4:
        return "T.5";
      case 5:
        return "T.6";
      case 6:
        return "T.7";
      case 7:
        return "CN";
    }
    return "";
  }
}


import 'package:expandable/expandable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_html/flutter_html.dart';

import '../customs/custom_cached_image.dart';
import '../dto/user_dto.dart';
import '../screens/webview.dart';

class UserQuickProfile extends StatelessWidget {
  final UserDTO user;

  const UserQuickProfile({Key key, this.user}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    double width = MediaQuery.of(context).size.width;
    double imgHeight = width - 50;
    double height = width + 100;
    return SliverToBoxAdapter(
      child: Container(
          padding: EdgeInsets.all(10),
          child: Card(
            color: Colors.white,
            child: Column(
              children: [
                Container(
                  height: imgHeight,
                  width: imgHeight,
                  padding: EdgeInsets.all(25),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(imgHeight / 2),
                    child: user.image != null ? CustomCachedImage(url: user.image) : Icon(Icons.broken_image),
                  ),
                ),
                Container(
                  child: Text(
                    user.name,
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                ),
                Container(
                  alignment: Alignment.topLeft,
                  padding: EdgeInsets.all(15),
                  child: Text(
                    user.introduce ?? "",
                    style: TextStyle(fontSize: 14, color: Colors.grey[500]),
                    textAlign: TextAlign.justify,
                  ),
                ),
                user.fullContent == null
                    ? Container()
                    : Container(
                        child: ExpandableNotifier(
                          child: ScrollOnExpand(
                            child: Expandable(
                              collapsed: Column(
                                children: [
                                  ExpandableButton(
                                    child: Container(
                                      padding: EdgeInsets.fromLTRB(15, 10, 15, 10),
                                      margin: EdgeInsets.only(bottom: 15),
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(18),
                                        boxShadow: [
                                          BoxShadow(
                                            color: Colors.grey.withOpacity(0.5),
                                            spreadRadius: 1,
                                            blurRadius: 1,
                                            offset: Offset(0, 2), // changes position of shadow
                                          ),
                                        ],
                                      ),
                                      child: Text(
                                        "XEM THÊM",
                                        style: TextStyle(color: Colors.black),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                              expanded: Column(children: [
                                Html(
                                  data: user.fullContent ?? "",
                                  shrinkWrap: true,
                                  onLinkTap: (String url, _, __, ___) {
                                    Navigator.of(context).push(MaterialPageRoute(
                                        builder: (context) => WebviewScreen(
                                              url: url,
                                            )));
                                  },
                                ),
                                ExpandableButton(child: Container(
                                      padding: EdgeInsets.fromLTRB(15, 10, 15, 10),
                                      margin: EdgeInsets.only(bottom: 15),
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(18),
                                        boxShadow: [
                                          BoxShadow(
                                            color: Colors.grey.withOpacity(0.5),
                                            spreadRadius: 1,
                                            blurRadius: 1,
                                            offset: Offset(0, 2), // changes position of shadow
                                          ),
                                        ],
                                      ),
                                      child: Text(
                                        "THU GỌN",
                                        style: TextStyle(color: Colors.black),
                                      ),
                                    )),
                              ]),
                            ),
                          ),
                        ),
                      )
              ],
            ),
          )),
    );
  }
}


import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';

class YoutubeImage extends StatelessWidget {
  final link;
  final fit;

  const YoutubeImage({Key key, this.link, this.fit}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final image = _videoThumbURL(link);
    return CachedNetworkImage(imageUrl: image, fit: fit ?? BoxFit.contain,);
  }

  String _videoThumbURL(String yt) {
    String id = _getVideoIdFromUrl(yt);
    return "https://img.youtube.com/vi/$id/0.jpg";
  }

  String _getVideoIdFromUrl(String url) {
    // For matching https://youtu.be/<VIDEOID>
    RegExp regExp1 = new RegExp(r"youtu\.be\/([^#\&\?]{11})", caseSensitive: false, multiLine: false);
    // For matching https://www.youtube.com/watch?v=<VIDEOID>
    RegExp regExp2 = new RegExp(r"\?v=([^#\&\?]{11})", caseSensitive: false, multiLine: false);
    // For matching https://www.youtube.com/watch?x=yz&v=<VIDEOID>
    RegExp regExp3 = new RegExp(r"\&v=([^#\&\?]{11})", caseSensitive: false, multiLine: false);
    // For matching https://www.youtube.com/embed/<VIDEOID>
    RegExp regExp4 = new RegExp(r"embed\/([^#\&\?]{11})", caseSensitive: false, multiLine: false);
    // For matching https://www.youtube.com/v/<VIDEOID>
    RegExp regExp5 = new RegExp(r"\/v\/([^#\&\?]{11})", caseSensitive: false, multiLine: false);

    String matchedString;

    if (regExp1.hasMatch(url)) {
      matchedString = regExp1.firstMatch(url).group(0);
    } else if (regExp2.hasMatch(url)) {
      matchedString = regExp2.firstMatch(url).group(0);
    } else if (regExp3.hasMatch(url)) {
      matchedString = regExp3.firstMatch(url).group(0);
    } else if (regExp4.hasMatch(url)) {
      matchedString = regExp4.firstMatch(url).group(0);
    } else if (regExp5.hasMatch(url)) {
      matchedString = regExp5.firstMatch(url).group(0);
    }

    return matchedString != null ? matchedString.substring(matchedString.length - 11) : null;
  }
}

